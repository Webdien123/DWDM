{"version":3,"file":"ml.min.js","sources":["../node_modules/is-any-array/src/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/mathOperations.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/views/base.js","../node_modules/ml-matrix/src/views/column.js","../node_modules/ml-matrix/src/views/columnSelection.js","../node_modules/ml-matrix/src/views/flipColumn.js","../node_modules/ml-matrix/src/views/flipRow.js","../node_modules/ml-matrix/src/views/row.js","../node_modules/ml-matrix/src/views/rowSelection.js","../node_modules/ml-matrix/src/views/selection.js","../node_modules/ml-matrix/src/views/sub.js","../node_modules/ml-matrix/src/views/transpose.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix1D.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","../node_modules/ml-matrix/src/wrap/wrap.js","../node_modules/ml-matrix/src/dc/lu.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/dc/qr.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-matrix/src/decompositions.js","../node_modules/ml-matrix/src/determinant.js","../node_modules/ml-matrix/src/linearDependencies.js","../node_modules/ml-matrix/src/pseudoInverse.js","../node_modules/ml-matrix/src/covariance.js","../node_modules/ml-matrix/src/correlation.js","../node_modules/ml-matrix/src/dc/evd.js","../node_modules/ml-matrix/src/dc/cholesky.js","../node_modules/ml-matrix/src/dc/nipals.js","../node_modules/ml-array-sum/lib-es6/index.js","../node_modules/ml-array-mean/lib-es6/index.js","../node_modules/ml-cart/src/utils.js","../node_modules/ml-cart/src/TreeNode.js","../node_modules/ml-cart/src/DecisionTreeClassifier.js","../node_modules/ml-cart/src/DecisionTreeRegression.js","../node_modules/random-js/dist/random-js.esm.js","../node_modules/ml-random-forest/src/utils.js","../node_modules/ml-random-forest/src/RandomForestBase.js","../node_modules/ml-random-forest/src/RandomForestClassifier.js","../node_modules/median-quickselect/lib/median-quickselect.min.js","../node_modules/ml-array-median/lib-es6/index.js","../node_modules/ml-random-forest/src/RandomForestRegression.js","../node_modules/ml-pca/src/pca.js","../node_modules/ml-distance-euclidean/lib-es6/euclidean.js","../node_modules/ml-distance-matrix/src/index.js","../node_modules/heap/lib/heap.js","../node_modules/heap/index.js","../node_modules/ml-hclust/src/Cluster.js","../node_modules/ml-hclust/src/agnes.js","../node_modules/ml-nearest-vector/lib-es6/index.js","../node_modules/ml-kmeans/src/utils.js","../node_modules/ml-xsadd/lib-es6/xsadd.js","../node_modules/ml-random/lib-es6/choice.js","../node_modules/ml-random/lib-es6/index.js","../node_modules/ml-kmeans/src/initialization.js","../node_modules/ml-kmeans/src/KMeansResult.js","../node_modules/ml-kmeans/src/kmeans.js","../node_modules/ml-naivebayes/src/utils.js","../node_modules/ml-naivebayes/src/GaussianNB.js","../node_modules/ml-naivebayes/src/MultinomialNB.js","../node_modules/ml-knn/src/KDTree.js","../node_modules/ml-knn/src/index.js","../node_modules/ml-pls/src/utils.js","../node_modules/ml-pls/src/pls.js","../node_modules/ml-pls/src/kopls.js","../node_modules/ml-confusion-matrix/src/index.js","../node_modules/ml-combinations/src/index.js","../node_modules/ml-cross-validation/src/index.js","../node_modules/ml-fnn/FeedForwardNeuralNetwork.js","../node_modules/ml-som/src/node-square.js","../node_modules/ml-som/src/node-hexagonal.js","../node_modules/ml-som/src/index.js","../node_modules/ml-regression-base/src/maybeToPrecision.js","../node_modules/ml-regression-base/src/checkArrayLength.js","../node_modules/ml-regression-base/src/index.js","../node_modules/ml-regression-polynomial/src/index.js","../node_modules/ml-regression-simple-linear/src/index.js","../node_modules/ml-regression-exponential/src/index.js","../node_modules/ml-regression-power/src/index.js","../node_modules/ml-regression-multivariate-linear/src/index.js","../node_modules/ml-kernel-gaussian/gaussian-kernel.js","../node_modules/ml-kernel-polynomial/polynomial-kernel.js","../node_modules/ml-kernel-sigmoid/sigmoid-kernel.js","../node_modules/ml-kernel/src/kernels/anova-kernel.js","../node_modules/ml-kernel/src/kernels/cauchy-kernel.js","../node_modules/ml-kernel/src/kernels/exponential-kernel.js","../node_modules/ml-kernel/src/kernels/histogram-intersection-kernel.js","../node_modules/ml-kernel/src/kernels/laplacian-kernel.js","../node_modules/ml-kernel/src/kernels/multiquadratic-kernel.js","../node_modules/ml-kernel/src/kernels/rational-quadratic-kernel.js","../node_modules/ml-kernel/src/kernel.js","../node_modules/ml-regression-theil-sen/src/index.js","../node_modules/ml-regression-robust-polynomial/src/index.js","../node_modules/ml-levenberg-marquardt/src/errorCalculation.js","../node_modules/ml-levenberg-marquardt/src/step.js","../node_modules/ml-levenberg-marquardt/src/index.js","../node_modules/ml-fcnnls/src/util/selection.js","../node_modules/ml-fcnnls/src/util/sortCollectionSet.js","../node_modules/ml-fcnnls/src/cssls.js","../node_modules/ml-fcnnls/src/initialisation.js","../node_modules/ml-fcnnls/src/util/setDifference.js","../node_modules/ml-fcnnls/src/optimality.js","../node_modules/ml-fcnnls/src/fcnnls.js","../node_modules/ml-fcnnls/src/fcnnlsVector.js","../node_modules/binary-search/index.js","../node_modules/num-sort/index.js","../node_modules/ml-hash-table/src/primeFinder.js","../node_modules/ml-hash-table/src/HashTable.js","../node_modules/ml-sparse-matrix/src/index.js","../node_modules/ml-distance/src/distances/additiveSymmetric.js","../node_modules/ml-distance/src/distances/avg.js","../node_modules/ml-distance/src/distances/bhattacharyya.js","../node_modules/ml-distance/src/distances/canberra.js","../node_modules/ml-distance/src/distances/chebyshev.js","../node_modules/ml-distance/src/distances/clark.js","../node_modules/ml-distance/src/similarities/czekanowski.js","../node_modules/ml-distance/src/distances/czekanowski.js","../node_modules/ml-distance/src/distances/dice.js","../node_modules/ml-distance/src/distances/divergence.js","../node_modules/ml-distance/src/distances/fidelity.js","../node_modules/ml-distance/src/distances/gower.js","../node_modules/ml-distance/src/distances/harmonicMean.js","../node_modules/ml-distance/src/distances/hellinger.js","../node_modules/ml-distance/src/distances/innerProduct.js","../node_modules/ml-distance/src/distances/intersection.js","../node_modules/ml-distance/src/distances/jaccard.js","../node_modules/ml-distance/src/distances/jeffreys.js","../node_modules/ml-distance/src/distances/jensenDifference.js","../node_modules/ml-distance/src/distances/jensenShannon.js","../node_modules/ml-distance/src/distances/kdivergence.js","../node_modules/ml-distance/src/distances/kulczynski.js","../node_modules/ml-distance/src/distances/kullbackLeibler.js","../node_modules/ml-distance/src/distances/kumarHassebrook.js","../node_modules/ml-distance/src/distances/kumarJohnson.js","../node_modules/ml-distance/src/distances/lorentzian.js","../node_modules/ml-distance/src/distances/manhattan.js","../node_modules/ml-distance/src/distances/matusita.js","../node_modules/ml-distance/src/distances/minkowski.js","../node_modules/ml-distance/src/distances/motyka.js","../node_modules/ml-distance/src/distances/neyman.js","../node_modules/ml-distance/src/distances/pearson.js","../node_modules/ml-distance/src/distances/probabilisticSymmetric.js","../node_modules/ml-distance/src/distances/ruzicka.js","../node_modules/ml-distance/src/distances/soergel.js","../node_modules/ml-distance/src/distances/sorensen.js","../node_modules/ml-distance/src/distances/squared.js","../node_modules/ml-distance/src/distances/squaredChord.js","../node_modules/ml-distance/src/distances/taneja.js","../node_modules/ml-distance/src/similarities/tanimoto.js","../node_modules/ml-distance/src/distances/tanimoto.js","../node_modules/ml-distance/src/distances/topsoe.js","../node_modules/ml-distance/src/distances/waveHedges.js","../node_modules/ml-tree-similarity/src/createTree.js","../node_modules/ml-tree-similarity/src/getSimilarity.js","../node_modules/ml-tree-similarity/src/index.js","../node_modules/ml-distance/src/similarities/cosine.js","../node_modules/ml-distance/src/similarities/dice.js","../node_modules/ml-distance/src/similarities/intersection.js","../node_modules/ml-distance/src/similarities/jaccard.js","../node_modules/ml-distance/src/similarities/kulczynski.js","../node_modules/ml-distance/src/similarities/motyka.js","../node_modules/ml-distance/src/similarities/pearson.js","../node_modules/ml-distance/src/similarities/squaredChord.js","../node_modules/ml-performance/src/measures.js","../node_modules/ml-performance/src/index.js","../node_modules/ml-pad-array/src/index.js","../node_modules/ml-savitzky-golay/src/index.js","../node_modules/ml-bit-array/src/creator.js","../node_modules/ml-bit-array/src/index.js","../node_modules/ml-array-mode/lib-es6/index.js","../node_modules/ml-array-normed/lib-es6/index.js","../node_modules/ml-array-sequential-fill/lib-es6/index.js","../node_modules/ml-array-variance/lib-es6/index.js","../node_modules/ml-array-standard-deviation/lib-es6/index.js","../node_modules/ml-array-xy-centroids-merge/src/index.js","../node_modules/ml-arrayxy-closestx/src/index.js","../node_modules/ml-array-xy-covariance/src/index.js","../node_modules/ml-array-xy-max-merge/src/index.js","../node_modules/ml-array-xy-max-y/src/index.js","../node_modules/ml-array-xy-sort-x/src/index.js","../node_modules/ml-arrayxy-uniquex/src/index.js","../node_modules/ml-array-xy-weighted-merge/src/index.js","../node_modules/ml-array-xy-equally-spaced/src/integral.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSmooth.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSlot.js","../node_modules/ml-array-xy-equally-spaced/src/getZones.js","../node_modules/ml-array-xy-equally-spaced/src/index.js","../node_modules/ml-array-xy-filter-x/src/getZones.js","../node_modules/ml-array-xy-filter-x/src/index.js","../src/index.js"],"sourcesContent":["'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction max(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction min(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var minValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import max from 'ml-array-max';\nimport min from 'ml-array-min';\nimport isArray from 'is-any-array';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return `${this.constructor.name} {\n${indent}[\n${indentData}${inspectData(this, indentData)}\n${indent}]\n${indent}rows: ${this.rows}\n${indent}columns: ${this.columns}\n}`;\n}\n\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indent}`);\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import rescale from 'ml-array-rescale';\n\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n} from './util';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport { inspectMatrix } from './inspect';\nimport { installMathOperations } from './mathOperations';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column,\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import { AbstractMatrix } from '../matrix';\n\nexport default class BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n","import { checkColumnIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n","import { checkColumnIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixColumnSelectionView extends BaseView {\r\n  constructor(matrix, columnIndices) {\r\n    columnIndices = checkColumnIndices(matrix, columnIndices);\r\n    super(matrix, matrix.rows, columnIndices.length);\r\n    this.columnIndices = columnIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipColumnView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipRowView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\r\n  }\r\n}\r\n","import { checkRowIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n","import { checkRowIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixRowSelectionView extends BaseView {\r\n  constructor(matrix, rowIndices) {\r\n    rowIndices = checkRowIndices(matrix, rowIndices);\r\n    super(matrix, rowIndices.length, matrix.columns);\r\n    this.rowIndices = rowIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\r\n  }\r\n}\r\n","import { checkIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    let indices = checkIndices(matrix, rowIndices, columnIndices);\n    super(matrix, indices.row.length, indices.column.length);\n    this.rowIndices = indices.row;\n    this.columnIndices = indices.column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n","import { checkRange } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n","import BaseView from './base';\r\n\r\nexport default class MatrixTransposeView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.columns, matrix.rows);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(columnIndex, rowIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(columnIndex, rowIndex);\r\n  }\r\n}\r\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","import WrapperMatrix1D from './WrapperMatrix1D';\nimport WrapperMatrix2D from './WrapperMatrix2D';\n\nexport function wrap(array, options) {\n  if (Array.isArray(array)) {\n    if (array[0] && Array.isArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n","export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","import Matrix from './matrix';\nimport LuDecomposition from './dc/lu';\nimport MatrixSelectionView from './views/selection';\n\nexport function determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n","import Matrix from './matrix';\nimport SingularValueDecomposition from './dc/svd';\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nexport function linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x))\n      .abs()\n      .max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n","import SVD from './dc/svd';\nimport Matrix from './matrix';\n\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  let svdSolution = new SVD(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n","import Matrix from './matrix';\n\nexport function covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n","import Matrix from './matrix';\n\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n","import WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nimport Matrix from '../matrix';\n\nexport default class nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (Array.isArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (!Y.isColumnVector() || Y.rows !== X.rows) {\n        throw new Error('Y must be a column vector of length X.rows');\n      }\n      u = Y;\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose()\n        .mmul(u)\n        .div(\n          u\n            .transpose()\n            .mmul(u)\n            .get(0, 0),\n        );\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(\n        w\n          .transpose()\n          .mmul(w)\n          .get(0, 0),\n      );\n\n      if (counter > 0) {\n        diff = t\n          .clone()\n          .sub(tOld)\n          .pow(2)\n          .sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose()\n          .mmul(t)\n          .div(\n            t\n              .transpose()\n              .mmul(t)\n              .get(0, 0),\n          );\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(\n          q\n            .transpose()\n            .mmul(q)\n            .get(0, 0),\n        );\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose()\n        .mmul(t)\n        .div(\n          t\n            .transpose()\n            .mmul(t)\n            .get(0, 0),\n        );\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u\n        .transpose()\n        .mmul(t)\n        .div(\n          t\n            .transpose()\n            .mmul(t)\n            .get(0, 0),\n        );\n      let yResidual = Y.clone().sub(\n        t\n          .clone()\n          .mulS(residual.get(0, 0))\n          .mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t\n        .transpose()\n        .mmul(t)\n        .sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n","import isArray from 'is-any-array';\n\n/**\n * Computes the mean of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction sum(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += input[i];\n  }\n\n  return sumValue;\n}\n\nexport default sum;\n","import sum from 'ml-array-sum';\n\n/**\n * Computes the mean of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction mean(input) {\n  return sum(input) / input.length;\n}\n\nexport default mean;\n","import Matrix from 'ml-matrix';\nimport meanArray from 'ml-array-mean';\n\n/**\n * @private\n * return an array of probabilities of each class\n * @param {Array} array - contains the classes\n * @param {number} numberOfClasses\n * @return {Matrix} - rowVector of probabilities.\n */\nexport function toDiscreteDistribution(array, numberOfClasses) {\n  let counts = new Array(numberOfClasses).fill(0);\n  for (let i = 0; i < array.length; ++i) {\n    counts[array[i]] += 1 / array.length;\n  }\n\n  return Matrix.rowVector(counts);\n}\n\n/**\n * @private\n * Retrieves the impurity of array of predictions\n * @param {Array} array - predictions.\n * @return {number} Gini impurity\n */\nexport function giniImpurity(array) {\n  if (array.length === 0) {\n    return 0;\n  }\n\n  let probabilities = toDiscreteDistribution(\n    array,\n    getNumberOfClasses(array),\n  ).getRow(0);\n\n  let sum = 0.0;\n  for (let i = 0; i < probabilities.length; ++i) {\n    sum += probabilities[i] * probabilities[i];\n  }\n\n  return 1 - sum;\n}\n\n/**\n * @private\n * Return the number of classes given the array of predictions.\n * @param {Array} array - predictions.\n * @return {number} Number of classes.\n */\nexport function getNumberOfClasses(array) {\n  return array\n    .filter(function(val, i, arr) {\n      return arr.indexOf(val) === i;\n    })\n    .map((val) => val + 1)\n    .reduce((a, b) => Math.max(a, b));\n}\n\n/**\n * @private\n * Calculates the Gini Gain of an array of predictions and those predictions splitted by a feature.\n * @param {Array} array - Predictions\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - Gini Gain.\n */\n\nexport function giniGain(array, splitted) {\n  let splitsImpurity = 0.0;\n  let splits = ['greater', 'lesser'];\n\n  for (let i = 0; i < splits.length; ++i) {\n    let currentSplit = splitted[splits[i]];\n    splitsImpurity +=\n      (giniImpurity(currentSplit) * currentSplit.length) / array.length;\n  }\n\n  return giniImpurity(array) - splitsImpurity;\n}\n\n/**\n * @private\n * Calculates the squared error of a predictions values.\n * @param {Array} array - predictions values\n * @return {number} squared error.\n */\nexport function squaredError(array) {\n  let l = array.length;\n\n  let m = meanArray(array);\n  let error = 0.0;\n\n  for (let i = 0; i < l; ++i) {\n    let currentElement = array[i];\n    error += (currentElement - m) * (currentElement - m);\n  }\n\n  return error;\n}\n\n/**\n * @private\n * Calculates the sum of squared error of the two arrays that contains the splitted values.\n * @param {Array} array - this argument is no necessary but is used to fit with the main interface.\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - sum of squared errors.\n */\nexport function regressionError(array, splitted) {\n  let error = 0.0;\n  let splits = ['greater', 'lesser'];\n\n  for (let i = 0; i < splits.length; ++i) {\n    let currentSplit = splitted[splits[i]];\n    error += squaredError(currentSplit);\n  }\n  return error;\n}\n\n/**\n * @private\n * Split the training set and values from a given column of the training set if is less than a value\n * @param {Matrix} X - Training set.\n * @param {Array} y - Training values.\n * @param {number} column - Column to split.\n * @param {number} value - value to split the Training set and values.\n * @return {object} - Object that contains the splitted values.\n */\nexport function matrixSplitter(X, y, column, value) {\n  let lesserX = [];\n  let greaterX = [];\n  let lesserY = [];\n  let greaterY = [];\n\n  for (let i = 0; i < X.rows; ++i) {\n    if (X.get(i, column) < value) {\n      lesserX.push(X.getRow(i));\n      lesserY.push(y[i]);\n    } else {\n      greaterX.push(X.getRow(i));\n      greaterY.push(y[i]);\n    }\n  }\n\n  return {\n    greaterX: greaterX,\n    greaterY: greaterY,\n    lesserX: lesserX,\n    lesserY: lesserY,\n  };\n}\n\n/**\n * @private\n * Calculates the mean between two values\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nexport function mean(a, b) {\n  return (a + b) / 2;\n}\n\n/**\n * @private\n * Returns a list of tuples that contains the i-th element of each array.\n * @param {Array} a\n * @param {Array} b\n * @return {Array} list of tuples.\n */\nexport function zip(a, b) {\n  if (a.length !== b.length) {\n    throw new TypeError(\n      `Error on zip: the size of a: ${a.length} is different from b: ${b.length}`,\n    );\n  }\n\n  let ret = new Array(a.length);\n  for (let i = 0; i < a.length; ++i) {\n    ret[i] = [a[i], b[i]];\n  }\n\n  return ret;\n}\n","import Matrix from 'ml-matrix';\nimport mean from 'ml-array-mean';\n\nimport * as Utils from './utils';\n\nconst gainFunctions = {\n  gini: Utils.giniGain,\n  regression: Utils.regressionError,\n};\n\nconst splitFunctions = {\n  mean: Utils.mean,\n};\n\nexport default class TreeNode {\n  /**\n   * @private\n   * Constructor for a tree node given the options received on the main classes (DecisionTreeClassifier, DecisionTreeRegression)\n   * @param {object|TreeNode} options for loading\n   * @constructor\n   */\n  constructor(options) {\n    // options parameters\n    this.kind = options.kind;\n    this.gainFunction = options.gainFunction;\n    this.splitFunction = options.splitFunction;\n    this.minNumSamples = options.minNumSamples;\n    this.maxDepth = options.maxDepth;\n  }\n\n  /**\n   * @private\n   * Function that retrieve the best feature to make the split.\n   * @param {Matrix} XTranspose - Training set transposed\n   * @param {Array} y - labels or values (depending of the decision tree)\n   * @return {object} - return tree values, the best gain, column and the split value.\n   */\n  bestSplit(XTranspose, y) {\n    // Depending in the node tree class, we set the variables to check information gain (to classify)\n    // or error (for regression)\n\n    let bestGain = this.kind === 'classifier' ? -Infinity : Infinity;\n    let check = this.kind === 'classifier' ? (a, b) => a > b : (a, b) => a < b;\n\n    let maxColumn;\n    let maxValue;\n\n    for (let i = 0; i < XTranspose.rows; ++i) {\n      let currentFeature = XTranspose.getRow(i);\n      let splitValues = this.featureSplit(currentFeature, y);\n      for (let j = 0; j < splitValues.length; ++j) {\n        let currentSplitVal = splitValues[j];\n        let splitted = this.split(currentFeature, y, currentSplitVal);\n\n        let gain = gainFunctions[this.gainFunction](y, splitted);\n        if (check(gain, bestGain)) {\n          maxColumn = i;\n          maxValue = currentSplitVal;\n          bestGain = gain;\n        }\n      }\n    }\n\n    return {\n      maxGain: bestGain,\n      maxColumn: maxColumn,\n      maxValue: maxValue,\n    };\n  }\n\n  /**\n   * @private\n   * Makes the split of the training labels or values from the training set feature given a split value.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @param {number} splitValue\n   * @return {object}\n   */\n  split(x, y, splitValue) {\n    let lesser = [];\n    let greater = [];\n\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] < splitValue) {\n        lesser.push(y[i]);\n      } else {\n        greater.push(y[i]);\n      }\n    }\n\n    return {\n      greater: greater,\n      lesser: lesser,\n    };\n  }\n\n  /**\n   * @private\n   * Calculates the possible points to split over the tree given a training set feature and corresponding labels or values.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @return {Array} possible split values.\n   */\n  featureSplit(x, y) {\n    let splitValues = [];\n    let arr = Utils.zip(x, y);\n    arr.sort(function(a, b) {\n      return a[0] - b[0];\n    });\n\n    for (let i = 1; i < arr.length; ++i) {\n      if (arr[i - 1][1] !== arr[i][1]) {\n        splitValues.push(\n          splitFunctions[this.splitFunction](arr[i - 1][0], arr[i][0]),\n        );\n      }\n    }\n\n    return splitValues;\n  }\n\n  /**\n   * @private\n   * Calculate the predictions of a leaf tree node given the training labels or values\n   * @param {Array} y\n   */\n  calculatePrediction(y) {\n    if (this.kind === 'classifier') {\n      this.distribution = Utils.toDiscreteDistribution(\n        y,\n        Utils.getNumberOfClasses(y),\n      );\n      if (this.distribution.columns === 0) {\n        throw new TypeError('Error on calculate the prediction');\n      }\n    } else {\n      this.distribution = mean(y);\n    }\n  }\n\n  /**\n   * @private\n   * Train a node given the training set and labels, because it trains recursively, it also receive\n   * the current depth of the node, parent gain to avoid infinite recursion and boolean value to check if\n   * the training set is transposed.\n   * @param {Matrix} X - Training set (could be transposed or not given transposed).\n   * @param {Array} y - Training labels or values.\n   * @param {number} currentDepth - Current depth of the node.\n   * @param {number} parentGain - parent node gain or error.\n   */\n  train(X, y, currentDepth, parentGain) {\n    if (X.rows <= this.minNumSamples) {\n      this.calculatePrediction(y);\n      return;\n    }\n    if (parentGain === undefined) parentGain = 0.0;\n\n    let XTranspose = X.transpose();\n    let split = this.bestSplit(XTranspose, y);\n\n    this.splitValue = split.maxValue;\n    this.splitColumn = split.maxColumn;\n    this.gain = split.maxGain;\n\n    let splittedMatrix = Utils.matrixSplitter(\n      X,\n      y,\n      this.splitColumn,\n      this.splitValue,\n    );\n\n    if (\n      currentDepth < this.maxDepth &&\n      (this.gain > 0.01 && this.gain !== parentGain) &&\n      (splittedMatrix.lesserX.length > 0 && splittedMatrix.greaterX.length > 0)\n    ) {\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      let lesserX = new Matrix(splittedMatrix.lesserX);\n      let greaterX = new Matrix(splittedMatrix.greaterX);\n\n      this.left.train(\n        lesserX,\n        splittedMatrix.lesserY,\n        currentDepth + 1,\n        this.gain,\n      );\n      this.right.train(\n        greaterX,\n        splittedMatrix.greaterY,\n        currentDepth + 1,\n        this.gain,\n      );\n    } else {\n      this.calculatePrediction(y);\n    }\n  }\n\n  /**\n   * @private\n   * Calculates the prediction of a given element.\n   * @param {Array} row\n   * @return {number|Array} prediction\n   *          * if a node is a classifier returns an array of probabilities of each class.\n   *          * if a node is for regression returns a number with the prediction.\n   */\n  classify(row) {\n    if (this.right && this.left) {\n      if (row[this.splitColumn] < this.splitValue) {\n        return this.left.classify(row);\n      } else {\n        return this.right.classify(row);\n      }\n    }\n\n    return this.distribution;\n  }\n\n  /**\n   * @private\n   * Set the parameter of the current node and their children.\n   * @param {object} node - parameters of the current node and the children.\n   */\n  setNodeParameters(node) {\n    if (node.distribution !== undefined) {\n      this.distribution =\n        node.distribution.constructor === Array\n          ? new Matrix(node.distribution)\n          : node.distribution;\n    } else {\n      this.distribution = undefined;\n      this.splitValue = node.splitValue;\n      this.splitColumn = node.splitColumn;\n      this.gain = node.gain;\n\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      if (node.left !== {}) {\n        this.left.setNodeParameters(node.left);\n      }\n      if (node.right !== {}) {\n        this.right.setNodeParameters(node.right);\n      }\n    }\n  }\n}\n","import Matrix from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'gini',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity,\n};\n\nexport class DecisionTreeClassifier {\n  /**\n   * Create new Decision Tree Classifier with CART implementation with the given options\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"gini\"] - gain function to get the best split, \"gini\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   * @constructor\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'classifier';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    this.root = new Tree(this.options);\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    this.root.train(trainingSet, trainingLabels, 0, null);\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    toPredict = Matrix.checkMatrix(toPredict);\n    let predictions = new Array(toPredict.rows);\n\n    for (let i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root\n        .classify(toPredict.getRow(i))\n        .maxRowIndex(0)[1];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTClassifier',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {DecisionTreeClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'DTClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new DecisionTreeClassifier(true, model);\n  }\n}\n","import Matrix from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'regression',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity,\n};\n\nexport class DecisionTreeRegression {\n  /**\n   * Create new Decision Tree Regression with CART implementation with the given options.\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"regression\"] - gain function to get the best split, \"regression\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'regression';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and values.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    this.root = new Tree(this.options);\n\n    if (\n      typeof trainingSet[0] !== 'undefined' &&\n      trainingSet[0].length === undefined\n    ) {\n      trainingSet = Matrix.columnVector(trainingSet);\n    } else {\n      trainingSet = Matrix.checkMatrix(trainingSet);\n    }\n    this.root.train(trainingSet, trainingValues, 0);\n  }\n\n  /**\n   * Predicts the values given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    if (\n      typeof toPredict[0] !== 'undefined' &&\n      toPredict[0].length === undefined\n    ) {\n      toPredict = Matrix.columnVector(toPredict);\n    }\n    toPredict = Matrix.checkMatrix(toPredict);\n\n    let predictions = new Array(toPredict.rows);\n    for (let i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root.classify(toPredict.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTRegression',\n    };\n  }\n\n  /**\n   * Load a Decision tree regression with the given model.\n   * @param {object} model\n   * @return {DecisionTreeRegression}\n   */\n  static load(model) {\n    if (model.name !== 'DTRegression') {\n      throw new RangeError(`Invalid model:${model.name}`);\n    }\n\n    return new DecisionTreeRegression(true, model);\n  }\n}\n","const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\r\nconst LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\r\nconst UINT32_MAX = -1 >>> 0;\r\nconst UINT32_SIZE = UINT32_MAX + 1;\r\nconst INT32_SIZE = UINT32_SIZE / 2;\r\nconst INT32_MAX = INT32_SIZE - 1;\r\nconst UINT21_SIZE = 1 << 21;\r\nconst UINT21_MAX = UINT21_SIZE - 1;\n\n/**\r\n * Returns a value within [-0x80000000, 0x7fffffff]\r\n */\r\nfunction int32(engine) {\r\n    return engine.next() | 0;\r\n}\n\nfunction add(distribution, addend) {\r\n    if (addend === 0) {\r\n        return distribution;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) + addend;\r\n    }\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n */\r\nfunction int53(engine) {\r\n    const high = engine.next() | 0;\r\n    const low = engine.next() >>> 0;\r\n    return ((high & UINT21_MAX) * UINT32_SIZE +\r\n        low +\r\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n */\r\nfunction int53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & 0x400000) {\r\n            if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return ((high & UINT21_MAX) * UINT32_SIZE +\r\n                low +\r\n                (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n        }\r\n    }\r\n}\n\n/**\r\n * Returns a value within [0, 0xffffffff]\r\n */\r\nfunction uint32(engine) {\r\n    return engine.next() >>> 0;\r\n}\n\n/**\r\n * Returns a value within [0, 0x1fffffffffffff]\r\n */\r\nfunction uint53(engine) {\r\n    const high = engine.next() & UINT21_MAX;\r\n    const low = engine.next() >>> 0;\r\n    return high * UINT32_SIZE + low;\r\n}\n\n/**\r\n * Returns a value within [0, 0x20000000000000]\r\n */\r\nfunction uint53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & UINT21_SIZE) {\r\n            if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return (high & UINT21_MAX) * UINT32_SIZE + low;\r\n        }\r\n    }\r\n}\n\nfunction isPowerOfTwoMinusOne(value) {\r\n    return ((value + 1) & value) === 0;\r\n}\r\nfunction bitmask(masking) {\r\n    return (engine) => engine.next() & masking;\r\n}\r\nfunction downscaleToLoopCheckedRange(range) {\r\n    const extendedRange = range + 1;\r\n    const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\r\n    return engine => {\r\n        let value = 0;\r\n        do {\r\n            value = engine.next() >>> 0;\r\n        } while (value >= maximum);\r\n        return value % extendedRange;\r\n    };\r\n}\r\nfunction downscaleToRange(range) {\r\n    if (isPowerOfTwoMinusOne(range)) {\r\n        return bitmask(range);\r\n    }\r\n    else {\r\n        return downscaleToLoopCheckedRange(range);\r\n    }\r\n}\r\nfunction isEvenlyDivisibleByMaxInt32(value) {\r\n    return (value | 0) === 0;\r\n}\r\nfunction upscaleWithHighMasking(masking) {\r\n    return engine => {\r\n        const high = engine.next() & masking;\r\n        const low = engine.next() >>> 0;\r\n        return high * UINT32_SIZE + low;\r\n    };\r\n}\r\nfunction upscaleToLoopCheckedRange(extendedRange) {\r\n    const maximum = extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() & UINT21_MAX;\r\n            const low = engine.next() >>> 0;\r\n            ret = high * UINT32_SIZE + low;\r\n        } while (ret >= maximum);\r\n        return ret % extendedRange;\r\n    };\r\n}\r\nfunction upscaleWithinU53(range) {\r\n    const extendedRange = range + 1;\r\n    if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\r\n        const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\r\n        if (isPowerOfTwoMinusOne(highRange)) {\r\n            return upscaleWithHighMasking(highRange);\r\n        }\r\n    }\r\n    return upscaleToLoopCheckedRange(extendedRange);\r\n}\r\nfunction upscaleWithinI53AndLoopCheck(min, max) {\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() | 0;\r\n            const low = engine.next() >>> 0;\r\n            ret =\r\n                (high & UINT21_MAX) * UINT32_SIZE +\r\n                    low +\r\n                    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\r\n        } while (ret < min || ret > max);\r\n        return ret;\r\n    };\r\n}\r\n/**\r\n * Returns a Distribution to return a value within [min, max]\r\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n */\r\nfunction integer(min, max) {\r\n    min = Math.floor(min);\r\n    max = Math.floor(max);\r\n    if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\r\n        throw new RangeError(`Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\r\n        throw new RangeError(`Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    const range = max - min;\r\n    if (range <= 0 || !isFinite(range)) {\r\n        return () => min;\r\n    }\r\n    else if (range === UINT32_MAX) {\r\n        if (min === 0) {\r\n            return uint32;\r\n        }\r\n        else {\r\n            return add(int32, min + INT32_SIZE);\r\n        }\r\n    }\r\n    else if (range < UINT32_MAX) {\r\n        return add(downscaleToRange(range), min);\r\n    }\r\n    else if (range === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53, min);\r\n    }\r\n    else if (range < LARGEST_SAFE_INTEGER) {\r\n        return add(upscaleWithinU53(range), min);\r\n    }\r\n    else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53Full, min);\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER &&\r\n        max === SMALLEST_UNSAFE_INTEGER) {\r\n        return int53Full;\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\r\n        return int53;\r\n    }\r\n    else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(int53, 1);\r\n    }\r\n    else if (max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\r\n    }\r\n    else {\r\n        return upscaleWithinI53AndLoopCheck(min, max);\r\n    }\r\n}\n\nfunction isLeastBitTrue(engine) {\r\n    return (engine.next() & 1) === 1;\r\n}\r\nfunction lessThan(distribution, value) {\r\n    return engine => distribution(engine) < value;\r\n}\r\nfunction probability(percentage) {\r\n    if (percentage <= 0) {\r\n        return () => false;\r\n    }\r\n    else if (percentage >= 1) {\r\n        return () => true;\r\n    }\r\n    else {\r\n        const scaled = percentage * UINT32_SIZE;\r\n        if (scaled % 1 === 0) {\r\n            return lessThan(int32, (scaled - INT32_SIZE) | 0);\r\n        }\r\n        else {\r\n            return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\r\n        }\r\n    }\r\n}\r\nfunction bool(numerator, denominator) {\r\n    if (denominator == null) {\r\n        if (numerator == null) {\r\n            return isLeastBitTrue;\r\n        }\r\n        return probability(numerator);\r\n    }\r\n    else {\r\n        if (numerator <= 0) {\r\n            return () => false;\r\n        }\r\n        else if (numerator >= denominator) {\r\n            return () => true;\r\n        }\r\n        return lessThan(integer(0, denominator - 1), numerator);\r\n    }\r\n}\n\n/**\r\n * Returns a Distribution that returns a random `Date` within the inclusive\r\n * range of [`start`, `end`].\r\n * @param start The minimum `Date`\r\n * @param end The maximum `Date`\r\n */\r\nfunction date(start, end) {\r\n    const distribution = integer(+start, +end);\r\n    return engine => new Date(distribution(engine));\r\n}\n\n/**\r\n * Returns a Distribution to return a value within [1, sideCount]\r\n * @param sideCount The number of sides of the die\r\n */\r\nfunction die(sideCount) {\r\n    return integer(1, sideCount);\r\n}\n\n/**\r\n * Returns a distribution that returns an array of length `dieCount` of values\r\n * within [1, `sideCount`]\r\n * @param sideCount The number of sides of each die\r\n * @param dieCount The number of dice\r\n */\r\nfunction dice(sideCount, dieCount) {\r\n    const distribution = die(sideCount);\r\n    return engine => {\r\n        const result = [];\r\n        for (let i = 0; i < dieCount; ++i) {\r\n            result.push(distribution(engine));\r\n        }\r\n        return result;\r\n    };\r\n}\n\n// tslint:disable:unified-signatures\r\n// has 2**x chars, for faster uniform distribution\r\nconst DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\r\nfunction string(pool = DEFAULT_STRING_POOL) {\r\n    const poolLength = pool.length;\r\n    if (!poolLength) {\r\n        throw new Error(\"Expected pool not to be an empty string\");\r\n    }\r\n    const distribution = integer(0, poolLength - 1);\r\n    return (engine, length) => {\r\n        let result = \"\";\r\n        for (let i = 0; i < length; ++i) {\r\n            const j = distribution(engine);\r\n            result += pool.charAt(j);\r\n        }\r\n        return result;\r\n    };\r\n}\n\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\r\nconst lowerHex = string(LOWER_HEX_POOL);\r\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\r\n/**\r\n * Returns a Distribution that returns a random string comprised of numbers\r\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\r\n * @param length Length of the result string\r\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n */\r\nfunction hex(uppercase) {\r\n    if (uppercase) {\r\n        return upperHex;\r\n    }\r\n    else {\r\n        return lowerHex;\r\n    }\r\n}\n\nfunction convertSliceArgument(value, length) {\r\n    if (value < 0) {\r\n        return Math.max(value + length, 0);\r\n    }\r\n    else {\r\n        return Math.min(value, length);\r\n    }\r\n}\n\nfunction toInteger(value) {\r\n    const num = +value;\r\n    if (num < 0) {\r\n        return Math.ceil(num);\r\n    }\r\n    else {\r\n        return Math.floor(num);\r\n    }\r\n}\n\n/**\r\n * Returns a random value within the provided `source` within the sliced\r\n * bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction pick(engine, source, begin, end) {\r\n    const length = source.length;\r\n    if (length === 0) {\r\n        throw new RangeError(\"Cannot pick from an empty array\");\r\n    }\r\n    const start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\r\n    const finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\r\n    if (start >= finish) {\r\n        throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\r\n    }\r\n    const distribution = integer(start, finish - 1);\r\n    return source[distribution(engine)];\r\n}\n\nfunction multiply(distribution, multiplier) {\r\n    if (multiplier === 1) {\r\n        return distribution;\r\n    }\r\n    else if (multiplier === 0) {\r\n        return () => 0;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) * multiplier;\r\n    }\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0)\r\n */\r\nfunction realZeroToOneExclusive(engine) {\r\n    return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0]\r\n */\r\nfunction realZeroToOneInclusive(engine) {\r\n    return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [min, max) or [min, max]\r\n * @param min The minimum floating-point value, inclusive.\r\n * @param max The maximum floating-point value.\r\n * @param inclusive If true, `max` will be inclusive.\r\n */\r\nfunction real(min, max, inclusive = false) {\r\n    if (!isFinite(min)) {\r\n        throw new RangeError(\"Expected min to be a finite number\");\r\n    }\r\n    else if (!isFinite(max)) {\r\n        throw new RangeError(\"Expected max to be a finite number\");\r\n    }\r\n    return add(multiply(inclusive ? realZeroToOneInclusive : realZeroToOneExclusive, max - min), min);\r\n}\n\nconst sliceArray = Array.prototype.slice;\n\n/**\r\n * Shuffles an array in-place\r\n * @param engine The Engine to use when choosing random values\r\n * @param array The array to shuffle\r\n * @param downTo minimum index to shuffle. Only used internally.\r\n */\r\nfunction shuffle(engine, array, downTo = 0) {\r\n    const length = array.length;\r\n    if (length) {\r\n        for (let i = (length - 1) >>> 0; i > downTo; --i) {\r\n            const distribution = integer(0, i);\r\n            const j = distribution(engine);\r\n            if (i !== j) {\r\n                const tmp = array[i];\r\n                array[i] = array[j];\r\n                array[j] = tmp;\r\n            }\r\n        }\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * From the population array, produce an array with sampleSize elements that\r\n * are randomly chosen without repeats.\r\n * @param engine The Engine to use when choosing random values\r\n * @param population An array that has items to choose a sample from\r\n * @param sampleSize The size of the result array\r\n */\r\nfunction sample(engine, population, sampleSize) {\r\n    if (sampleSize < 0 ||\r\n        sampleSize > population.length ||\r\n        !isFinite(sampleSize)) {\r\n        throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\r\n    }\r\n    if (sampleSize === 0) {\r\n        return [];\r\n    }\r\n    const clone = sliceArray.call(population);\r\n    const length = clone.length;\r\n    if (length === sampleSize) {\r\n        return shuffle(engine, clone, 0);\r\n    }\r\n    const tailLength = length - sampleSize;\r\n    return shuffle(engine, clone, tailLength - 1).slice(tailLength);\r\n}\n\nconst stringRepeat = (() => {\r\n    try {\r\n        if (\"x\".repeat(3) === \"xxx\") {\r\n            return (pattern, count) => pattern.repeat(count);\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return (pattern, count) => {\r\n        let result = \"\";\r\n        while (count > 0) {\r\n            if (count & 1) {\r\n                result += pattern;\r\n            }\r\n            count >>= 1;\r\n            pattern += pattern;\r\n        }\r\n        return result;\r\n    };\r\n})();\n\nfunction zeroPad(text, zeroCount) {\r\n    return stringRepeat(\"0\", zeroCount - text.length) + text;\r\n}\r\n/**\r\n * Returns a Universally Unique Identifier Version 4.\r\n *\r\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n */\r\nfunction uuid4(engine) {\r\n    const a = engine.next() >>> 0;\r\n    const b = engine.next() | 0;\r\n    const c = engine.next() | 0;\r\n    const d = engine.next() >>> 0;\r\n    return (zeroPad(a.toString(16), 8) +\r\n        \"-\" +\r\n        zeroPad((b & 0xffff).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\r\n        zeroPad(d.toString(16), 8));\r\n}\n\n/**\r\n * An int32-producing Engine that uses `Math.random()`\r\n */\r\nconst nativeMath = {\r\n    next() {\r\n        return (Math.random() * UINT32_SIZE) | 0;\r\n    }\r\n};\n\n// tslint:disable:unified-signatures\r\n/**\r\n * A wrapper around an Engine that provides easy-to-use methods for\r\n * producing values based on known distributions\r\n */\r\nclass Random {\r\n    /**\r\n     * Creates a new Random wrapper\r\n     * @param engine The engine to use (defaults to a `Math.random`-based implementation)\r\n     */\r\n    constructor(engine = nativeMath) {\r\n        this.engine = engine;\r\n    }\r\n    /**\r\n     * Returns a value within [-0x80000000, 0x7fffffff]\r\n     */\r\n    int32() {\r\n        return int32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0xffffffff]\r\n     */\r\n    uint32() {\r\n        return uint32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x1fffffffffffff]\r\n     */\r\n    uint53() {\r\n        return uint53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x20000000000000]\r\n     */\r\n    uint53Full() {\r\n        return uint53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n     */\r\n    int53() {\r\n        return int53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n     */\r\n    int53Full() {\r\n        return int53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [min, max]\r\n     * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n     * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n     */\r\n    integer(min, max) {\r\n        return integer(min, max)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0]\r\n     */\r\n    realZeroToOneInclusive() {\r\n        return realZeroToOneInclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0)\r\n     */\r\n    realZeroToOneExclusive() {\r\n        return realZeroToOneExclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [min, max) or [min, max]\r\n     * @param min The minimum floating-point value, inclusive.\r\n     * @param max The maximum floating-point value.\r\n     * @param inclusive If true, `max` will be inclusive.\r\n     */\r\n    real(min, max, inclusive = false) {\r\n        return real(min, max, inclusive)(this.engine);\r\n    }\r\n    bool(numerator, denominator) {\r\n        return bool(numerator, denominator)(this.engine);\r\n    }\r\n    /**\r\n     * Return a random value within the provided `source` within the sliced\r\n     * bounds of `begin` and `end`.\r\n     * @param source an array of items to pick from\r\n     * @param begin the beginning slice index (defaults to `0`)\r\n     * @param end the ending slice index (defaults to `source.length`)\r\n     */\r\n    pick(source, begin, end) {\r\n        return pick(this.engine, source, begin, end);\r\n    }\r\n    /**\r\n     * Shuffles an array in-place\r\n     * @param array The array to shuffle\r\n     */\r\n    shuffle(array) {\r\n        return shuffle(this.engine, array);\r\n    }\r\n    /**\r\n     * From the population array, returns an array with sampleSize elements that\r\n     * are randomly chosen without repeats.\r\n     * @param population An array that has items to choose a sample from\r\n     * @param sampleSize The size of the result array\r\n     */\r\n    sample(population, sampleSize) {\r\n        return sample(this.engine, population, sampleSize);\r\n    }\r\n    /**\r\n     * Returns a value within [1, sideCount]\r\n     * @param sideCount The number of sides of the die\r\n     */\r\n    die(sideCount) {\r\n        return die(sideCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns an array of length `dieCount` of values within [1, sideCount]\r\n     * @param sideCount The number of sides of each die\r\n     * @param dieCount The number of dice\r\n     */\r\n    dice(sideCount, dieCount) {\r\n        return dice(sideCount, dieCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a Universally Unique Identifier Version 4.\r\n     *\r\n     * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n     */\r\n    uuid4() {\r\n        return uuid4(this.engine);\r\n    }\r\n    string(length, pool) {\r\n        return string(pool)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random string comprised of numbers or the characters `abcdef`\r\n     * (or `ABCDEF`) of length `length`.\r\n     * @param length Length of the result string\r\n     * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n     */\r\n    hex(length, uppercase) {\r\n        return hex(uppercase)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random `Date` within the inclusive range of [`start`, `end`].\r\n     * @param start The minimum `Date`\r\n     * @param end The maximum `Date`\r\n     */\r\n    date(start, end) {\r\n        return date(start, end)(this.engine);\r\n    }\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\r\n */\r\nconst I32Array = (() => {\r\n    try {\r\n        const buffer = new ArrayBuffer(4);\r\n        const view = new Int32Array(buffer);\r\n        view[0] = INT32_SIZE;\r\n        if (view[0] === -INT32_SIZE) {\r\n            return Int32Array;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return Array;\r\n})();\n\nlet data = null;\r\nconst COUNT = 128;\r\nlet index = COUNT;\r\n/**\r\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\r\n * which is typically available in modern browsers.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\n *\r\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst browserCrypto = {\r\n    next() {\r\n        if (index >= COUNT) {\r\n            if (data === null) {\r\n                data = new I32Array(COUNT);\r\n            }\r\n            crypto.getRandomValues(data);\r\n            index = 0;\r\n        }\r\n        return data[index++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns an array of random int32 values, based on current time\r\n * and a random number engine\r\n *\r\n * @param engine an Engine to pull random values from, default `nativeMath`\r\n * @param length the length of the Array, minimum 1, default 16\r\n */\r\nfunction createEntropy(engine = nativeMath, length = 16) {\r\n    const array = [];\r\n    array.push(new Date().getTime() | 0);\r\n    for (let i = 1; i < length; ++i) {\r\n        array[i] = engine.next() | 0;\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\r\n */\r\nconst imul = (() => {\r\n    try {\r\n        if (Math.imul(UINT32_MAX, 5) === -5) {\r\n            return Math.imul;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    const UINT16_MAX = 0xffff;\r\n    return (a, b) => {\r\n        const ah = (a >>> 16) & UINT16_MAX;\r\n        const al = a & UINT16_MAX;\r\n        const bh = (b >>> 16) & UINT16_MAX;\r\n        const bl = b & UINT16_MAX;\r\n        // the shift by 0 fixes the sign on the high part\r\n        // the final |0 converts the unsigned value into a signed value\r\n        return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\r\n    };\r\n})();\n\nconst ARRAY_SIZE = 624;\r\nconst ARRAY_MAX = ARRAY_SIZE - 1;\r\nconst M = 397;\r\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\r\nconst A = 0x9908b0df;\r\n/**\r\n * An Engine that is a pseudorandom number generator using the Mersenne\r\n * Twister algorithm based on the prime 2**19937 − 1\r\n *\r\n * See http://en.wikipedia.org/wiki/Mersenne_twister\r\n */\r\nclass MersenneTwister19937 {\r\n    /**\r\n     * MersenneTwister19937 should not be instantiated directly.\r\n     * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\r\n     */\r\n    constructor() {\r\n        this.data = new I32Array(ARRAY_SIZE);\r\n        this.index = 0; // integer within [0, 624]\r\n        this.uses = 0;\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with an initial int32 value\r\n     * @param initial the initial seed value\r\n     */\r\n    static seed(initial) {\r\n        return new MersenneTwister19937().seed(initial);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with zero or more int32 values\r\n     * @param source A series of int32 values\r\n     */\r\n    static seedWithArray(source) {\r\n        return new MersenneTwister19937().seedWithArray(source);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with the current time and\r\n     * a series of natively-generated random values\r\n     */\r\n    static autoSeed() {\r\n        return MersenneTwister19937.seedWithArray(createEntropy());\r\n    }\r\n    /**\r\n     * Returns the next int32 value of the sequence\r\n     */\r\n    next() {\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        const value = this.data[this.index];\r\n        this.index = (this.index + 1) | 0;\r\n        this.uses += 1;\r\n        return temper(value) | 0;\r\n    }\r\n    /**\r\n     * Returns the number of times that the Engine has been used.\r\n     *\r\n     * This can be provided to an unused MersenneTwister19937 with the same\r\n     * seed, bringing it to the exact point that was left off.\r\n     */\r\n    getUseCount() {\r\n        return this.uses;\r\n    }\r\n    /**\r\n     * Discards one or more items from the engine\r\n     * @param count The count of items to discard\r\n     */\r\n    discard(count) {\r\n        if (count <= 0) {\r\n            return this;\r\n        }\r\n        this.uses += count;\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        while (count + this.index > ARRAY_SIZE) {\r\n            count -= ARRAY_SIZE - this.index;\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        this.index = (this.index + count) | 0;\r\n        return this;\r\n    }\r\n    seed(initial) {\r\n        let previous = 0;\r\n        this.data[0] = previous = initial | 0;\r\n        for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\r\n            this.data[i] = previous =\r\n                (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\r\n        }\r\n        this.index = ARRAY_SIZE;\r\n        this.uses = 0;\r\n        return this;\r\n    }\r\n    seedWithArray(source) {\r\n        this.seed(0x012bd6aa);\r\n        seedWithArray(this.data, source);\r\n        return this;\r\n    }\r\n}\r\nfunction refreshData(data) {\r\n    let k = 0;\r\n    let tmp = 0;\r\n    for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] =\r\n            data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\r\n    data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n}\r\nfunction temper(value) {\r\n    value ^= value >>> 11;\r\n    value ^= (value << 7) & 0x9d2c5680;\r\n    value ^= (value << 15) & 0xefc60000;\r\n    return value ^ (value >>> 18);\r\n}\r\nfunction seedWithArray(data, source) {\r\n    let i = 1;\r\n    let j = 0;\r\n    const sourceLength = source.length;\r\n    let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\r\n    let previous = data[0] | 0;\r\n    for (; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\r\n                (source[j] | 0) +\r\n                (j | 0)) |\r\n                0;\r\n        i = (i + 1) | 0;\r\n        ++j;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n        if (j >= sourceLength) {\r\n            j = 0;\r\n        }\r\n    }\r\n    for (k = ARRAY_MAX; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\r\n        i = (i + 1) | 0;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n    }\r\n    data[0] = INT32_SIZE;\r\n}\n\nlet data$1 = null;\r\nconst COUNT$1 = 128;\r\nlet index$1 = COUNT$1;\r\n/**\r\n * An Engine that relies on the node-available\r\n * `require('crypto').randomBytes`, which has been available since 0.58.\r\n *\r\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\r\n *\r\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst nodeCrypto = {\r\n    next() {\r\n        if (index$1 >= COUNT$1) {\r\n            data$1 = new Int32Array(new Int8Array(require(\"crypto\").randomBytes(4 * COUNT$1)).buffer);\r\n            index$1 = 0;\r\n        }\r\n        return data$1[index$1++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns a Distribution to random value within the provided `source`\r\n * within the sliced bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction picker(source, begin, end) {\r\n    const clone = sliceArray.call(source, begin, end);\r\n    if (clone.length === 0) {\r\n        throw new RangeError(`Cannot pick from a source with no items`);\r\n    }\r\n    const distribution = integer(0, clone.length - 1);\r\n    return engine => clone[distribution(engine)];\r\n}\n\nexport { Random, browserCrypto, nativeMath, MersenneTwister19937, nodeCrypto, bool, date, dice, die, hex, int32, int53, int53Full, integer, pick, picker, real, realZeroToOneExclusive, realZeroToOneInclusive, sample, shuffle, string, uint32, uint53, uint53Full, uuid4, createEntropy };\n//# sourceMappingURL=random-js.esm.js.map\n","import * as Random from 'random-js';\nimport Matrix from 'ml-matrix';\n\nexport function checkFloat(n) {\n  return n > 0.0 && n <= 1.0;\n}\n\n/**\n * Select n with replacement elements on the training set and values, where n is the size of the training set.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {Array} trainingValue\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object} with new X and y.\n */\nexport function examplesBaggingWithReplacement(\n  trainingSet,\n  trainingValue,\n  seed,\n) {\n  let engine;\n  let distribution = Random.integer(0, trainingSet.rows - 1);\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`,\n    );\n  }\n\n  let Xr = new Array(trainingSet.rows);\n  let yr = new Array(trainingSet.rows);\n\n  for (let i = 0; i < trainingSet.rows; ++i) {\n    let index = distribution(engine);\n    Xr[i] = trainingSet.getRow(index);\n    yr[i] = trainingValue[index];\n  }\n\n  return {\n    X: new Matrix(Xr),\n    y: yr,\n  };\n}\n\n/**\n * selects n features from the training set with or without replacement, returns the new training set and the indexes used.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {number} n - features.\n * @param {boolean} replacement\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object}\n */\nexport function featureBagging(trainingSet, n, replacement, seed) {\n  if (trainingSet.columns < n) {\n    throw new RangeError(\n      'N should be less or equal to the number of columns of X',\n    );\n  }\n\n  let distribution = Random.integer(0, trainingSet.columns - 1);\n  let engine;\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`,\n    );\n  }\n\n  let toRet = new Matrix(trainingSet.rows, n);\n\n  let usedIndex;\n  let index;\n  if (replacement) {\n    usedIndex = new Array(n);\n    for (let i = 0; i < n; ++i) {\n      index = distribution(engine);\n      usedIndex[i] = index;\n      toRet.setColumn(i, trainingSet.getColumn(index));\n    }\n  } else {\n    usedIndex = new Set();\n    index = distribution(engine);\n    for (let i = 0; i < n; ++i) {\n      while (usedIndex.has(index)) {\n        index = distribution(engine);\n      }\n      toRet.setColumn(i, trainingSet.getColumn(index));\n      usedIndex.add(index);\n    }\n    usedIndex = Array.from(usedIndex);\n  }\n\n  return {\n    X: toRet,\n    usedIndex: usedIndex,\n  };\n}\n","import {\n  DecisionTreeClassifier as DTClassifier,\n  DecisionTreeRegression as DTRegression,\n} from 'ml-cart';\nimport {\n  Matrix,\n  WrapperMatrix2D,\n  MatrixTransposeView,\n  MatrixColumnSelectionView,\n} from 'ml-matrix';\n\nimport * as Utils from './utils';\n\n/**\n * @class RandomForestBase\n */\nexport class RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number|String} [options.maxFeatures] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement] - use replacement over the sample features.\n   * @param {number} [options.seed] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators] - number of estimator to use.\n   * @param {object} [options.treeOptions] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.isClassifier] - boolean to check if is a classifier or regression model (used by subclasses).\n   * @param {boolean} [options.useSampleBagging] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.replacement = model.replacement;\n      this.maxFeatures = model.maxFeatures;\n      this.nEstimators = model.nEstimators;\n      this.treeOptions = model.treeOptions;\n      this.isClassifier = model.isClassifier;\n      this.seed = model.seed;\n      this.n = model.n;\n      this.indexes = model.indexes;\n      this.useSampleBagging = model.useSampleBagging;\n\n      let Estimator = this.isClassifier ? DTClassifier : DTRegression;\n      this.estimators = model.estimators.map((est) => Estimator.load(est));\n    } else {\n      this.replacement = options.replacement;\n      this.maxFeatures = options.maxFeatures;\n      this.nEstimators = options.nEstimators;\n      this.treeOptions = options.treeOptions;\n      this.isClassifier = options.isClassifier;\n      this.seed = options.seed;\n      this.useSampleBagging = options.useSampleBagging;\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    this.maxFeatures = this.maxFeatures || trainingSet.columns;\n\n    if (Utils.checkFloat(this.maxFeatures)) {\n      this.n = Math.floor(trainingSet.columns * this.maxFeatures);\n    } else if (Number.isInteger(this.maxFeatures)) {\n      if (this.maxFeatures > trainingSet.columns) {\n        throw new RangeError(\n          `The maxFeatures parameter should be less than ${trainingSet.columns}`,\n        );\n      } else {\n        this.n = this.maxFeatures;\n      }\n    } else {\n      throw new RangeError(\n        `Cannot process the maxFeatures parameter ${this.maxFeatures}`,\n      );\n    }\n\n    let Estimator;\n    if (this.isClassifier) {\n      Estimator = DTClassifier;\n    } else {\n      Estimator = DTRegression;\n    }\n\n    this.estimators = new Array(this.nEstimators);\n    this.indexes = new Array(this.nEstimators);\n\n    for (let i = 0; i < this.nEstimators; ++i) {\n      let res = this.useSampleBagging\n        ? Utils.examplesBaggingWithReplacement(\n            trainingSet,\n            trainingValues,\n            this.seed,\n          )\n        : { X: trainingSet, y: trainingValues };\n      let X = res.X;\n      let y = res.y;\n\n      res = Utils.featureBagging(X, this.n, this.replacement, this.seed);\n      X = res.X;\n\n      this.indexes[i] = res.usedIndex;\n      this.estimators[i] = new Estimator(this.treeOptions);\n      this.estimators[i].train(X, y);\n    }\n  }\n\n  /**\n   * Method that returns the way the algorithm generates the predictions, for example, in classification\n   * you can return the mode of all predictions retrieved by the trees, or in case of regression you can\n   * use the mean or the median.\n   * @abstract\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction.\n   */\n  // eslint-disable-next-line no-unused-vars\n  selection(values) {\n    throw new Error(\"Abstract method 'selection' not implemented!\");\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    let predictionValues = new Array(this.nEstimators);\n    toPredict = Matrix.checkMatrix(toPredict);\n    for (let i = 0; i < this.nEstimators; ++i) {\n      let X = new MatrixColumnSelectionView(toPredict, this.indexes[i]); // get features for estimator\n      predictionValues[i] = this.estimators[i].predict(X);\n    }\n\n    predictionValues = new MatrixTransposeView(\n      new WrapperMatrix2D(predictionValues),\n    );\n    let predictions = new Array(predictionValues.rows);\n    for (let i = 0; i < predictionValues.rows; ++i) {\n      predictions[i] = this.selection(predictionValues.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      indexes: this.indexes,\n      n: this.n,\n      replacement: this.replacement,\n      maxFeatures: this.maxFeatures,\n      nEstimators: this.nEstimators,\n      treeOptions: this.treeOptions,\n      isClassifier: this.isClassifier,\n      seed: this.seed,\n      estimators: this.estimators.map((est) => est.toJSON()),\n      useSampleBagging: this.useSampleBagging,\n    };\n  }\n}\n","import { RandomForestBase } from './RandomForestBase';\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: true,\n  nEstimators: 10,\n  seed: 42,\n  useSampleBagging: false,\n};\n\n/**\n * @class RandomForestClassifier\n * @augments RandomForestBase\n */\nexport class RandomForestClassifier extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=10] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      options.isClassifier = true;\n      super(options);\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return mode(values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    let baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      name: 'RFClassifier',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'RFClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestClassifier(true, model);\n  }\n}\n\n/**\n * Return the most repeated element on the array.\n * @param {Array} arr\n * @return {number} mode\n */\nfunction mode(arr) {\n  return arr\n    .sort(\n      (a, b) =>\n        arr.filter((v) => v === a).length - arr.filter((v) => v === b).length,\n    )\n    .pop();\n}\n","(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n","import quickSelectMedian from 'median-quickselect';\nimport isArray from 'is-any-array';\n\n/**\n * Computes the median of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction median(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport default median;\n","import arrayMean from 'ml-array-mean';\nimport arrayMedian from 'ml-array-median';\n\nimport { RandomForestBase } from './RandomForestBase';\n\nconst selectionMethods = {\n  mean: arrayMean,\n  median: arrayMedian,\n};\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: false,\n  nEstimators: 10,\n  treeOptions: {},\n  selectionMethod: 'mean',\n  seed: 42,\n  useSampleBagging: false,\n};\n\n/**\n * @class RandomForestRegression\n * @augments RandomForestBase\n */\nexport class RandomForestRegression extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=10] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {string} [options.selectionMethod=\"mean\"] - the way to calculate the prediction from estimators, \"mean\" and \"median\" are supported.\n   * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n      this.selectionMethod = model.selectionMethod;\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n\n      if (\n        !(\n          options.selectionMethod === 'mean' ||\n          options.selectionMethod === 'median'\n        )\n      ) {\n        throw new RangeError(\n          `Unsupported selection method ${options.selectionMethod}`,\n        );\n      }\n\n      options.isClassifier = false;\n\n      super(options);\n      this.selectionMethod = options.selectionMethod;\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return selectionMethods[this.selectionMethod](values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    let baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      selectionMethod: this.selectionMethod,\n      name: 'RFRegression',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestRegression}\n   */\n  static load(model) {\n    if (model.name !== 'RFRegression') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestRegression(true, model);\n  }\n}\n","import { Matrix, MatrixTransposeView, EVD, SVD, NIPALS } from 'ml-matrix';\n\n/**\n * Creates new PCA (Principal Component Analysis) from the dataset\n * @param {Matrix} dataset - dataset or covariance matrix.\n * @param {Object} [options]\n * @param {boolean} [options.isCovarianceMatrix=false] - true if the dataset is a covariance matrix.\n * @param {string} [options.method='SVD'] - select which method to use: SVD (default), covarianceMatrirx or NIPALS.\n * @param {number} [options.nCompNIPALS=2] - number of components to be computed with NIPALS.\n * @param {boolean} [options.center=true] - should the data be centered (subtract the mean).\n * @param {boolean} [options.scale=false] - should the data be scaled (divide by the standard deviation).\n * @param {boolean} [options.ignoreZeroVariance=false] - ignore columns with zero variance if `scale` is `true`.\n * */\nexport class PCA {\n  constructor(dataset, options = {}) {\n    if (dataset === true) {\n      const model = options;\n      this.center = model.center;\n      this.scale = model.scale;\n      this.means = model.means;\n      this.stdevs = model.stdevs;\n      this.U = Matrix.checkMatrix(model.U);\n      this.S = model.S;\n      this.R = model.R;\n      this.excludedFeatures = model.excludedFeatures || [];\n      return;\n    }\n\n    dataset = new Matrix(dataset);\n\n    const {\n      isCovarianceMatrix = false,\n      method = 'SVD',\n      nCompNIPALS = 2,\n      center = true,\n      scale = false,\n      ignoreZeroVariance = false,\n    } = options;\n\n    this.center = center;\n    this.scale = scale;\n    this.means = null;\n    this.stdevs = null;\n    this.excludedFeatures = [];\n\n    if (isCovarianceMatrix) {\n      // User provided a covariance matrix instead of dataset.\n      this._computeFromCovarianceMatrix(dataset);\n      return;\n    }\n\n    this._adjust(dataset, ignoreZeroVariance);\n    switch (method) {\n      case 'covarianceMatrix': {\n        // User provided a dataset but wants us to compute and use the covariance matrix.\n        const covarianceMatrix = new MatrixTransposeView(dataset)\n          .mmul(dataset)\n          .div(dataset.rows - 1);\n        this._computeFromCovarianceMatrix(covarianceMatrix);\n        break;\n      }\n      case 'NIPALS': {\n        this._computeWithNIPALS(dataset, nCompNIPALS);\n        break;\n      }\n      case 'SVD': {\n        const svd = new SVD(dataset, {\n          computeLeftSingularVectors: false,\n          computeRightSingularVectors: true,\n          autoTranspose: true,\n        });\n\n        this.U = svd.rightSingularVectors;\n\n        const singularValues = svd.diagonal;\n        const eigenvalues = [];\n        for (const singularValue of singularValues) {\n          eigenvalues.push((singularValue * singularValue) / (dataset.rows - 1));\n        }\n        this.S = eigenvalues;\n        break;\n      }\n      default: {\n        throw new Error(`unknown method: ${method}`);\n      }\n    }\n  }\n\n  /**\n   * Load a PCA model from JSON\n   * @param {Object} model\n   * @return {PCA}\n   */\n  static load(model) {\n    if (typeof model.name !== 'string') {\n      throw new TypeError('model must have a name property');\n    }\n    if (model.name !== 'PCA') {\n      throw new RangeError(`invalid model: ${model.name}`);\n    }\n    return new PCA(true, model);\n  }\n\n  /**\n   * Project the dataset into the PCA space\n   * @param {Matrix} dataset\n   * @param {Object} options\n   * @return {Matrix} dataset projected in the PCA space\n   */\n  predict(dataset, options = {}) {\n    const { nComponents = this.U.columns } = options;\n    dataset = new Matrix(dataset);\n    if (this.center) {\n      dataset.subRowVector(this.means);\n      if (this.scale) {\n        for (let i of this.excludedFeatures) {\n          dataset.removeColumn(i);\n        }\n        dataset.divRowVector(this.stdevs);\n      }\n    }\n    var predictions = dataset.mmul(this.U);\n    return predictions.subMatrix(0, predictions.rows - 1, 0, nComponents - 1);\n  }\n\n  /**\n   * Calculates the inverse PCA transform\n   * @param {Matrix} dataset\n   * @return {Matrix} dataset projected in the PCA space\n   */\n  invert(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n\n    var inverse = dataset.mmul(this.U.transpose());\n\n    if (this.center) {\n      if (this.scale) {\n        inverse.mulRowVector(this.stdevs);\n      }\n      inverse.addRowVector(this.means);\n    }\n\n    return inverse;\n  }\n\n\n  /**\n   * Returns the proportion of variance for each component\n   * @return {[number]}\n   */\n  getExplainedVariance() {\n    var sum = 0;\n    for (const s of this.S) {\n      sum += s;\n    }\n    return this.S.map((value) => value / sum);\n  }\n\n  /**\n   * Returns the cumulative proportion of variance\n   * @return {[number]}\n   */\n  getCumulativeVariance() {\n    var explained = this.getExplainedVariance();\n    for (var i = 1; i < explained.length; i++) {\n      explained[i] += explained[i - 1];\n    }\n    return explained;\n  }\n\n  /**\n   * Returns the Eigenvectors of the covariance matrix\n   * @returns {Matrix}\n   */\n  getEigenvectors() {\n    return this.U;\n  }\n\n  /**\n   * Returns the Eigenvalues (on the diagonal)\n   * @returns {[number]}\n   */\n  getEigenvalues() {\n    return this.S;\n  }\n\n  /**\n   * Returns the standard deviations of the principal components\n   * @returns {[number]}\n   */\n  getStandardDeviations() {\n    return this.S.map((x) => Math.sqrt(x));\n  }\n\n  /**\n   * Returns the loadings matrix\n   * @return {Matrix}\n   */\n  getLoadings() {\n    return this.U.transpose();\n  }\n\n  /**\n   * Export the current model to a JSON object\n   * @return {Object} model\n   */\n  toJSON() {\n    return {\n      name: 'PCA',\n      center: this.center,\n      scale: this.scale,\n      means: this.means,\n      stdevs: this.stdevs,\n      U: this.U,\n      S: this.S,\n      excludedFeatures: this.excludedFeatures,\n    };\n  }\n\n  _adjust(dataset, ignoreZeroVariance) {\n    if (this.center) {\n      const mean = dataset.mean('column');\n      const stdevs = this.scale\n        ? dataset.standardDeviation('column', { mean })\n        : null;\n      this.means = mean;\n      dataset.subRowVector(mean);\n      if (this.scale) {\n        for (let i = 0; i < stdevs.length; i++) {\n          if (stdevs[i] === 0) {\n            if (ignoreZeroVariance) {\n              dataset.removeColumn(i);\n              stdevs.splice(i, 1);\n              this.excludedFeatures.push(i);\n              i--;\n            } else {\n              throw new RangeError(\n                `Cannot scale the dataset (standard deviation is zero at index ${i}`,\n              );\n            }\n          }\n        }\n        this.stdevs = stdevs;\n        dataset.divRowVector(stdevs);\n      }\n    }\n  }\n\n  _computeFromCovarianceMatrix(dataset) {\n    const evd = new EVD(dataset, { assumeSymmetric: true });\n    this.U = evd.eigenvectorMatrix;\n    this.U.flipRows();\n    this.S = evd.realEigenvalues;\n    this.S.reverse();\n  }\n\n  _computeWithNIPALS(dataset, nCompNIPALS) {\n    this.U = new Matrix(nCompNIPALS, dataset.columns);\n    this.S = [];\n\n    let x = dataset;\n    for (let i = 0; i < nCompNIPALS; i++) {\n      let dc = new NIPALS(x);\n\n      this.U.setRow(i, dc.w.transpose());\n      this.S.push(Math.pow(dc.s.get(0, 0), 2));\n\n      x = dc.xResidual;\n    }\n    this.U = this.U.transpose(); // to be compatible with API\n  }\n}\n","export function squaredEuclidean(p, q) {\r\n    let d = 0;\r\n    for (let i = 0; i < p.length; i++) {\r\n        d += (p[i] - q[i]) * (p[i] - q[i]);\r\n    }\r\n    return d;\r\n}\r\nexport function euclidean(p, q) {\r\n    return Math.sqrt(squaredEuclidean(p, q));\r\n}\r\n","/**\n * Computes a distance/similarity matrix given an array of data and a distance/similarity function.\n * @param {Array} data An array of data\n * @param {function} distanceFn  A function that accepts two arguments and computes a distance/similarity between them\n * @return {Array<Array>} The distance/similarity matrix. The matrix is square and has a size equal to the length of\n * the data array\n */\nexport default function distanceMatrix(data, distanceFn) {\n  const result = getMatrix(data.length);\n\n  // Compute upper distance matrix\n  for (let i = 0; i < data.length; i++) {\n    for (let j = 0; j <= i; j++) {\n      result[i][j] = distanceFn(data[i], data[j]);\n      result[j][i] = result[i][j];\n    }\n  }\n\n  return result;\n}\n\nfunction getMatrix(size) {\n  const matrix = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    matrix.push(row);\n    for (let j = 0; j < size; j++) {\n      row.push(0);\n    }\n  }\n  return matrix;\n}\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","import Heap from 'heap';\n\nexport default class Cluster {\n  constructor() {\n    this.children = [];\n    this.height = 0;\n    this.size = 1;\n    this.index = -1;\n    this.isLeaf = false;\n  }\n\n  /**\n   * Creates an array of clusters where the maximum height is smaller than the threshold\n   * @param {number} threshold\n   * @return {Array<Cluster>}\n   */\n  cut(threshold) {\n    if (typeof threshold !== 'number') {\n      throw new TypeError('threshold must be a number');\n    }\n    if (threshold < 0) {\n      throw new RangeError('threshold must be a positive number');\n    }\n    let list = [this];\n    const ans = [];\n    while (list.length > 0) {\n      const aux = list.shift();\n      if (threshold >= aux.height) {\n        ans.push(aux);\n      } else {\n        list = list.concat(aux.children);\n      }\n    }\n    return ans;\n  }\n\n  /**\n   * Merge the leaves in the minimum way to have `groups` number of clusters.\n   * @param {number} groups - Them number of children the first level of the tree should have.\n   * @return {Cluster}\n   */\n  group(groups) {\n    if (!Number.isInteger(groups) || groups < 1) {\n      throw new RangeError('groups must be a positive integer');\n    }\n\n    const heap = new Heap((a, b) => {\n      return b.height - a.height;\n    });\n\n    heap.push(this);\n\n    while (heap.size() < groups) {\n      var first = heap.pop();\n      if (first.children.length === 0) {\n        break;\n      }\n      first.children.forEach((child) => heap.push(child));\n    }\n\n    var root = new Cluster();\n    root.children = heap.toArray();\n    root.height = this.height;\n\n    return root;\n  }\n\n  /**\n   * Traverses the tree depth-first and calls the provided callback with each individual node\n   * @param {function} cb - The callback to be called on each node encounter\n   */\n  traverse(cb) {\n    function visit(root, callback) {\n      callback(root);\n      if (root.children) {\n        for (const child of root.children) {\n          visit(child, callback);\n        }\n      }\n    }\n    visit(this, cb);\n  }\n\n  /**\n   * Returns a list of indices for all the leaves of this cluster.\n   * The list is ordered in such a way that a dendrogram could be drawn without crossing branches.\n   * @returns {Array<number>}\n   */\n  indices() {\n    const result = [];\n    this.traverse((cluster) => {\n      if (cluster.isLeaf) {\n        result.push(cluster.index);\n      }\n    });\n    return result;\n  }\n}\n","import { euclidean } from 'ml-distance-euclidean';\nimport getDistanceMatrix from 'ml-distance-matrix';\nimport { Matrix } from 'ml-matrix';\n\nimport Cluster from './Cluster';\n\nfunction singleLink(dKI, dKJ) {\n  return Math.min(dKI, dKJ);\n}\n\nfunction completeLink(dKI, dKJ) {\n  return Math.max(dKI, dKJ);\n}\n\nfunction averageLink(dKI, dKJ, dIJ, ni, nj) {\n  const ai = ni / (ni + nj);\n  const aj = nj / (ni + nj);\n  return ai * dKI + aj * dKJ;\n}\n\nfunction weightedAverageLink(dKI, dKJ) {\n  return (dKI + dKJ) / 2;\n}\n\nfunction centroidLink(dKI, dKJ, dIJ, ni, nj) {\n  const ai = ni / (ni + nj);\n  const aj = nj / (ni + nj);\n  const b = -(ni * nj) / (ni + nj) ** 2;\n  return ai * dKI + aj * dKJ + b * dIJ;\n}\n\nfunction medianLink(dKI, dKJ, dIJ) {\n  return dKI / 2 + dKJ / 2 - dIJ / 4;\n}\n\nfunction wardLink(dKI, dKJ, dIJ, ni, nj, nk) {\n  const ai = (ni + nk) / (ni + nj + nk);\n  const aj = (nj + nk) / (ni + nj + nk);\n  const b = -nk / (ni + nj + nk);\n  return ai * dKI + aj * dKJ + b * dIJ;\n}\n\nfunction wardLink2(dKI, dKJ, dIJ, ni, nj, nk) {\n  const ai = (ni + nk) / (ni + nj + nk);\n  const aj = (nj + nk) / (ni + nj + nk);\n  const b = -nk / (ni + nj + nk);\n  return Math.sqrt(ai * dKI * dKI + aj * dKJ * dKJ + b * dIJ * dIJ);\n}\n\n/**\n * Continuously merge nodes that have the least dissimilarity\n * @param {Array<Array<number>>} data - Array of points to be clustered\n * @param {object} [options]\n * @param {Function} [options.distanceFunction]\n * @param {string} [options.method] - Default: `'complete'`\n * @param {boolean} [options.isDistanceMatrix] - Is the input already a distance matrix?\n * @constructor\n */\nexport function agnes(data, options = {}) {\n  const {\n    distanceFunction = euclidean,\n    method = 'complete',\n    isDistanceMatrix = false,\n  } = options;\n\n  let updateFunc;\n  if (!isDistanceMatrix) {\n    data = getDistanceMatrix(data, distanceFunction);\n  }\n  let distanceMatrix = new Matrix(data);\n  const numLeaves = distanceMatrix.rows;\n\n  // allows to use a string or a given function\n  if (typeof method === 'string') {\n    switch (method.toLowerCase()) {\n      case 'single':\n        updateFunc = singleLink;\n        break;\n      case 'complete':\n        updateFunc = completeLink;\n        break;\n      case 'average':\n      case 'upgma':\n        updateFunc = averageLink;\n        break;\n      case 'wpgma':\n        updateFunc = weightedAverageLink;\n        break;\n      case 'centroid':\n      case 'upgmc':\n        updateFunc = centroidLink;\n        break;\n      case 'median':\n      case 'wpgmc':\n        updateFunc = medianLink;\n        break;\n      case 'ward':\n        updateFunc = wardLink;\n        break;\n      case 'ward2':\n        updateFunc = wardLink2;\n        break;\n      default:\n        throw new RangeError(`unknown clustering method: ${method}`);\n    }\n  } else if (typeof method !== 'function') {\n    throw new TypeError('method must be a string or function');\n  }\n\n  let clusters = [];\n  for (let i = 0; i < numLeaves; i++) {\n    const cluster = new Cluster();\n    cluster.isLeaf = true;\n    cluster.index = i;\n    clusters.push(cluster);\n  }\n\n  for (let n = 0; n < numLeaves - 1; n++) {\n    const [row, column, distance] = getSmallestDistance(distanceMatrix);\n    const cluster1 = clusters[row];\n    const cluster2 = clusters[column];\n    const newCluster = new Cluster();\n    newCluster.size = cluster1.size + cluster2.size;\n    newCluster.children.push(cluster1, cluster2);\n    newCluster.height = distance;\n\n    const newClusters = [newCluster];\n    const newDistanceMatrix = new Matrix(\n      distanceMatrix.rows - 1,\n      distanceMatrix.rows - 1,\n    );\n    const previous = (newIndex) =>\n      getPreviousIndex(newIndex, Math.min(row, column), Math.max(row, column));\n\n    for (let i = 1; i < newDistanceMatrix.rows; i++) {\n      const prevI = previous(i);\n      const prevICluster = clusters[prevI];\n      newClusters.push(prevICluster);\n      for (let j = 0; j < i; j++) {\n        if (j === 0) {\n          const dKI = distanceMatrix.get(row, prevI);\n          const dKJ = distanceMatrix.get(prevI, column);\n          const val = updateFunc(\n            dKI,\n            dKJ,\n            distance,\n            cluster1.size,\n            cluster2.size,\n            prevICluster.size,\n          );\n          newDistanceMatrix.set(i, j, val);\n          newDistanceMatrix.set(j, i, val);\n        } else {\n          // Just copy distance from previous matrix\n          const val = distanceMatrix.get(prevI, previous(j));\n          newDistanceMatrix.set(i, j, val);\n          newDistanceMatrix.set(j, i, val);\n        }\n      }\n    }\n\n    clusters = newClusters;\n    distanceMatrix = newDistanceMatrix;\n  }\n\n  return clusters[0];\n}\n\nfunction getSmallestDistance(distance) {\n  let smallest = Infinity;\n  let smallestI = 0;\n  let smallestJ = 0;\n  for (let i = 1; i < distance.rows; i++) {\n    for (let j = 0; j < i; j++) {\n      if (distance.get(i, j) < smallest) {\n        smallest = distance.get(i, j);\n        smallestI = i;\n        smallestJ = j;\n      }\n    }\n  }\n  return [smallestI, smallestJ, smallest];\n}\n\nfunction getPreviousIndex(newIndex, prev1, prev2) {\n  newIndex -= 1;\n  if (newIndex >= prev1) newIndex++;\n  if (newIndex >= prev2) newIndex++;\n  return newIndex;\n}\n","'use strict';\nimport { squaredEuclidean } from 'ml-distance-euclidean';\nconst defaultOptions = {\n    distanceFunction: squaredEuclidean\n};\nexport default function nearestVector(listVectors, vector, options = defaultOptions) {\n    const distanceFunction = options.distanceFunction || defaultOptions.distanceFunction;\n    const similarityFunction = options.similarityFunction || defaultOptions.similarityFunction;\n    let vectorIndex = -1;\n    if (typeof similarityFunction === 'function') {\n        // maximum similarity\n        let maxSim = Number.MIN_VALUE;\n        for (let j = 0; j < listVectors.length; j++) {\n            const sim = similarityFunction(vector, listVectors[j]);\n            if (sim > maxSim) {\n                maxSim = sim;\n                vectorIndex = j;\n            }\n        }\n    }\n    else if (typeof distanceFunction === 'function') {\n        // minimum distance\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < listVectors.length; i++) {\n            const dist = distanceFunction(vector, listVectors[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                vectorIndex = i;\n            }\n        }\n    }\n    else {\n        throw new Error(\"A similarity or distance function it's required\");\n    }\n    return vectorIndex;\n}\nexport function findNearestVector(vectorList, vector, options = defaultOptions) {\n    const index = nearestVector(vectorList, vector, options);\n    return vectorList[index];\n}\n","import nearestVector from 'ml-nearest-vector';\n\n/**\n * Calculates the distance matrix for a given array of points\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {function} distance - Distance function to use between the points\n * @return {Array<Array<number>>} - matrix with the distance values\n */\nexport function calculateDistanceMatrix(data, distance) {\n  var distanceMatrix = new Array(data.length);\n  for (var i = 0; i < data.length; ++i) {\n    for (var j = i; j < data.length; ++j) {\n      if (!distanceMatrix[i]) {\n        distanceMatrix[i] = new Array(data.length);\n      }\n      if (!distanceMatrix[j]) {\n        distanceMatrix[j] = new Array(data.length);\n      }\n      const dist = distance(data[i], data[j]);\n      distanceMatrix[i][j] = dist;\n      distanceMatrix[j][i] = dist;\n    }\n  }\n  return distanceMatrix;\n}\n\n/**\n * Updates the cluster identifier based in the new data\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {function} distance - Distance function to use between the points\n * @return {Array} the cluster identifier for each data dot\n */\nexport function updateClusterID(data, centers, clusterID, distance) {\n  for (var i = 0; i < data.length; i++) {\n    clusterID[i] = nearestVector(centers, data[i], {\n      distanceFunction: distance\n    });\n  }\n  return clusterID;\n}\n\n/**\n * Update the center values based in the new configurations of the clusters\n * @ignore\n * @param {Array<Array<number>>} prevCenters - Centroids from the previous iteration\n * @param {Array <Array <number>>} data - the [x,y,z,...] points to cluster\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @return {Array} he K centers in format [x,y,z,...]\n */\nexport function updateCenters(prevCenters, data, clusterID, K) {\n  const nDim = data[0].length;\n\n  // copy previous centers\n  var centers = new Array(K);\n  var centersLen = new Array(K);\n  for (var i = 0; i < K; i++) {\n    centers[i] = new Array(nDim);\n    centersLen[i] = 0;\n    for (var j = 0; j < nDim; j++) {\n      centers[i][j] = 0;\n    }\n  }\n\n  // add the value for all dimensions of the point\n  for (var l = 0; l < data.length; l++) {\n    centersLen[clusterID[l]]++;\n    for (var dim = 0; dim < nDim; dim++) {\n      centers[clusterID[l]][dim] += data[l][dim];\n    }\n  }\n\n  // divides by length\n  for (var id = 0; id < K; id++) {\n    for (var d = 0; d < nDim; d++) {\n      if (centersLen[id]) {\n        centers[id][d] /= centersLen[id];\n      } else {\n        centers[id][d] = prevCenters[id][d];\n      }\n    }\n  }\n  return centers;\n}\n\n/**\n * The centers have moved more than the tolerance value?\n * @ignore\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} oldCenters - the K old centers in format [x,y,z,...]\n * @param {function} distanceFunction - Distance function to use between the points\n * @param {number} tolerance - Allowed distance for the centroids to move\n * @return {boolean}\n */\nexport function hasConverged(centers, oldCenters, distanceFunction, tolerance) {\n  for (var i = 0; i < centers.length; i++) {\n    if (distanceFunction(centers[i], oldCenters[i]) > tolerance) {\n      return false;\n    }\n  }\n  return true;\n}\n","const LOOP = 8;\nconst FLOAT_MUL = 1 / 16777216;\nconst sh1 = 15;\nconst sh2 = 18;\nconst sh3 = 11;\nfunction multiply_uint32(n, m) {\n    n >>>= 0;\n    m >>>= 0;\n    const nlo = n & 0xffff;\n    const nhi = n - nlo;\n    return (((nhi * m) >>> 0) + nlo * m) >>> 0;\n}\nexport default class XSadd {\n    constructor(seed = Date.now()) {\n        this.state = new Uint32Array(4);\n        this.init(seed);\n        this.random = this.getFloat.bind(this);\n    }\n    /**\n     * Returns a 32-bit integer r (0 <= r < 2^32)\n     */\n    getUint32() {\n        this.nextState();\n        return (this.state[3] + this.state[2]) >>> 0;\n    }\n    /**\n     * Returns a floating point number r (0.0 <= r < 1.0)\n     */\n    getFloat() {\n        return (this.getUint32() >>> 8) * FLOAT_MUL;\n    }\n    init(seed) {\n        if (!Number.isInteger(seed)) {\n            throw new TypeError('seed must be an integer');\n        }\n        this.state[0] = seed;\n        this.state[1] = 0;\n        this.state[2] = 0;\n        this.state[3] = 0;\n        for (let i = 1; i < LOOP; i++) {\n            this.state[i & 3] ^=\n                (i +\n                    multiply_uint32(1812433253, this.state[(i - 1) & 3] ^ ((this.state[(i - 1) & 3] >>> 30) >>> 0))) >>>\n                    0;\n        }\n        this.periodCertification();\n        for (let i = 0; i < LOOP; i++) {\n            this.nextState();\n        }\n    }\n    periodCertification() {\n        if (this.state[0] === 0 &&\n            this.state[1] === 0 &&\n            this.state[2] === 0 &&\n            this.state[3] === 0) {\n            this.state[0] = 88; // X\n            this.state[1] = 83; // S\n            this.state[2] = 65; // A\n            this.state[3] = 68; // D\n        }\n    }\n    nextState() {\n        let t = this.state[0];\n        t ^= t << sh1;\n        t ^= t >>> sh2;\n        t ^= this.state[3] << sh3;\n        this.state[0] = this.state[1];\n        this.state[1] = this.state[2];\n        this.state[2] = this.state[3];\n        this.state[3] = t;\n    }\n}\n","const PROB_TOLERANCE = 0.00000001;\nfunction randomChoice(values, options = {}, random = Math.random) {\n    const { size = 1, replace = false, probabilities } = options;\n    let valuesArr;\n    let cumSum;\n    if (typeof values === 'number') {\n        valuesArr = getArray(values);\n    }\n    else {\n        valuesArr = values.slice();\n    }\n    if (probabilities) {\n        if (!replace) {\n            throw new Error('choice with probabilities and no replacement is not implemented');\n        }\n        // check input is sane\n        if (probabilities.length !== valuesArr.length) {\n            throw new Error('the length of probabilities option should be equal to the number of choices');\n        }\n        cumSum = [probabilities[0]];\n        for (let i = 1; i < probabilities.length; i++) {\n            cumSum[i] = cumSum[i - 1] + probabilities[i];\n        }\n        if (Math.abs(1 - cumSum[cumSum.length - 1]) > PROB_TOLERANCE) {\n            throw new Error(`probabilities should sum to 1, but instead sums to ${cumSum[cumSum.length - 1]}`);\n        }\n    }\n    if (replace === false && size > valuesArr.length) {\n        throw new Error('size option is too large');\n    }\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        const index = randomIndex(valuesArr.length, random, cumSum);\n        result.push(valuesArr[index]);\n        if (!replace) {\n            valuesArr.splice(index, 1);\n        }\n    }\n    return result;\n}\nfunction getArray(n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\nfunction randomIndex(n, random, cumSum) {\n    const rand = random();\n    if (!cumSum) {\n        return Math.floor(rand * n);\n    }\n    else {\n        let idx = 0;\n        while (rand > cumSum[idx]) {\n            idx++;\n        }\n        return idx;\n    }\n}\nexport default randomChoice;\n","// tslint:disable-next-line\nimport XSAdd from 'ml-xsadd';\nimport choice from './choice';\n/**\n * @classdesc Random class\n */\nexport default class Random {\n    /**\n     * @param [seedOrRandom=Math.random] - Control the random number generator used by the Random class instance. Pass a random number generator function with a uniform distribution over the half-open interval [0, 1[. If seed will pass it to ml-xsadd to create a seeded random number generator. If undefined will use Math.random.\n     */\n    constructor(seedOrRandom = Math.random) {\n        if (typeof seedOrRandom === 'number') {\n            const xsadd = new XSAdd(seedOrRandom);\n            this.randomGenerator = xsadd.random;\n        }\n        else {\n            this.randomGenerator = seedOrRandom;\n        }\n    }\n    choice(values, options) {\n        if (typeof values === 'number') {\n            return choice(values, options, this.randomGenerator);\n        }\n        return choice(values, options, this.randomGenerator);\n    }\n    /**\n     * Draw a random number from a uniform distribution on [0,1)\n     * @return The random number\n     */\n    random() {\n        return this.randomGenerator();\n    }\n    /**\n     * Draw a random integer from a uniform distribution on [low, high). If only low is specified, the number is drawn on [0, low)\n     * @param low - The lower bound of the uniform distribution interval.\n     * @param high - The higher bound of the uniform distribution interval.\n     */\n    randInt(low, high) {\n        if (high === undefined) {\n            high = low;\n            low = 0;\n        }\n        return low + Math.floor(this.randomGenerator() * (high - low));\n    }\n    /**\n     * Draw several random number from a uniform distribution on [0, 1)\n     * @param size - The number of number to draw\n     * @return - The list of drawn numbers.\n     */\n    randomSample(size) {\n        const result = [];\n        for (let i = 0; i < size; i++) {\n            result.push(this.random());\n        }\n        return result;\n    }\n}\n","import Random from 'ml-random';\nimport { squaredEuclidean } from 'ml-distance-euclidean';\nimport { Matrix } from 'ml-matrix';\n\n/**\n * Choose K different random points from the original data\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function random(data, K, seed) {\n  const random = new Random(seed);\n  return random.choice(data, { size: K });\n}\n\n/**\n * Chooses the most distant points to a first random pick\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {Array<Array<number>>} distanceMatrix - matrix with the distance values\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function mostDistant(data, K, distanceMatrix, seed) {\n  const random = new Random(seed);\n  var ans = new Array(K);\n  // chooses a random point as initial cluster\n  ans[0] = Math.floor(random.random() * data.length);\n\n  if (K > 1) {\n    // chooses the more distant point\n    var maxDist = { dist: -1, index: -1 };\n    for (var l = 0; l < data.length; ++l) {\n      if (distanceMatrix[ans[0]][l] > maxDist.dist) {\n        maxDist.dist = distanceMatrix[ans[0]][l];\n        maxDist.index = l;\n      }\n    }\n    ans[1] = maxDist.index;\n\n    if (K > 2) {\n      // chooses the set of points that maximises the min distance\n      for (var k = 2; k < K; ++k) {\n        var center = { dist: -1, index: -1 };\n        for (var m = 0; m < data.length; ++m) {\n          // minimum distance to centers\n          var minDistCent = { dist: Number.MAX_VALUE, index: -1 };\n          for (var n = 0; n < k; ++n) {\n            if (\n              distanceMatrix[n][m] < minDistCent.dist &&\n              ans.indexOf(m) === -1\n            ) {\n              minDistCent = {\n                dist: distanceMatrix[n][m],\n                index: m\n              };\n            }\n          }\n\n          if (\n            minDistCent.dist !== Number.MAX_VALUE &&\n            minDistCent.dist > center.dist\n          ) {\n            center = Object.assign({}, minDistCent);\n          }\n        }\n\n        ans[k] = center.index;\n      }\n    }\n  }\n\n  return ans.map((index) => data[index]);\n}\n\n// Implementation inspired from scikit\nexport function kmeanspp(X, K, options = {}) {\n  X = new Matrix(X);\n  const nSamples = X.rows;\n  const random = new Random(options.seed);\n  // Set the number of trials\n  const centers = [];\n  const localTrials = options.localTrials || 2 + Math.floor(Math.log(K));\n\n  // Pick the first center at random from the dataset\n  const firstCenterIdx = random.randInt(nSamples);\n  centers.push(X.getRow(firstCenterIdx));\n\n  // Init closest distances\n  let closestDistSquared = new Matrix(1, X.rows);\n  for (let i = 0; i < X.rows; i++) {\n    closestDistSquared.set(0, i, squaredEuclidean(X.getRow(i), centers[0]));\n  }\n  let cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n  const factor = 1 / cumSumClosestDistSquared[0][nSamples - 1];\n  let probabilities = Matrix.mul(closestDistSquared, factor);\n\n  // Iterate over the remaining centers\n  for (let i = 1; i < K; i++) {\n    const candidateIdx = random.choice(nSamples, {\n      replace: true,\n      size: localTrials,\n      probabilities: probabilities[0]\n    });\n\n    const candidates = X.selection(candidateIdx, range(X.columns));\n    const distanceToCandidates = euclideanDistances(candidates, X);\n\n    let bestCandidate;\n    let bestPot;\n    let bestDistSquared;\n\n    for (let j = 0; j < localTrials; j++) {\n      const newDistSquared = Matrix.min(closestDistSquared, [distanceToCandidates.getRow(j)]);\n      const newPot = newDistSquared.sum();\n      if (bestCandidate === undefined || newPot < bestPot) {\n        bestCandidate = candidateIdx[j];\n        bestPot = newPot;\n        bestDistSquared = newDistSquared;\n      }\n    }\n    centers[i] = X.getRow(bestCandidate);\n    closestDistSquared = bestDistSquared;\n    cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n    probabilities = Matrix.mul(\n      closestDistSquared,\n      1 / cumSumClosestDistSquared[0][nSamples - 1]\n    );\n  }\n  return centers;\n}\n\nfunction euclideanDistances(A, B) {\n  const result = new Matrix(A.rows, B.rows);\n  for (let i = 0; i < A.rows; i++) {\n    for (let j = 0; j < B.rows; j++) {\n      result.set(i, j, squaredEuclidean(A.getRow(i), B.getRow(j)));\n    }\n  }\n  return result;\n}\n\nfunction range(l) {\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    r.push(i);\n  }\n  return r;\n}\n\nfunction cumSum(arr) {\n  let cumSum = [arr[0]];\n  for (let i = 1; i < arr.length; i++) {\n    cumSum[i] = cumSum[i - 1] + arr[i];\n  }\n  return cumSum;\n}\n","import { updateClusterID } from './utils';\n\nconst distanceSymbol = Symbol('distance');\n\nexport default class KMeansResult {\n  /**\n   * Result of the kmeans algorithm\n   * @param {Array<number>} clusters - the cluster identifier for each data dot\n   * @param {Array<Array<object>>} centroids - the K centers in format [x,y,z,...], the error and size of the cluster\n   * @param {boolean} converged - Converge criteria satisfied\n   * @param {number} iterations - Current number of iterations\n   * @param {function} distance - (*Private*) Distance function to use between the points\n   * @constructor\n   */\n  constructor(clusters, centroids, converged, iterations, distance) {\n    this.clusters = clusters;\n    this.centroids = centroids;\n    this.converged = converged;\n    this.iterations = iterations;\n    this[distanceSymbol] = distance;\n  }\n\n  /**\n   * Allows to compute for a new array of points their cluster id\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {Array<number>} - cluster id for each point\n   */\n  nearest(data) {\n    const clusterID = new Array(data.length);\n    const centroids = this.centroids.map(function (centroid) {\n      return centroid.centroid;\n    });\n    return updateClusterID(data, centroids, clusterID, this[distanceSymbol]);\n  }\n\n  /**\n   * Returns a KMeansResult with the error and size of the cluster\n   * @ignore\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {KMeansResult}\n   */\n  computeInformation(data) {\n    var enrichedCentroids = this.centroids.map(function (centroid) {\n      return {\n        centroid: centroid,\n        error: 0,\n        size: 0\n      };\n    });\n\n    for (var i = 0; i < data.length; i++) {\n      enrichedCentroids[this.clusters[i]].error += this[distanceSymbol](\n        data[i],\n        this.centroids[this.clusters[i]]\n      );\n      enrichedCentroids[this.clusters[i]].size++;\n    }\n\n    for (var j = 0; j < this.centroids.length; j++) {\n      if (enrichedCentroids[j].size) {\n        enrichedCentroids[j].error /= enrichedCentroids[j].size;\n      } else {\n        enrichedCentroids[j].error = null;\n      }\n    }\n\n    return new KMeansResult(\n      this.clusters,\n      enrichedCentroids,\n      this.converged,\n      this.iterations,\n      this[distanceSymbol]\n    );\n  }\n}\n","import { squaredEuclidean } from 'ml-distance-euclidean';\n\nimport {\n  updateClusterID,\n  updateCenters,\n  hasConverged,\n  calculateDistanceMatrix\n} from './utils';\nimport { mostDistant, random, kmeanspp } from './initialization';\nimport KMeansResult from './KMeansResult';\n\nconst defaultOptions = {\n  maxIterations: 100,\n  tolerance: 1e-6,\n  withIterations: false,\n  initialization: 'kmeans++',\n  distanceFunction: squaredEuclidean\n};\n\n/**\n * Each step operation for kmeans\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} iterations - Current number of iterations\n * @return {KMeansResult}\n */\nfunction step(centers, data, clusterID, K, options, iterations) {\n  clusterID = updateClusterID(\n    data,\n    centers,\n    clusterID,\n    options.distanceFunction\n  );\n  var newCenters = updateCenters(centers, data, clusterID, K);\n  var converged = hasConverged(\n    newCenters,\n    centers,\n    options.distanceFunction,\n    options.tolerance\n  );\n  return new KMeansResult(\n    clusterID,\n    newCenters,\n    converged,\n    iterations,\n    options.distanceFunction\n  );\n}\n\n/**\n * Generator version for the algorithm\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n */\nfunction* kmeansGenerator(centers, data, clusterID, K, options) {\n  var converged = false;\n  var stepNumber = 0;\n  var stepResult;\n  while (!converged && stepNumber < options.maxIterations) {\n    stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n    yield stepResult.computeInformation(data);\n    converged = stepResult.converged;\n    centers = stepResult.centroids;\n  }\n}\n\n/**\n * K-means algorithm\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} [options.maxIterations = 100] - Maximum of iterations allowed\n * @param {number} [options.tolerance = 1e-6] - Error tolerance\n * @param {boolean} [options.withIterations = false] - Store clusters and centroids for each iteration\n * @param {function} [options.distanceFunction = squaredDistance] - Distance function to use between the points\n * @param {number} [options.seed] - Seed for random initialization.\n * @param {string|Array<Array<number>>} [options.initialization = 'kmeans++'] - K centers in format [x,y,z,...] or a method for initialize the data:\n *  * You can either specify your custom start centroids, or select one of the following initialization method:\n *  * `'kmeans++'` will use the kmeans++ method as described by http://ilpubs.stanford.edu:8090/778/1/2006-13.pdf\n *  * `'random'` will choose K random different values.\n *  * `'mostDistant'` will choose the more distant points to a first random pick\n * @return {KMeansResult} - Cluster identifier for each data dot and centroids with the following fields:\n *  * `'clusters'`: Array of indexes for the clusters.\n *  * `'centroids'`: Array with the resulting centroids.\n *  * `'iterations'`: Number of iterations that took to converge\n */\nexport default function kmeans(data, K, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  if (K <= 0 || K > data.length || !Number.isInteger(K)) {\n    throw new Error(\n      'K should be a positive integer smaller than the number of points'\n    );\n  }\n\n  var centers;\n  if (Array.isArray(options.initialization)) {\n    if (options.initialization.length !== K) {\n      throw new Error('The initial centers should have the same length as K');\n    } else {\n      centers = options.initialization;\n    }\n  } else {\n    switch (options.initialization) {\n      case 'kmeans++':\n        centers = kmeanspp(data, K, options);\n        break;\n      case 'random':\n        centers = random(data, K, options.seed);\n        break;\n      case 'mostDistant':\n        centers = mostDistant(\n          data,\n          K,\n          calculateDistanceMatrix(data, options.distanceFunction),\n          options.seed\n        );\n        break;\n      default:\n        throw new Error(\n          `Unknown initialization method: \"${options.initialization}\"`\n        );\n    }\n  }\n\n  // infinite loop until convergence\n  if (options.maxIterations === 0) {\n    options.maxIterations = Number.MAX_VALUE;\n  }\n\n  var clusterID = new Array(data.length);\n  if (options.withIterations) {\n    return kmeansGenerator(centers, data, clusterID, K, options);\n  } else {\n    var converged = false;\n    var stepNumber = 0;\n    var stepResult;\n    while (!converged && stepNumber < options.maxIterations) {\n      stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n      converged = stepResult.converged;\n      centers = stepResult.centroids;\n    }\n    return stepResult.computeInformation(data);\n  }\n}\n","import Matrix from 'ml-matrix';\n\n/**\n * @private\n * Function that retuns an array of matrices of the cases that belong to each class.\n * @param {Matrix} X - dataset\n * @param {Array} y - predictions\n * @return {Array}\n */\nexport function separateClasses(X, y) {\n  var features = X.columns;\n\n  var classes = 0;\n  var totalPerClasses = new Array(10000); // max upperbound of classes\n  for (var i = 0; i < y.length; i++) {\n    if (totalPerClasses[y[i]] === undefined) {\n      totalPerClasses[y[i]] = 0;\n      classes++;\n    }\n    totalPerClasses[y[i]]++;\n  }\n  var separatedClasses = new Array(classes);\n  var currentIndex = new Array(classes);\n  for (i = 0; i < classes; ++i) {\n    separatedClasses[i] = new Matrix(totalPerClasses[i], features);\n    currentIndex[i] = 0;\n  }\n  for (i = 0; i < X.rows; ++i) {\n    separatedClasses[y[i]].setRow(currentIndex[y[i]], X.getRow(i));\n    currentIndex[y[i]]++;\n  }\n  return separatedClasses;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { separateClasses } from './utils';\n\nexport class GaussianNB {\n  /**\n   * Constructor for the Gaussian Naive Bayes classifier, the parameters here is just for loading purposes.\n   * @constructor\n   * @param {boolean} reload\n   * @param {object} model\n   */\n  constructor(reload, model) {\n    if (reload) {\n      this.means = model.means;\n      this.calculateProbabilities = model.calculateProbabilities;\n    }\n  }\n\n  /**\n   * Function that trains the classifier with a matrix that represents the training set and an array that\n   * represents the label of each row in the training set. the labels must be numbers between 0 to n-1 where\n   * n represents the number of classes.\n   *\n   * WARNING: in the case that one class, all the cases in one or more features have the same value, the\n   * Naive Bayes classifier will not work well.\n   * @param {Matrix|Array} trainingSet\n   * @param {Matrix|Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    var C1 = Math.sqrt(2 * Math.PI); // constant to precalculate the squared root\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    if (trainingSet.rows !== trainingLabels.length) {\n      throw new RangeError(\n        'the size of the training set and the training labels must be the same.'\n      );\n    }\n\n    var separatedClasses = separateClasses(trainingSet, trainingLabels);\n    var calculateProbabilities = new Array(separatedClasses.length);\n    this.means = new Array(separatedClasses.length);\n    for (var i = 0; i < separatedClasses.length; ++i) {\n      var means = separatedClasses[i].mean('column');\n      var std = separatedClasses[i].standardDeviation('column', {\n        mean: means\n      });\n\n      var logPriorProbability = Math.log(\n        separatedClasses[i].rows / trainingSet.rows\n      );\n      calculateProbabilities[i] = new Array(means.length + 1);\n\n      calculateProbabilities[i][0] = logPriorProbability;\n      for (var j = 1; j < means.length + 1; ++j) {\n        var currentStd = std[j - 1];\n        calculateProbabilities[i][j] = [\n          1 / (C1 * currentStd),\n          -2 * currentStd * currentStd\n        ];\n      }\n\n      this.means[i] = means;\n    }\n\n    this.calculateProbabilities = calculateProbabilities;\n  }\n\n  /**\n   * function that predicts each row of the dataset (must be a matrix).\n   *\n   * @param {Matrix|Array} dataset\n   * @return {Array}\n   */\n  predict(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n    if (dataset.rows === this.calculateProbabilities[0].length) {\n      throw new RangeError(\n        'the dataset must have the same features as the training set'\n      );\n    }\n\n    var predictions = new Array(dataset.rows);\n\n    for (var i = 0; i < predictions.length; ++i) {\n      predictions[i] = getCurrentClass(\n        dataset.getRow(i),\n        this.means,\n        this.calculateProbabilities\n      );\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Function that export the NaiveBayes model.\n   * @return {object}\n   */\n  toJSON() {\n    return {\n      modelName: 'NaiveBayes',\n      means: this.means,\n      calculateProbabilities: this.calculateProbabilities\n    };\n  }\n\n  /**\n   * Function that create a GaussianNB classifier with the given model.\n   * @param {object} model\n   * @return {GaussianNB}\n   */\n  static load(model) {\n    if (model.modelName !== 'NaiveBayes') {\n      throw new RangeError(\n        'The current model is not a Multinomial Naive Bayes, current model:',\n        model.name\n      );\n    }\n\n    return new GaussianNB(true, model);\n  }\n}\n\n/**\n * @private\n * Function the retrieves a prediction with one case.\n *\n * @param {Array} currentCase\n * @param {Array} mean - Precalculated means of each class trained\n * @param {Array} classes - Precalculated value of each class (Prior probability and probability function of each feature)\n * @return {number}\n */\nfunction getCurrentClass(currentCase, mean, classes) {\n  var maxProbability = 0;\n  var predictedClass = -1;\n\n  // going through all precalculated values for the classes\n  for (var i = 0; i < classes.length; ++i) {\n    var currentProbability = classes[i][0]; // initialize with the prior probability\n    for (var j = 1; j < classes[0][1].length + 1; ++j) {\n      currentProbability += calculateLogProbability(\n        currentCase[j - 1],\n        mean[i][j - 1],\n        classes[i][j][0],\n        classes[i][j][1]\n      );\n    }\n\n    currentProbability = Math.exp(currentProbability);\n    if (currentProbability > maxProbability) {\n      maxProbability = currentProbability;\n      predictedClass = i;\n    }\n  }\n\n  return predictedClass;\n}\n\n/**\n * @private\n * function that retrieves the probability of the feature given the class.\n * @param {number} value - value of the feature.\n * @param {number} mean - mean of the feature for the given class.\n * @param {number} C1 - precalculated value of (1 / (sqrt(2*pi) * std)).\n * @param {number} C2 - precalculated value of (2 * std^2) for the denominator of the exponential.\n * @return {number}\n */\nfunction calculateLogProbability(value, mean, C1, C2) {\n  value = value - mean;\n  return Math.log(C1 * Math.exp((value * value) / C2));\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { separateClasses } from './utils';\n\nexport class MultinomialNB {\n  /**\n   * Constructor for Multinomial Naive Bayes, the model parameter is for load purposes.\n   * @constructor\n   * @param {object} model - for load purposes.\n   */\n  constructor(model) {\n    if (model) {\n      this.conditionalProbability = Matrix.checkMatrix(\n        model.conditionalProbability\n      );\n      this.priorProbability = Matrix.checkMatrix(model.priorProbability);\n    }\n  }\n\n  /**\n   * Train the classifier with the current training set and labels, the labels must be numbers between 0 and n.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    if (trainingSet.rows !== trainingLabels.length) {\n      throw new RangeError(\n        'the size of the training set and the training labels must be the same.'\n      );\n    }\n\n    var separateClass = separateClasses(trainingSet, trainingLabels);\n\n    this.priorProbability = new Matrix(separateClass.length, 1);\n\n    for (var i = 0; i < separateClass.length; ++i) {\n      this.priorProbability.set(i, 0, Math.log(\n        separateClass[i].rows / trainingSet.rows\n      ));\n    }\n\n    var features = trainingSet.columns;\n    this.conditionalProbability = new Matrix(separateClass.length, features);\n    for (i = 0; i < separateClass.length; ++i) {\n      var classValues = Matrix.checkMatrix(separateClass[i]);\n      var total = classValues.sum();\n      var divisor = total + features;\n      this.conditionalProbability.setRow(\n        i,\n        Matrix.rowVector(classValues\n          .sum('column'))\n          .add(1)\n          .div(divisor)\n          .apply(matrixLog)\n      );\n    }\n  }\n\n  /**\n   * Retrieves the predictions for the dataset with the current model.\n   * @param {Matrix|Array} dataset\n   * @return {Array} - predictions from the dataset.\n   */\n  predict(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n    var predictions = new Array(dataset.rows);\n    for (var i = 0; i < dataset.rows; ++i) {\n      var currentElement = dataset.getRowVector(i);\n      const v = Matrix.columnVector(this.conditionalProbability\n        .clone()\n        .mulRowVector(currentElement)\n        .sum('row'));\n      predictions[i] = v\n        .add(this.priorProbability)\n        .maxIndex()[0];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Function that saves the current model.\n   * @return {object} - model in JSON format.\n   */\n  toJSON() {\n    return {\n      name: 'MultinomialNB',\n      priorProbability: this.priorProbability,\n      conditionalProbability: this.conditionalProbability\n    };\n  }\n\n  /**\n   * Creates a new MultinomialNB from the given model\n   * @param {object} model\n   * @return {MultinomialNB}\n   */\n  static load(model) {\n    if (model.name !== 'MultinomialNB') {\n      throw new RangeError(`${model.name} is not a Multinomial Naive Bayes`);\n    }\n\n    return new MultinomialNB(model);\n  }\n}\n\nfunction matrixLog(i, j) {\n  this.set(i, j, Math.log(this.get(i, j)));\n}\n","/*\n * Original code from:\n *\n * k-d Tree JavaScript - V 1.01\n *\n * https://github.com/ubilabs/kd-tree-javascript\n *\n * @author Mircea Pricop <pricop@ubilabs.net>, 2012\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n * @author Ubilabs http://ubilabs.net, 2012\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n */\n\nfunction Node(obj, dimension, parent) {\n  this.obj = obj;\n  this.left = null;\n  this.right = null;\n  this.parent = parent;\n  this.dimension = dimension;\n}\n\nexport default class KDTree {\n  constructor(points, metric) {\n    // If points is not an array, assume we're loading a pre-built tree\n    if (!Array.isArray(points)) {\n      this.dimensions = points.dimensions;\n      this.root = points;\n      restoreParent(this.root);\n    } else {\n      this.dimensions = new Array(points[0].length);\n      for (var i = 0; i < this.dimensions.length; i++) {\n        this.dimensions[i] = i;\n      }\n      this.root = buildTree(points, 0, null, this.dimensions);\n    }\n    this.metric = metric;\n  }\n\n  // Convert to a JSON serializable structure; this just requires removing\n  // the `parent` property\n  toJSON() {\n    const result = toJSONImpl(this.root, true);\n    result.dimensions = this.dimensions;\n    return result;\n  }\n\n  nearest(point, maxNodes, maxDistance) {\n    const metric = this.metric;\n    const dimensions = this.dimensions;\n    var i;\n\n    const bestNodes = new BinaryHeap(function (e) {\n      return -e[1];\n    });\n\n    function nearestSearch(node) {\n      const dimension = dimensions[node.dimension];\n      const ownDistance = metric(point, node.obj);\n      const linearPoint = {};\n      var bestChild, linearDistance, otherChild, i;\n\n      function saveNode(node, distance) {\n        bestNodes.push([node, distance]);\n        if (bestNodes.size() > maxNodes) {\n          bestNodes.pop();\n        }\n      }\n\n      for (i = 0; i < dimensions.length; i += 1) {\n        if (i === node.dimension) {\n          linearPoint[dimensions[i]] = point[dimensions[i]];\n        } else {\n          linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n        }\n      }\n\n      linearDistance = metric(linearPoint, node.obj);\n\n      if (node.right === null && node.left === null) {\n        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n          saveNode(node, ownDistance);\n        }\n        return;\n      }\n\n      if (node.right === null) {\n        bestChild = node.left;\n      } else if (node.left === null) {\n        bestChild = node.right;\n      } else {\n        if (point[dimension] < node.obj[dimension]) {\n          bestChild = node.left;\n        } else {\n          bestChild = node.right;\n        }\n      }\n\n      nearestSearch(bestChild);\n\n      if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n        saveNode(node, ownDistance);\n      }\n\n      if (\n        bestNodes.size() < maxNodes ||\n        Math.abs(linearDistance) < bestNodes.peek()[1]\n      ) {\n        if (bestChild === node.left) {\n          otherChild = node.right;\n        } else {\n          otherChild = node.left;\n        }\n        if (otherChild !== null) {\n          nearestSearch(otherChild);\n        }\n      }\n    }\n\n    if (maxDistance) {\n      for (i = 0; i < maxNodes; i += 1) {\n        bestNodes.push([null, maxDistance]);\n      }\n    }\n\n    if (this.root) {\n      nearestSearch(this.root);\n    }\n\n    const result = [];\n    for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n      if (bestNodes.content[i][0]) {\n        result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n      }\n    }\n    return result;\n  }\n}\n\nfunction toJSONImpl(src) {\n  const dest = new Node(src.obj, src.dimension, null);\n  if (src.left) dest.left = toJSONImpl(src.left);\n  if (src.right) dest.right = toJSONImpl(src.right);\n  return dest;\n}\n\nfunction buildTree(points, depth, parent, dimensions) {\n  const dim = depth % dimensions.length;\n\n  if (points.length === 0) {\n    return null;\n  }\n  if (points.length === 1) {\n    return new Node(points[0], dim, parent);\n  }\n\n  points.sort((a, b) => a[dimensions[dim]] - b[dimensions[dim]]);\n\n  const median = Math.floor(points.length / 2);\n  const node = new Node(points[median], dim, parent);\n  node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);\n  node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);\n\n  return node;\n}\n\nfunction restoreParent(root) {\n  if (root.left) {\n    root.left.parent = root;\n    restoreParent(root.left);\n  }\n\n  if (root.right) {\n    root.right.parent = root;\n    restoreParent(root.right);\n  }\n}\n\n// Binary heap implementation from:\n// http://eloquentjavascript.net/appendix2.html\nclass BinaryHeap {\n  constructor(scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  }\n\n  peek() {\n    return this.content[0];\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n];\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = Math.floor((n + 1) / 2) - 1;\n      const parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to move it further.\n        break;\n      }\n    }\n  }\n\n  sinkDown(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        var child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      } else {\n        // Otherwise, we are done.\n        break;\n      }\n    }\n  }\n}\n","import { euclidean as euclideanDistance } from 'ml-distance-euclidean';\n\nimport KDTree from './KDTree';\n\nexport default class KNN {\n  /**\n   * @param {Array} dataset\n   * @param {Array} labels\n   * @param {object} options\n   * @param {number} [options.k=numberOfClasses + 1] - Number of neighbors to classify.\n   * @param {function} [options.distance=euclideanDistance] - Distance function that takes two parameters.\n   */\n  constructor(dataset, labels, options = {}) {\n    if (dataset === true) {\n      const model = labels;\n      this.kdTree = new KDTree(model.kdTree, options);\n      this.k = model.k;\n      this.classes = new Set(model.classes);\n      this.isEuclidean = model.isEuclidean;\n      return;\n    }\n\n    const classes = new Set(labels);\n\n    const { distance = euclideanDistance, k = classes.size + 1 } = options;\n\n    const points = new Array(dataset.length);\n    for (var i = 0; i < points.length; ++i) {\n      points[i] = dataset[i].slice();\n    }\n\n    for (i = 0; i < labels.length; ++i) {\n      points[i].push(labels[i]);\n    }\n\n    this.kdTree = new KDTree(points, distance);\n    this.k = k;\n    this.classes = classes;\n    this.isEuclidean = distance === euclideanDistance;\n  }\n\n  /**\n   * Create a new KNN instance with the given model.\n   * @param {object} model\n   * @param {function} distance=euclideanDistance - distance function must be provided if the model wasn't trained with euclidean distance.\n   * @return {KNN}\n   */\n  static load(model, distance = euclideanDistance) {\n    if (model.name !== 'KNN') {\n      throw new Error(`invalid model: ${model.name}`);\n    }\n    if (!model.isEuclidean && distance === euclideanDistance) {\n      throw new Error(\n        'a custom distance function was used to create the model. Please provide it again'\n      );\n    }\n    if (model.isEuclidean && distance !== euclideanDistance) {\n      throw new Error(\n        'the model was created with the default distance function. Do not load it with another one'\n      );\n    }\n    return new KNN(true, model, distance);\n  }\n\n  /**\n   * Return a JSON containing the kd-tree model.\n   * @return {object} JSON KNN model.\n   */\n  toJSON() {\n    return {\n      name: 'KNN',\n      kdTree: this.kdTree,\n      k: this.k,\n      classes: Array.from(this.classes),\n      isEuclidean: this.isEuclidean\n    };\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Array} dataset\n   * @return {Array} predictions\n   */\n  predict(dataset) {\n    if (Array.isArray(dataset)) {\n      if (typeof dataset[0] === 'number') {\n        return getSinglePrediction(this, dataset);\n      } else if (\n        Array.isArray(dataset[0]) &&\n        typeof dataset[0][0] === 'number'\n      ) {\n        const predictions = new Array(dataset.length);\n        for (var i = 0; i < dataset.length; i++) {\n          predictions[i] = getSinglePrediction(this, dataset[i]);\n        }\n        return predictions;\n      }\n    }\n    throw new TypeError('dataset to predict must be an array or a matrix');\n  }\n}\n\nfunction getSinglePrediction(knn, currentCase) {\n  var nearestPoints = knn.kdTree.nearest(currentCase, knn.k);\n  var pointsPerClass = {};\n  var predictedClass = -1;\n  var maxPoints = -1;\n  var lastElement = nearestPoints[0][0].length - 1;\n\n  for (var element of knn.classes) {\n    pointsPerClass[element] = 0;\n  }\n\n  for (var i = 0; i < nearestPoints.length; ++i) {\n    var currentClass = nearestPoints[i][0][lastElement];\n    var currentPoints = ++pointsPerClass[currentClass];\n    if (currentPoints > maxPoints) {\n      predictedClass = currentClass;\n      maxPoints = currentPoints;\n    }\n  }\n\n  return predictedClass;\n}\n","import Matrix from 'ml-matrix';\n\n/**\n * @private\n * Function that given vector, returns its norm\n * @param {Vector} X\n * @return {number} Norm of the vector\n */\nexport function norm(X) {\n  return Math.sqrt(X.clone().apply(pow2array).sum());\n}\n\n/**\n * @private\n * Function that pow 2 each element of a Matrix or a Vector,\n * used in the apply method of the Matrix object\n * @param {number} i - index i.\n * @param {number} j - index j.\n * @return {Matrix} The Matrix object modified at the index i, j.\n * */\nexport function pow2array(i, j) {\n  this.set(i, j, this.get(i, j) ** 2);\n}\n\n/**\n * @private\n * Function that normalize the dataset and return the means and\n * standard deviation of each feature.\n * @param {Matrix} dataset\n * @return {object} dataset normalized, means and standard deviations\n */\nexport function featureNormalize(dataset) {\n  var means = dataset.mean('column');\n  var std = dataset.standardDeviation('column', { mean: means, unbiased: true });\n  var result = Matrix.checkMatrix(dataset).subRowVector(means);\n  return { result: result.divRowVector(std), means: means, std: std };\n}\n\n/**\n * @private\n * Function that initialize an array of matrices.\n * @param {Array} array\n * @param {boolean} isMatrix\n * @return {Array} array with the matrices initialized.\n */\nexport function initializeMatrices(array, isMatrix) {\n  if (isMatrix) {\n    for (var i = 0; i < array.length; ++i) {\n      for (var j = 0; j < array[i].length; ++j) {\n        var elem = array[i][j];\n        array[i][j] = elem !== null ? new Matrix(array[i][j]) : undefined;\n      }\n    }\n  } else {\n    for (i = 0; i < array.length; ++i) {\n      array[i] = new Matrix(array[i]);\n    }\n  }\n\n  return array;\n}\n","import Matrix from 'ml-matrix';\n\nimport * as Utils from './utils';\n\n/**\n * @class PLS\n */\nexport class PLS {\n  /**\n   * Constructor for Partial Least Squares (PLS)\n   * @param {object} options\n   * @param {number} [options.latentVectors] - Number of latent vector to get (if the algorithm doesn't find a good model below the tolerance)\n   * @param {number} [options.tolerance=1e-5]\n   * @param {boolean} [options.scale=true] - rescale dataset using mean.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.meanX = model.meanX;\n      this.stdDevX = model.stdDevX;\n      this.meanY = model.meanY;\n      this.stdDevY = model.stdDevY;\n      this.PBQ = Matrix.checkMatrix(model.PBQ);\n      this.R2X = model.R2X;\n      this.scale = model.scale;\n      this.scaleMethod = model.scaleMethod;\n      this.tolerance = model.tolerance;\n    } else {\n      var {\n        tolerance = 1e-5,\n        scale = true,\n      } = options;\n      this.tolerance = tolerance;\n      this.scale = scale;\n      this.latentVectors = options.latentVectors;\n    }\n  }\n\n  /**\n   * Fits the model with the given data and predictions, in this function is calculated the\n   * following outputs:\n   *\n   * T - Score matrix of X\n   * P - Loading matrix of X\n   * U - Score matrix of Y\n   * Q - Loading matrix of Y\n   * B - Matrix of regression coefficient\n   * W - Weight matrix of X\n   *\n   * @param {Matrix|Array} trainingSet\n   * @param {Matrix|Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    trainingValues = Matrix.checkMatrix(trainingValues);\n\n    if (trainingSet.length !== trainingValues.length) {\n      throw new RangeError('The number of X rows must be equal to the number of Y rows');\n    }\n\n    this.meanX = trainingSet.mean('column');\n    this.stdDevX = trainingSet.standardDeviation('column', { mean: this.meanX, unbiased: true });\n    this.meanY = trainingValues.mean('column');\n    this.stdDevY = trainingValues.standardDeviation('column', { mean: this.meanY, unbiased: true });\n\n    if (this.scale) {\n      trainingSet = trainingSet.clone().subRowVector(this.meanX).divRowVector(this.stdDevX);\n      trainingValues = trainingValues.clone().subRowVector(this.meanY).divRowVector(this.stdDevY);\n    }\n\n    if (this.latentVectors === undefined) {\n      this.latentVectors = Math.min(trainingSet.rows - 1, trainingSet.columns);\n    }\n\n    var rx = trainingSet.rows;\n    var cx = trainingSet.columns;\n    var ry = trainingValues.rows;\n    var cy = trainingValues.columns;\n\n    var ssqXcal = trainingSet.clone().mul(trainingSet).sum(); // for the r²\n    var sumOfSquaresY = trainingValues.clone().mul(trainingValues).sum();\n\n    var tolerance = this.tolerance;\n    var n = this.latentVectors;\n    var T = Matrix.zeros(rx, n);\n    var P = Matrix.zeros(cx, n);\n    var U = Matrix.zeros(ry, n);\n    var Q = Matrix.zeros(cy, n);\n    var B = Matrix.zeros(n, n);\n    var W = P.clone();\n    var k = 0;\n\n    while (Utils.norm(trainingValues) > tolerance && k < n) {\n      var transposeX = trainingSet.transpose();\n      var transposeY = trainingValues.transpose();\n\n      var tIndex = maxSumColIndex(trainingSet.clone().mul(trainingSet));\n      var uIndex = maxSumColIndex(trainingValues.clone().mul(trainingValues));\n\n      var t1 = trainingSet.getColumnVector(tIndex);\n      var u = trainingValues.getColumnVector(uIndex);\n      var t = Matrix.zeros(rx, 1);\n\n      while (Utils.norm(t1.clone().sub(t)) > tolerance) {\n        var w = transposeX.mmul(u);\n        w.div(Utils.norm(w));\n        t = t1;\n        t1 = trainingSet.mmul(w);\n        var q = transposeY.mmul(t1);\n        q.div(Utils.norm(q));\n        u = trainingValues.mmul(q);\n      }\n\n      t = t1;\n      var num = transposeX.mmul(t);\n      var den = t.transpose().mmul(t).get(0, 0);\n      var p = num.div(den);\n      var pnorm = Utils.norm(p);\n      p.div(pnorm);\n      t.mul(pnorm);\n      w.mul(pnorm);\n\n      num = u.transpose().mmul(t);\n      den = t.transpose().mmul(t).get(0, 0);\n      var b = num.div(den).get(0, 0);\n      trainingSet.sub(t.mmul(p.transpose()));\n      trainingValues.sub(t.clone().mul(b).mmul(q.transpose()));\n\n      T.setColumn(k, t);\n      P.setColumn(k, p);\n      U.setColumn(k, u);\n      Q.setColumn(k, q);\n      W.setColumn(k, w);\n\n      B.set(k, k, b);\n      k++;\n    }\n\n    k--;\n    T = T.subMatrix(0, T.rows - 1, 0, k);\n    P = P.subMatrix(0, P.rows - 1, 0, k);\n    U = U.subMatrix(0, U.rows - 1, 0, k);\n    Q = Q.subMatrix(0, Q.rows - 1, 0, k);\n    W = W.subMatrix(0, W.rows - 1, 0, k);\n    B = B.subMatrix(0, k, 0, k);\n\n    // TODO: review of R2Y\n    // this.R2Y = t.transpose().mmul(t).mul(q[k][0]*q[k][0]).divS(ssqYcal)[0][0];\n    //\n    this.ssqYcal = sumOfSquaresY;\n    this.E = trainingSet;\n    this.F = trainingValues;\n    this.T = T;\n    this.P = P;\n    this.U = U;\n    this.Q = Q;\n    this.W = W;\n    this.B = B;\n    this.PBQ = P.mmul(B).mmul(Q.transpose());\n    this.R2X = t.transpose().mmul(t).mmul(p.transpose().mmul(p)).div(ssqXcal).get(0, 0);\n  }\n\n  /**\n   * Predicts the behavior of the given dataset.\n   * @param {Matrix|Array} dataset - data to be predicted.\n   * @return {Matrix} - predictions of each element of the dataset.\n   */\n  predict(dataset) {\n    var X = Matrix.checkMatrix(dataset);\n    if (this.scale) {\n      X = X.subRowVector(this.meanX).divRowVector(this.stdDevX);\n    }\n    var Y = X.mmul(this.PBQ);\n    Y = Y.mulRowVector(this.stdDevY).addRowVector(this.meanY);\n    return Y;\n  }\n\n  /**\n   * Returns the explained variance on training of the PLS model\n   * @return {number}\n   */\n  getExplainedVariance() {\n    return this.R2X;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      name: 'PLS',\n      R2X: this.R2X,\n      meanX: this.meanX,\n      stdDevX: this.stdDevX,\n      meanY: this.meanY,\n      stdDevY: this.stdDevY,\n      PBQ: this.PBQ,\n      tolerance: this.tolerance,\n      scale: this.scale,\n    };\n  }\n\n  /**\n   * Load a PLS model from a JSON Object\n   * @param {object} model\n   * @return {PLS} - PLS object from the given model\n   */\n  static load(model) {\n    if (model.name !== 'PLS') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n    return new PLS(true, model);\n  }\n}\n\n/**\n * @private\n * Function that returns the index where the sum of each\n * column vector is maximum.\n * @param {Matrix} data\n * @return {number} index of the maximum\n */\nfunction maxSumColIndex(data) {\n  return Matrix.rowVector(data.sum('column')).maxIndex()[0];\n}\n","import { Matrix, SingularValueDecomposition, inverse } from 'ml-matrix';\n\nimport { initializeMatrices } from './utils';\n\n/**\n * @class KOPLS\n */\nexport class KOPLS {\n  /**\n     * Constructor for Kernel-based Orthogonal Projections to Latent Structures (K-OPLS)\n     * @param {object} options\n     * @param {number} [options.predictiveComponents] - Number of predictive components to use.\n     * @param {number} [options.orthogonalComponents] - Number of Y-Orthogonal components.\n     * @param {Kernel} [options.kernel] - Kernel object to apply, see [ml-kernel](https://github.com/mljs/kernel).\n     * @param {object} model - for load purposes.\n     */\n  constructor(options, model) {\n    if (options === true) {\n      this.trainingSet = new Matrix(model.trainingSet);\n      this.YLoadingMat = new Matrix(model.YLoadingMat);\n      this.SigmaPow = new Matrix(model.SigmaPow);\n      this.YScoreMat = new Matrix(model.YScoreMat);\n      this.predScoreMat = initializeMatrices(model.predScoreMat, false);\n      this.YOrthLoadingVec = initializeMatrices(model.YOrthLoadingVec, false);\n      this.YOrthEigen = model.YOrthEigen;\n      this.YOrthScoreMat = initializeMatrices(model.YOrthScoreMat, false);\n      this.toNorm = initializeMatrices(model.toNorm, false);\n      this.TURegressionCoeff = initializeMatrices(model.TURegressionCoeff, false);\n      this.kernelX = initializeMatrices(model.kernelX, true);\n      this.kernel = model.kernel;\n      this.orthogonalComp = model.orthogonalComp;\n      this.predictiveComp = model.predictiveComp;\n    } else {\n      if (options.predictiveComponents === undefined) {\n        throw new RangeError('no predictive components found!');\n      }\n      if (options.orthogonalComponents === undefined) {\n        throw new RangeError('no orthogonal components found!');\n      }\n      if (options.kernel === undefined) {\n        throw new RangeError('no kernel found!');\n      }\n\n      this.orthogonalComp = options.orthogonalComponents;\n      this.predictiveComp = options.predictiveComponents;\n      this.kernel = options.kernel;\n    }\n  }\n\n  /**\n     * Train the K-OPLS model with the given training set and labels.\n     * @param {Matrix|Array} trainingSet\n     * @param {Matrix|Array} trainingValues\n     */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    trainingValues = Matrix.checkMatrix(trainingValues);\n\n    // to save and compute kernel with the prediction dataset.\n    this.trainingSet = trainingSet.clone();\n\n    var kernelX = this.kernel.compute(trainingSet);\n\n    var Identity = Matrix.eye(kernelX.rows, kernelX.rows, 1);\n    var temp = kernelX;\n    kernelX = new Array(this.orthogonalComp + 1);\n    for (let i = 0; i < this.orthogonalComp + 1; i++) {\n      kernelX[i] = new Array(this.orthogonalComp + 1);\n    }\n    kernelX[0][0] = temp;\n\n    var result = new SingularValueDecomposition(trainingValues.transpose().mmul(kernelX[0][0]).mmul(trainingValues), {\n      computeLeftSingularVectors: true,\n      computeRightSingularVectors: false\n    });\n    var YLoadingMat = result.leftSingularVectors;\n    var Sigma = result.diagonalMatrix;\n\n    YLoadingMat = YLoadingMat.subMatrix(0, YLoadingMat.rows - 1, 0, this.predictiveComp - 1);\n    Sigma = Sigma.subMatrix(0, this.predictiveComp - 1, 0, this.predictiveComp - 1);\n\n    var YScoreMat = trainingValues.mmul(YLoadingMat);\n\n    var predScoreMat = new Array(this.orthogonalComp + 1);\n    var TURegressionCoeff = new Array(this.orthogonalComp + 1);\n    var YOrthScoreMat = new Array(this.orthogonalComp);\n    var YOrthLoadingVec = new Array(this.orthogonalComp);\n    var YOrthEigen = new Array(this.orthogonalComp);\n    var YOrthScoreNorm = new Array(this.orthogonalComp);\n\n    var SigmaPow = Matrix.pow(Sigma, -0.5);\n    // to avoid errors, check infinity\n    SigmaPow.apply(function (i, j) {\n      if (this.get(i, j) === Infinity) {\n        this.set(i, j, 0);\n      }\n    });\n\n    for (var i = 0; i < this.orthogonalComp; ++i) {\n      predScoreMat[i] = kernelX[0][i].transpose().mmul(YScoreMat).mmul(SigmaPow);\n\n      var TpiPrime = predScoreMat[i].transpose();\n      TURegressionCoeff[i] = inverse(TpiPrime.mmul(predScoreMat[i])).mmul(TpiPrime).mmul(YScoreMat);\n\n      result = new SingularValueDecomposition(TpiPrime.mmul(Matrix.sub(kernelX[i][i], predScoreMat[i].mmul(TpiPrime))).mmul(predScoreMat[i]), {\n        computeLeftSingularVectors: true,\n        computeRightSingularVectors: false\n      });\n      var CoTemp = result.leftSingularVectors;\n      var SoTemp = result.diagonalMatrix;\n\n      YOrthLoadingVec[i] = CoTemp.subMatrix(0, CoTemp.rows - 1, 0, 0);\n      YOrthEigen[i] = SoTemp.get(0, 0);\n\n      YOrthScoreMat[i] = Matrix.sub(kernelX[i][i], predScoreMat[i].mmul(TpiPrime)).mmul(predScoreMat[i]).mmul(YOrthLoadingVec[i]).mul(Math.pow(YOrthEigen[i], -0.5));\n\n      var toiPrime = YOrthScoreMat[i].transpose();\n      YOrthScoreNorm[i] = Matrix.sqrt(toiPrime.mmul(YOrthScoreMat[i]));\n\n      YOrthScoreMat[i] = YOrthScoreMat[i].divRowVector(YOrthScoreNorm[i]);\n\n      var ITo = Matrix.sub(Identity, YOrthScoreMat[i].mmul(YOrthScoreMat[i].transpose()));\n\n      kernelX[0][i + 1] = kernelX[0][i].mmul(ITo);\n      kernelX[i + 1][i + 1] = ITo.mmul(kernelX[i][i]).mmul(ITo);\n    }\n\n    var lastScoreMat = predScoreMat[this.orthogonalComp] = kernelX[0][this.orthogonalComp].transpose().mmul(YScoreMat).mmul(SigmaPow);\n\n    var lastTpPrime = lastScoreMat.transpose();\n    TURegressionCoeff[this.orthogonalComp] = inverse(lastTpPrime.mmul(lastScoreMat)).mmul(lastTpPrime).mmul(YScoreMat);\n\n    this.YLoadingMat = YLoadingMat;\n    this.SigmaPow = SigmaPow;\n    this.YScoreMat = YScoreMat;\n    this.predScoreMat = predScoreMat;\n    this.YOrthLoadingVec = YOrthLoadingVec;\n    this.YOrthEigen = YOrthEigen;\n    this.YOrthScoreMat = YOrthScoreMat;\n    this.toNorm = YOrthScoreNorm;\n    this.TURegressionCoeff = TURegressionCoeff;\n    this.kernelX = kernelX;\n  }\n\n  /**\n     * Predicts the output given the matrix to predict.\n     * @param {Matrix|Array} toPredict\n     * @return {{y: Matrix, predScoreMat: Array<Matrix>, predYOrthVectors: Array<Matrix>}} predictions\n     */\n  predict(toPredict) {\n    var KTestTrain = this.kernel.compute(toPredict, this.trainingSet);\n\n    var temp = KTestTrain;\n    KTestTrain = new Array(this.orthogonalComp + 1);\n    for (let i = 0; i < this.orthogonalComp + 1; i++) {\n      KTestTrain[i] = new Array(this.orthogonalComp + 1);\n    }\n    KTestTrain[0][0] = temp;\n\n    var YOrthScoreVector = new Array(this.orthogonalComp);\n    var predScoreMat = new Array(this.orthogonalComp);\n\n    var i;\n    for (i = 0; i < this.orthogonalComp; ++i) {\n      predScoreMat[i] = KTestTrain[i][0].mmul(this.YScoreMat).mmul(this.SigmaPow);\n\n      YOrthScoreVector[i] = Matrix.sub(KTestTrain[i][i], predScoreMat[i].mmul(this.predScoreMat[i].transpose())).mmul(this.predScoreMat[i]).mmul(this.YOrthLoadingVec[i]).mul(Math.pow(this.YOrthEigen[i], -0.5));\n\n      YOrthScoreVector[i] = YOrthScoreVector[i].divRowVector(this.toNorm[i]);\n\n      var scoreMatPrime = this.YOrthScoreMat[i].transpose();\n      KTestTrain[i + 1][0] = Matrix.sub(KTestTrain[i][0], YOrthScoreVector[i].mmul(scoreMatPrime).mmul(this.kernelX[0][i].transpose()));\n\n      var p1 = Matrix.sub(KTestTrain[i][0], KTestTrain[i][i].mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime));\n      var p2 = YOrthScoreVector[i].mmul(scoreMatPrime).mmul(this.kernelX[i][i]);\n      var p3 = p2.mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime);\n\n      KTestTrain[i + 1][i + 1] = p1.sub(p2).add(p3);\n    }\n\n    predScoreMat[i] = KTestTrain[i][0].mmul(this.YScoreMat).mmul(this.SigmaPow);\n    var prediction = predScoreMat[i].mmul(this.TURegressionCoeff[i]).mmul(this.YLoadingMat.transpose());\n\n    return {\n      prediction: prediction,\n      predScoreMat: predScoreMat,\n      predYOrthVectors: YOrthScoreVector\n    };\n  }\n\n  /**\n     * Export the current model to JSON.\n     * @return {object} - Current model.\n     */\n  toJSON() {\n    return {\n      name: 'K-OPLS',\n      YLoadingMat: this.YLoadingMat,\n      SigmaPow: this.SigmaPow,\n      YScoreMat: this.YScoreMat,\n      predScoreMat: this.predScoreMat,\n      YOrthLoadingVec: this.YOrthLoadingVec,\n      YOrthEigen: this.YOrthEigen,\n      YOrthScoreMat: this.YOrthScoreMat,\n      toNorm: this.toNorm,\n      TURegressionCoeff: this.TURegressionCoeff,\n      kernelX: this.kernelX,\n      trainingSet: this.trainingSet,\n      orthogonalComp: this.orthogonalComp,\n      predictiveComp: this.predictiveComp\n    };\n  }\n\n  /**\n     * Load a K-OPLS with the given model.\n     * @param {object} model\n     * @param {Kernel} kernel - kernel used on the model, see [ml-kernel](https://github.com/mljs/kernel).\n     * @return {KOPLS}\n     */\n  static load(model, kernel) {\n    if (model.name !== 'K-OPLS') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    if (!kernel) {\n      throw new RangeError('You must provide a kernel for the model!');\n    }\n\n    model.kernel = kernel;\n    return new KOPLS(true, model);\n  }\n}\n","/**\n *  Constructs a confusion matrix\n * @class ConfusionMatrix\n * @example\n * const CM = new ConfusionMatrix([[13, 2], [10, 5]], ['cat', 'dog'])\n * @param {Array<Array<number>>} matrix - The confusion matrix, a 2D Array. Rows represent the actual label and columns\n *     the predicted label.\n * @param {Array<any>} labels - Labels of the confusion matrix, a 1D Array\n */\nclass ConfusionMatrix {\n    constructor(matrix, labels) {\n        if (matrix.length !== matrix[0].length) {\n            throw new Error('Confusion matrix must be square');\n        }\n        if (labels.length !== matrix.length) {\n            throw new Error('Confusion matrix and labels should have the same length');\n        }\n        this.labels = labels;\n        this.matrix = matrix;\n    }\n\n\n    /**\n     * Construct confusion matrix from the predicted and actual labels (classes). Be sure to provide the arguments in\n     * the correct order!\n     * @param {Array<any>} actual  - The predicted labels of the classification\n     * @param {Array<any>} predicted     - The actual labels of the classification. Has to be of same length as\n     *     predicted.\n     * @param {object} [options] - Additional options\n     * @param {Array<any>} [options.labels] - The list of labels that should be used. If not provided the distinct set\n     *     of labels present in predicted and actual is used. Labels are compared using the strict equality operator\n     *     '==='\n     * @return {ConfusionMatrix} - Confusion matrix\n     */\n    static fromLabels(actual, predicted, options = {}) {\n        if (predicted.length !== actual.length) {\n            throw new Error('predicted and actual must have the same length');\n        }\n        let distinctLabels;\n        if (options.labels) {\n            distinctLabels = new Set(options.labels);\n        } else {\n            distinctLabels = new Set([...actual, ...predicted]);\n        }\n        distinctLabels = Array.from(distinctLabels);\n        if (options.sort) {\n            distinctLabels.sort(options.sort);\n        }\n\n        // Create confusion matrix and fill with 0's\n        const matrix = Array.from({length: distinctLabels.length});\n        for (let i = 0; i < matrix.length; i++) {\n            matrix[i] = new Array(matrix.length);\n            matrix[i].fill(0);\n        }\n\n        for (let i = 0; i < predicted.length; i++) {\n            const actualIdx = distinctLabels.indexOf(actual[i]);\n            const predictedIdx = distinctLabels.indexOf(predicted[i]);\n            if (actualIdx >= 0 && predictedIdx >= 0) {\n                matrix[actualIdx][predictedIdx]++;\n            }\n        }\n\n        return new ConfusionMatrix(matrix, distinctLabels);\n    }\n\n    /**\n     * Get the confusion matrix\n     * @return {Array<Array<number> >}\n     */\n    getMatrix() {\n        return this.matrix;\n    }\n\n    getLabels() {\n        return this.labels;\n    }\n\n    /**\n     * Get the total number of samples\n     * @return {number}\n     */\n    getTotalCount() {\n        let predicted = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                predicted += this.matrix[i][j];\n            }\n        }\n        return predicted;\n    }\n\n    /**\n     * Get the total number of true predictions\n     * @return {number}\n     */\n    getTrueCount() {\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            count += this.matrix[i][i];\n        }\n        return count;\n    }\n\n    /**\n     * Get the total number of false predictions.\n     * @return {number}\n     */\n    getFalseCount() {\n        return this.getTotalCount() - this.getTrueCount();\n    }\n\n    /**\n     * Get the number of true positive predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTruePositiveCount(label) {\n        const index = this.getIndex(label);\n        return this.matrix[index][index];\n    }\n\n    /**\n     * Get the number of true negative predictions\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTrueNegativeCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                if (i !== index && j !== index) {\n                    count += this.matrix[i][j];\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of false positive predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalsePositiveCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            if (i !== index) {\n                count += this.matrix[i][index];\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of false negative predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseNegativeCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            if (i !== index) {\n                count += this.matrix[index][i];\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of real positive samples.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getPositiveCount(label) {\n        return this.getTruePositiveCount(label) + this.getFalseNegativeCount(label);\n    }\n\n    /**\n     * Get the number of real negative samples.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getNegativeCount(label) {\n        return this.getTrueNegativeCount(label) + this.getFalsePositiveCount(label);\n    }\n\n    /**\n     * Get the index in the confusion matrix that corresponds to the given label\n     * @param {any} label - The label to search for\n     * @throws if the label is not found\n     * @return {number}\n     */\n    getIndex(label) {\n        const index = this.labels.indexOf(label);\n        if (index === -1) throw new Error('The label does not exist');\n        return index;\n    }\n\n    /**\n     * Get the true positive rate a.k.a. sensitivity. Computes the ratio between the number of true positive predictions and the total number of positive samples.\n     * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number} - The true positive rate [0-1]\n     */\n    getTruePositiveRate(label) {\n        return this.getTruePositiveCount(label) / this.getPositiveCount(label);\n    }\n\n    /**\n     * Get the true negative rate a.k.a. specificity. Computes the ration between the number of true negative predictions and the total number of negative samples.\n     * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTrueNegativeRate(label) {\n        return this.getTrueNegativeCount(label) / this.getNegativeCount(label);\n    }\n\n    /**\n     * Get the positive predictive value a.k.a. precision. Computes TP / (TP + FP)\n     * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getPositivePredictiveValue(label) {\n        const TP = this.getTruePositiveCount(label);\n        return TP / (TP + this.getFalsePositiveCount(label));\n    }\n\n    /**\n     * Negative predictive value\n     * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getNegativePredictiveValue(label) {\n        const TN = this.getTrueNegativeCount(label);\n        return TN / (TN + this.getFalseNegativeCount(label));\n    }\n\n    /**\n     * False negative rate a.k.a. miss rate.\n     * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseNegativeRate(label) {\n        return 1 - this.getTruePositiveRate(label);\n    }\n\n    /**\n     * False positive rate a.k.a. fall-out rate.\n     * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalsePositiveRate(label) {\n        return 1 - this.getTrueNegativeRate(label);\n    }\n\n    /**\n     * False discovery rate (FDR)\n     * {@link https://en.wikipedia.org/wiki/False_discovery_rate}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseDiscoveryRate(label) {\n        const FP = this.getFalsePositiveCount(label);\n        return FP / (FP + this.getTruePositiveCount(label));\n    }\n\n    /**\n     * False omission rate (FOR)\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseOmissionRate(label) {\n        const FN = this.getFalseNegativeCount(label);\n        return FN / (FN + this.getTruePositiveCount(label));\n    }\n\n    /**\n     * F1 score\n     * {@link https://en.wikipedia.org/wiki/F1_score}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getF1Score(label) {\n        const TP = this.getTruePositiveCount(label);\n        return 2 * TP / (2 * TP + this.getFalsePositiveCount(label) + this.getFalseNegativeCount(label));\n    }\n\n    /**\n     * Matthews correlation coefficient (MCC)\n     * {@link https://en.wikipedia.org/wiki/Matthews_correlation_coefficient}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getMatthewsCorrelationCoefficient(label) {\n        const TP = this.getTruePositiveCount(label);\n        const TN = this.getTrueNegativeCount(label);\n        const FP = this.getFalsePositiveCount(label);\n        const FN = this.getFalseNegativeCount(label);\n        return (TP * TN - FP * FN) / Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN));\n    }\n\n    /**\n     * Informedness\n     * {@link https://en.wikipedia.org/wiki/Youden%27s_J_statistic}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getInformedness(label) {\n        return this.getTruePositiveRate(label) + this.getTrueNegativeRate(label) - 1;\n    }\n\n    /**\n     * Markedness\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getMarkedness(label) {\n        return this.getPositivePredictiveValue(label) + this.getNegativePredictiveValue(label) - 1;\n    }\n\n    /**\n     * Get the confusion table.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {Array<Array<number> >} - The 2x2 confusion table. [[TP, FN], [FP, TN]]\n     */\n    getConfusionTable(label) {\n        return [\n            [\n                this.getTruePositiveCount(label),\n                this.getFalseNegativeCount(label)\n            ],\n            [\n                this.getFalsePositiveCount(label),\n                this.getTrueNegativeCount(label)\n            ]\n        ];\n    }\n\n    /**\n     * Get total accuracy.\n     * @return {number} - The ratio between the number of true predictions and total number of classifications ([0-1])\n     */\n    getAccuracy() {\n        let correct = 0;\n        let incorrect = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                if (i === j) correct += this.matrix[i][j];\n                else incorrect += this.matrix[i][j];\n            }\n        }\n        return correct / (correct + incorrect);\n    }\n\n\n    /**\n     * Returns the element in the confusion matrix that corresponds to the given actual and predicted labels.\n     * @param {any} actual - The true label\n     * @param {any} predicted - The predicted label\n     * @return {number} - The element in the confusion matrix\n     */\n    getCount(actual, predicted) {\n        const actualIndex = this.getIndex(actual);\n        const predictedIndex = this.getIndex(predicted);\n        return this.matrix[actualIndex][predictedIndex];\n    }\n\n    /**\n     * Compute the general prediction accuracy\n     * @deprecated Use getAccuracy\n     * @return {number} - The prediction accuracy ([0-1]\n     */\n    get accuracy() {\n        return this.getAccuracy();\n    }\n\n    /**\n     * Compute the number of predicted observations\n     * @deprecated Use getTotalCount\n     * @return {number}\n     */\n    get total() {\n        return this.getTotalCount();\n    }\n}\n\nmodule.exports = ConfusionMatrix;\n","'use strict';\nconst defaultOptions = {\n  mode: 'index'\n};\n\nmodule.exports = function *(M, N, options) {\n  options = Object.assign({}, defaultOptions, options);\n  var a = new Array(N);\n  var c = new Array(M);\n  var b = new Array(N);\n  var p = new Array(N + 2);\n  var x, y, z;\n\n  // init a and b\n  for (var i = 0; i < N; i++) {\n    a[i] = i;\n    if (i < N - M) b[i] = 0;\n    else b[i] = 1;\n  }\n\n  // init c\n  for (i = 0; i < M; i++) {\n    c[i] = N - M + i;\n  }\n\n  // init p\n  for (i = 0; i < p.length; i++) {\n    if (i === 0) p[i] = N + 1;\n    else if (i <= N - M) p[i] = 0;\n    else if (i <= N) p[i] = i - N + M;\n    else p[i] = -2;\n  }\n\n  function twiddle() {\n    var i, j, k;\n    j = 1;\n    while (p[j] <= 0) {\n      j++;\n    }\n    if (p[j - 1] === 0) {\n      for (i = j - 1; i !== 1; i--) {\n        p[i] = -1;\n      }\n      p[j] = 0;\n      x = z = 0;\n      p[1] = 1;\n      y = j - 1;\n    } else {\n      if (j > 1) {\n        p[j - 1] = 0;\n      }\n      do {\n        j++;\n      }\n      while (p[j] > 0);\n      k = j - 1;\n      i = j;\n      while (p[i] === 0) {\n        p[i++] = -1;\n      }\n      if (p[i] === -1) {\n        p[i] = p[k];\n        z = p[k] - 1;\n        x = i - 1;\n        y = k - 1;\n        p[k] = -1;\n      } else {\n        if (i === p[0]) {\n          return 0;\n        } else {\n          p[j] = p[i];\n          z = p[i] - 1;\n          p[i] = 0;\n          x = j - 1;\n          y = i - 1;\n        }\n      }\n    }\n    return 1;\n  }\n\n  if (options.mode === 'index') {\n    yield c.slice();\n    while (twiddle()) {\n      c[z] = a[x];\n      yield c.slice();\n    }\n  } else if (options.mode === 'mask') {\n    yield b.slice();\n    while (twiddle()) {\n      b[x] = 1;\n      b[y] = 0;\n      yield b.slice();\n    }\n  } else {\n    throw new Error('Invalid mode');\n  }\n};\n","'use strict';\n\nconst ConfusionMatrix = require('ml-confusion-matrix');\n\nconst CV = {};\nconst combinations = require('ml-combinations');\n\n/**\n * Performs a leave-one-out cross-validation (LOO-CV) of the given samples. In LOO-CV, 1 observation is used as the\n * validation set while the rest is used as the training set. This is repeated once for each observation. LOO-CV is a\n * special case of LPO-CV. @see leavePout\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.leaveOneOut = function (Classifier, features, labels, classifierOptions) {\n    if (typeof labels === 'function') {\n        var callback = labels;\n        labels = features;\n        features = Classifier;\n        return CV.leavePOut(features, labels, 1, callback);\n    }\n    return CV.leavePOut(Classifier, features, labels, classifierOptions, 1);\n};\n\n\n/**\n * Performs a leave-p-out cross-validation (LPO-CV) of the given samples. In LPO-CV, p observations are used as the\n * validation set while the rest is used as the training set. This is repeated as many times as there are possible\n * ways to combine p observations from the set (unordered without replacement). Be aware that for relatively small\n * data-set size this can require a very large number of training and testing to do!\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} p - The size of the validation sub-samples' set\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.leavePOut = function (Classifier, features, labels, classifierOptions, p) {\n    if (typeof classifierOptions === 'function') {\n        var callback = classifierOptions;\n        p = labels;\n        labels = features;\n        features = Classifier;\n    }\n    check(features, labels);\n    const distinct = getDistinct(labels);\n    const confusionMatrix = initMatrix(distinct.length, distinct.length);\n\n    var N = features.length;\n    var gen = combinations(p, N);\n    var allIdx = new Array(N);\n    for (let i = 0; i < N; i++) {\n        allIdx[i] = i;\n    }\n    for (const testIdx of gen) {\n        var trainIdx = allIdx.slice();\n\n        for (let i = testIdx.length - 1; i >= 0; i--) {\n            trainIdx.splice(testIdx[i], 1);\n        }\n\n        if (callback) {\n            validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback);\n        } else {\n            validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);\n        }\n\n    }\n\n    return new ConfusionMatrix(confusionMatrix, distinct);\n};\n\n/**\n * Performs k-fold cross-validation (KF-CV). KF-CV separates the data-set into k random equally sized partitions, and\n * uses each as a validation set, with all other partitions used in the training set. Observations left over from if k\n * does not divide the number of observations are left out of the cross-validation process.\n * @param {function} Classifier - The classifier's to use for the cross validation. Expect ml-classifier api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} k - The number of partitions to create\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.kFold = function (Classifier, features, labels, classifierOptions, k) {\n    if (typeof classifierOptions === 'function') {\n        var callback = classifierOptions;\n        k = labels;\n        labels = features;\n        features = Classifier;\n    }\n    check(features, labels);\n    const distinct = getDistinct(labels);\n    const confusionMatrix = initMatrix(distinct.length, distinct.length);\n    var N = features.length;\n    var allIdx = new Array(N);\n    for (var i = 0; i < N; i++) {\n        allIdx[i] = i;\n    }\n\n    var l = Math.floor(N / k);\n    // create random k-folds\n    var current = [];\n    var folds = [];\n    while (allIdx.length) {\n        var randi = Math.floor(Math.random() * allIdx.length);\n        current.push(allIdx[randi]);\n        allIdx.splice(randi, 1);\n        if (current.length === l) {\n            folds.push(current);\n            current = [];\n        }\n    }\n    if (current.length) folds.push(current);\n    folds = folds.slice(0, k);\n\n\n    for (i = 0; i < folds.length; i++) {\n        var testIdx = folds[i];\n        var trainIdx = [];\n        for (var j = 0; j < folds.length; j++) {\n            if (j !== i) trainIdx = trainIdx.concat(folds[j]);\n        }\n\n        if (callback) {\n            validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback);\n        } else {\n            validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);\n        }\n    }\n\n    return new ConfusionMatrix(confusionMatrix, distinct);\n};\n\nfunction check(features, labels) {\n    if (features.length !== labels.length) {\n        throw new Error('features and labels should have the same length');\n    }\n}\n\nfunction initMatrix(rows, columns) {\n    return new Array(rows).fill(0).map(() => new Array(columns).fill(0));\n}\n\nfunction getDistinct(arr) {\n    var s = new Set();\n    for (let i = 0; i < arr.length; i++) {\n        s.add(arr[i]);\n    }\n    return Array.from(s);\n}\n\nfunction validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct) {\n    const {testFeatures, trainFeatures, testLabels, trainLabels} = getTrainTest(features, labels, testIdx, trainIdx);\n\n    var classifier;\n    if (Classifier.prototype.train) {\n        classifier = new Classifier(classifierOptions);\n        classifier.train(trainFeatures, trainLabels);\n    } else {\n        classifier = new Classifier(trainFeatures, trainLabels, classifierOptions);\n    }\n\n    var predictedLabels = classifier.predict(testFeatures);\n    updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback) {\n    const {testFeatures, trainFeatures, testLabels, trainLabels} = getTrainTest(features, labels, testIdx, trainIdx);\n    const predictedLabels = callback(trainFeatures, trainLabels, testFeatures);\n    updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct) {\n\n    for (var i = 0; i < predictedLabels.length; i++) {\n        const actualIdx = distinct.indexOf(testLabels[i]);\n        const predictedIdx = distinct.indexOf(predictedLabels[i]);\n        if (actualIdx < 0 || predictedIdx < 0) {\n            // eslint-disable-next-line no-console\n            console.warn(`ignore unknown predicted label ${predictedLabels[i]}`);\n        }\n        confusionMatrix[actualIdx][predictedIdx]++;\n    }\n}\n\n\nfunction getTrainTest(features, labels, testIdx, trainIdx) {\n    return {\n        testFeatures: testIdx.map(function (index) {\n            return features[index];\n        }),\n        trainFeatures: trainIdx.map(function (index) {\n            return features[index];\n        }),\n        testLabels: testIdx.map(function (index) {\n            return labels[index];\n        }),\n        trainLabels: trainIdx.map(function (index) {\n            return labels[index];\n        })\n    };\n}\n\nmodule.exports = CV;\n","'use strict';\n\nvar mlMatrix = require('ml-matrix');\n\nfunction logistic(val) {\n  return 1 / (1 + Math.exp(-val));\n}\n\nfunction expELU(val, param) {\n  return val < 0 ? param * (Math.exp(val) - 1) : val;\n}\n\nfunction softExponential(val, param) {\n  if (param < 0) {\n    return -Math.log(1 - param * (val + param)) / param;\n  }\n  if (param > 0) {\n    return ((Math.exp(param * val) - 1) / param) + param;\n  }\n  return val;\n}\n\nfunction softExponentialPrime(val, param) {\n  if (param < 0) {\n    return 1 / (1 - param * (param + val));\n  } else {\n    return Math.exp(param * val);\n  }\n}\n\nconst ACTIVATION_FUNCTIONS = {\n  tanh: {\n    activation: Math.tanh,\n    derivate: (val) => 1 - (val * val)\n  },\n  identity: {\n    activation: (val) => val,\n    derivate: () => 1\n  },\n  logistic: {\n    activation: logistic,\n    derivate: (val) => logistic(val) * (1 - logistic(val))\n  },\n  arctan: {\n    activation: Math.atan,\n    derivate: (val) => 1 / (val * val + 1)\n  },\n  softsign: {\n    activation: (val) => val / (1 + Math.abs(val)),\n    derivate: (val) => 1 / ((1 + Math.abs(val)) * (1 + Math.abs(val)))\n  },\n  relu: {\n    activation: (val) => (val < 0 ? 0 : val),\n    derivate: (val) => (val < 0 ? 0 : 1)\n  },\n  softplus: {\n    activation: (val) => Math.log(1 + Math.exp(val)),\n    derivate: (val) => 1 / (1 + Math.exp(-val))\n  },\n  bent: {\n    activation: (val) => ((Math.sqrt(val * val + 1) - 1) / 2) + val,\n    derivate: (val) => (val / (2 * Math.sqrt(val * val + 1))) + 1\n  },\n  sinusoid: {\n    activation: Math.sin,\n    derivate: Math.cos\n  },\n  sinc: {\n    activation: (val) => (val === 0 ? 1 : Math.sin(val) / val),\n    derivate: (val) => (val === 0 ? 0 : (Math.cos(val) / val) - (Math.sin(val) / (val * val)))\n  },\n  gaussian: {\n    activation: (val) => Math.exp(-(val * val)),\n    derivate: (val) => -2 * val * Math.exp(-(val * val))\n  },\n  'parametric-relu': {\n    activation: (val, param) => (val < 0 ? param * val : val),\n    derivate: (val, param) => (val < 0 ? param : 1)\n  },\n  'exponential-elu': {\n    activation: expELU,\n    derivate: (val, param) => (val < 0 ? expELU(val, param) + param : 1)\n  },\n  'soft-exponential': {\n    activation: softExponential,\n    derivate: softExponentialPrime\n  }\n};\n\nclass Layer {\n  /**\n     * @private\n     * Create a new layer with the given options\n     * @param {object} options\n     * @param {number} [options.inputSize] - Number of conections that enter the neurons.\n     * @param {number} [options.outputSize] - Number of conections that leave the neurons.\n     * @param {number} [options.regularization] - Regularization parameter.\n     * @param {number} [options.epsilon] - Learning rate parameter.\n     * @param {string} [options.activation] - Activation function parameter from the FeedForwardNeuralNetwork class.\n     * @param {number} [options.activationParam] - Activation parameter if needed.\n     */\n  constructor(options) {\n    this.inputSize = options.inputSize;\n    this.outputSize = options.outputSize;\n    this.regularization = options.regularization;\n    this.epsilon = options.epsilon;\n    this.activation = options.activation;\n    this.activationParam = options.activationParam;\n\n    var selectedFunction = ACTIVATION_FUNCTIONS[options.activation];\n    var params = selectedFunction.activation.length;\n\n    var actFunction = params > 1 ? (val) => selectedFunction.activation(val, options.activationParam) : selectedFunction.activation;\n    var derFunction = params > 1 ? (val) => selectedFunction.derivate(val, options.activationParam) : selectedFunction.derivate;\n\n    this.activationFunction = function (i, j) {\n      this.set(i, j, actFunction(this.get(i, j)));\n    };\n    this.derivate = function (i, j) {\n      this.set(i, j, derFunction(this.get(i, j)));\n    };\n\n    if (options.model) {\n      // load model\n      this.W = mlMatrix.Matrix.checkMatrix(options.W);\n      this.b = mlMatrix.Matrix.checkMatrix(options.b);\n    } else {\n      // default constructor\n      this.W = mlMatrix.Matrix.rand(this.inputSize, this.outputSize);\n      this.b = mlMatrix.Matrix.zeros(1, this.outputSize);\n\n      this.W.apply(function (i, j) {\n        this.set(i, j, this.get(i, j) / Math.sqrt(options.inputSize));\n      });\n    }\n  }\n\n  /**\n     * @private\n     * propagate the given input through the current layer.\n     * @param {Matrix} X - input.\n     * @return {Matrix} output at the current layer.\n     */\n  forward(X) {\n    var z = X.mmul(this.W).addRowVector(this.b);\n    z.apply(this.activationFunction);\n    this.a = z.clone();\n    return z;\n  }\n\n  /**\n     * @private\n     * apply backpropagation algorithm at the current layer\n     * @param {Matrix} delta - delta values estimated at the following layer.\n     * @param {Matrix} a - 'a' values from the following layer.\n     * @return {Matrix} the new delta values for the next layer.\n     */\n  backpropagation(delta, a) {\n    this.dW = a.transpose().mmul(delta);\n    this.db = mlMatrix.Matrix.rowVector(delta.sum('column'));\n\n    var aCopy = a.clone();\n    return delta.mmul(this.W.transpose()).mul(aCopy.apply(this.derivate));\n  }\n\n  /**\n     * @private\n     * Function that updates the weights at the current layer with the derivatives.\n     */\n  update() {\n    this.dW.add(this.W.clone().mul(this.regularization));\n    this.W.add(this.dW.mul(-this.epsilon));\n    this.b.add(this.db.mul(-this.epsilon));\n  }\n\n  /**\n     * @private\n     * Export the current layer to JSON.\n     * @return {object} model\n     */\n  toJSON() {\n    return {\n      model: 'Layer',\n      inputSize: this.inputSize,\n      outputSize: this.outputSize,\n      regularization: this.regularization,\n      epsilon: this.epsilon,\n      activation: this.activation,\n      W: this.W,\n      b: this.b\n    };\n  }\n\n  /**\n     * @private\n     * Creates a new Layer with the given model.\n     * @param {object} model\n     * @return {Layer}\n     */\n  static load(model) {\n    if (model.model !== 'Layer') {\n      throw new RangeError('the current model is not a Layer model');\n    }\n    return new Layer(model);\n  }\n}\n\nclass OutputLayer extends Layer {\n  constructor(options) {\n    super(options);\n\n    this.activationFunction = function (i, j) {\n      this.set(i, j, Math.exp(this.get(i, j)));\n    };\n  }\n\n  static load(model) {\n    if (model.model !== 'Layer') {\n      throw new RangeError('the current model is not a Layer model');\n    }\n\n    return new OutputLayer(model);\n  }\n}\n\nclass FeedForwardNeuralNetworks {\n  /**\n   * Create a new Feedforward neural network model.\n   * @class FeedForwardNeuralNetworks\n   * @param {object} [options]\n   * @param {Array} [options.hiddenLayers=[10]] - Array that contains the sizes of the hidden layers.\n   * @param {number} [options.iterations=50] - Number of iterations at the training step.\n   * @param {number} [options.learningRate=0.01] - Learning rate of the neural net (also known as epsilon).\n   * @param {number} [options.regularization=0.01] - Regularization parameter af the neural net.\n   * @param {string} [options.activation='tanh'] - activation function to be used. (options: 'tanh'(default),\n   * 'identity', 'logistic', 'arctan', 'softsign', 'relu', 'softplus', 'bent', 'sinusoid', 'sinc', 'gaussian').\n   * (single-parametric options: 'parametric-relu', 'exponential-relu', 'soft-exponential').\n   * @param {number} [options.activationParam=1] - if the selected activation function needs a parameter.\n   */\n  constructor(options) {\n    options = options || {};\n    if (options.model) {\n      // load network\n      this.hiddenLayers = options.hiddenLayers;\n      this.iterations = options.iterations;\n      this.learningRate = options.learningRate;\n      this.regularization = options.regularization;\n      this.dicts = options.dicts;\n      this.activation = options.activation;\n      this.activationParam = options.activationParam;\n      this.model = new Array(options.layers.length);\n\n      for (var i = 0; i < this.model.length - 1; ++i) {\n        this.model[i] = Layer.load(options.layers[i]);\n      }\n      this.model[this.model.length - 1] = OutputLayer.load(options.layers[this.model.length - 1]);\n    } else {\n      // default constructor\n      this.hiddenLayers = options.hiddenLayers || [10];\n      this.iterations = options.iterations || 50;\n\n      this.learningRate = options.learningRate || 0.01;\n      this.regularization = options.regularization || 0.01;\n\n      this.activation = options.activation || 'tanh';\n      this.activationParam = options.activationParam || 1;\n      if (!(this.activation in Object.keys(ACTIVATION_FUNCTIONS))) {\n        this.activation = 'tanh';\n      }\n    }\n  }\n\n  /**\n   * @private\n   * Function that build and initialize the neural net.\n   * @param {number} inputSize - total of features to fit.\n   * @param {number} outputSize - total of labels of the prediction set.\n   */\n  buildNetwork(inputSize, outputSize) {\n    var size = 2 + (this.hiddenLayers.length - 1);\n    this.model = new Array(size);\n\n    // input layer\n    this.model[0] = new Layer({\n      inputSize: inputSize,\n      outputSize: this.hiddenLayers[0],\n      activation: this.activation,\n      activationParam: this.activationParam,\n      regularization: this.regularization,\n      epsilon: this.learningRate\n    });\n\n    // hidden layers\n    for (var i = 1; i < this.hiddenLayers.length; ++i) {\n      this.model[i] = new Layer({\n        inputSize: this.hiddenLayers[i - 1],\n        outputSize: this.hiddenLayers[i],\n        activation: this.activation,\n        activationParam: this.activationParam,\n        regularization: this.regularization,\n        epsilon: this.learningRate\n      });\n    }\n\n    // output layer\n    this.model[size - 1] = new OutputLayer({\n      inputSize: this.hiddenLayers[this.hiddenLayers.length - 1],\n      outputSize: outputSize,\n      activation: this.activation,\n      activationParam: this.activationParam,\n      regularization: this.regularization,\n      epsilon: this.learningRate\n    });\n  }\n\n  /**\n   * Train the neural net with the given features and labels.\n   * @param {Matrix|Array} features\n   * @param {Matrix|Array} labels\n   */\n  train(features, labels) {\n    features = mlMatrix.Matrix.checkMatrix(features);\n    this.dicts = dictOutputs(labels);\n\n    var inputSize = features.columns;\n    var outputSize = Object.keys(this.dicts.inputs).length;\n\n    if (!this.model) {\n      this.buildNetwork(inputSize, outputSize);\n    }\n\n    for (var i = 0; i < this.iterations; ++i) {\n      var probabilities = this.propagate(features);\n      this.backpropagation(features, labels, probabilities);\n    }\n  }\n\n  /**\n   * @private\n   * Propagate the input(training set) and retrives the probabilities of each class.\n   * @param {Matrix} X\n   * @return {Matrix} probabilities of each class.\n   */\n  propagate(X) {\n    var input = X;\n    for (var i = 0; i < this.model.length; ++i) {\n      input = this.model[i].forward(input);\n    }\n\n    // get probabilities\n    return input.divColumnVector(input.sum('row'));\n  }\n\n  /**\n   * @private\n   * Function that applies the backpropagation algorithm on each layer of the network\n   * in order to fit the features and labels.\n   * @param {Matrix} features\n   * @param {Array} labels\n   * @param {Matrix} probabilities - probabilities of each class of the feature set.\n   */\n  backpropagation(features, labels, probabilities) {\n    for (var i = 0; i < probabilities.rows; ++i) {\n      probabilities.set(i, this.dicts.inputs[labels[i]], probabilities.get(i, this.dicts.inputs[labels[i]]) - 1);\n    }\n\n    // remember, the last delta doesn't matter\n    var delta = probabilities;\n    for (i = this.model.length - 1; i >= 0; --i) {\n      var a = i > 0 ? this.model[i - 1].a : features;\n      delta = this.model[i].backpropagation(delta, a);\n    }\n\n    for (i = 0; i < this.model.length; ++i) {\n      this.model[i].update();\n    }\n  }\n\n  /**\n   * Predict the output given the feature set.\n   * @param {Array|Matrix} features\n   * @return {Array}\n   */\n  predict(features) {\n    features = mlMatrix.Matrix.checkMatrix(features);\n    var outputs = new Array(features.rows);\n    var probabilities = this.propagate(features);\n    for (var i = 0; i < features.rows; ++i) {\n      outputs[i] = this.dicts.outputs[probabilities.maxRowIndex(i)[1]];\n    }\n\n    return outputs;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} model\n   */\n  toJSON() {\n    var model = {\n      model: 'FNN',\n      hiddenLayers: this.hiddenLayers,\n      iterations: this.iterations,\n      learningRate: this.learningRate,\n      regularization: this.regularization,\n      activation: this.activation,\n      activationParam: this.activationParam,\n      dicts: this.dicts,\n      layers: new Array(this.model.length)\n    };\n\n    for (var i = 0; i < this.model.length; ++i) {\n      model.layers[i] = this.model[i].toJSON();\n    }\n\n    return model;\n  }\n\n  /**\n   * Load a Feedforward Neural Network with the current model.\n   * @param {object} model\n   * @return {FeedForwardNeuralNetworks}\n   */\n  static load(model) {\n    if (model.model !== 'FNN') {\n      throw new RangeError('the current model is not a feed forward network');\n    }\n\n    return new FeedForwardNeuralNetworks(model);\n  }\n}\n\n/**\n * @private\n * Method that given an array of labels(predictions), returns two dictionaries, one to transform from labels to\n * numbers and other in the reverse way\n * @param {Array} array\n * @return {object}\n */\nfunction dictOutputs(array) {\n  var inputs = {};\n  var outputs = {};\n  var index = 0;\n  for (var i = 0; i < array.length; i += 1) {\n    if (inputs[array[i]] === undefined) {\n      inputs[array[i]] = index;\n      outputs[index] = array[i];\n      index++;\n    }\n  }\n\n  return {\n    inputs: inputs,\n    outputs: outputs\n  };\n}\n\nmodule.exports = FeedForwardNeuralNetworks;\n","function NodeSquare(x, y, weights, som) {\n    this.x = x;\n    this.y = y;\n    this.weights = weights;\n    this.som = som;\n    this.neighbors = {};\n}\n\nNodeSquare.prototype.adjustWeights = function adjustWeights(target, learningRate, influence) {\n    for (var i = 0, ii = this.weights.length; i < ii; i++) {\n        this.weights[i] += learningRate * influence * (target[i] - this.weights[i]);\n    }\n};\n\nNodeSquare.prototype.getDistance = function getDistance(otherNode) {\n    return Math.max(Math.abs(this.x - otherNode.x), Math.abs(this.y - otherNode.y));\n};\n\nNodeSquare.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.x - otherNode.x),\n        distY = Math.abs(this.y - otherNode.y);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY));\n};\n\nNodeSquare.prototype.getNeighbors = function getNeighbors(xy) {\n    if (!this.neighbors[xy]) {\n        this.neighbors[xy] = new Array(2);\n\n        // left or bottom neighbor\n        var v;\n        if (this[xy] > 0) {\n            v = this[xy] - 1;\n        } else if (this.som.torus) {\n            v = this.som.gridDim[xy] - 1\n        }\n        if (typeof v !== 'undefined') {\n            var x, y;\n            if (xy === 'x') {\n                x = v;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = v;\n            }\n            this.neighbors[xy][0] = this.som.nodes[x][y];\n        }\n\n        // top or right neighbor\n        var w;\n        if (this[xy] < (this.som.gridDim[xy] - 1)) {\n            w = this[xy] + 1;\n        } else if (this.som.torus) {\n            w = 0;\n        }\n        if (typeof w !== 'undefined') {\n            if (xy === 'x') {\n                x = w;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = w;\n            }\n            this.neighbors[xy][1] = this.som.nodes[x][y];\n        }\n    }\n    return this.neighbors[xy];\n};\n\nNodeSquare.prototype.getPos = function getPos(xy, element) {\n    var neighbors = this.getNeighbors(xy),\n        distance = this.som.distance,\n        bestNeighbor,\n        direction;\n    if(neighbors[0]) {\n        if (neighbors[1]) {\n            var dist1 = distance(element, neighbors[0].weights),\n                dist2 = distance(element, neighbors[1].weights);\n            if(dist1 < dist2) {\n                bestNeighbor = neighbors[0];\n                direction = -1;\n            } else {\n                bestNeighbor = neighbors[1];\n                direction = 1;\n            }\n        } else {\n            bestNeighbor = neighbors[0];\n            direction = -1;\n        }\n    } else {\n        bestNeighbor = neighbors[1];\n        direction = 1;\n    }\n    var simA = 1 - distance(element, this.weights),\n        simB = 1 - distance(element, bestNeighbor.weights);\n    var factor = ((simA - simB) / (2 - simA - simB));\n    return 0.5 + 0.5 * factor * direction;\n};\n\nNodeSquare.prototype.getPosition = function getPosition(element) {\n    return [\n        this.getPos('x', element),\n        this.getPos('y', element)\n    ];\n};\n\nmodule.exports = NodeSquare;","var NodeSquare = require('./node-square');\n\nfunction NodeHexagonal(x, y, weights, som) {\n\n    NodeSquare.call(this, x, y, weights, som);\n\n    this.hX = x - Math.floor(y / 2);\n    this.z = 0 - this.hX - y;\n\n}\n\nNodeHexagonal.prototype = new NodeSquare;\nNodeHexagonal.prototype.constructor = NodeHexagonal;\n\nNodeHexagonal.prototype.getDistance = function getDistanceHexagonal(otherNode) {\n    return Math.max(Math.abs(this.hX - otherNode.hX), Math.abs(this.y - otherNode.y), Math.abs(this.z - otherNode.z));\n};\n\nNodeHexagonal.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.hX - otherNode.hX),\n        distY = Math.abs(this.y - otherNode.y),\n        distZ = Math.abs(this.z - otherNode.z);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY), Math.min(distZ, this.som.gridDim.z - distZ));\n};\n\nNodeHexagonal.prototype.getPosition = function getPosition() {\n    throw new Error('Unimplemented : cannot get position of the points for hexagonal grid');\n};\n\nmodule.exports = NodeHexagonal;","'use strict';\n\nvar NodeSquare = require('./node-square'),\n    NodeHexagonal = require('./node-hexagonal');\n\nvar defaultOptions = {\n    fields: 3,\n    randomizer: Math.random,\n    distance: squareEuclidean,\n    iterations: 10,\n    learningRate: 0.1,\n    gridType: 'rect',\n    torus: true,\n    method: 'random'\n};\n\nfunction SOM(x, y, options, reload) {\n\n    this.x = x;\n    this.y = y;\n\n    options = options || {};\n    this.options = {};\n    for (var i in defaultOptions) {\n        if (options.hasOwnProperty(i)) {\n            this.options[i] = options[i];\n        } else {\n            this.options[i] = defaultOptions[i];\n        }\n    }\n\n    if (typeof this.options.fields === 'number') {\n        this.numWeights = this.options.fields;\n    } else if (Array.isArray(this.options.fields)) {\n        this.numWeights = this.options.fields.length;\n        var converters = getConverters(this.options.fields);\n        this.extractor = converters.extractor;\n        this.creator = converters.creator;\n    } else {\n        throw new Error('Invalid fields definition');\n    }\n\n    if (this.options.gridType === 'rect') {\n        this.nodeType = NodeSquare;\n        this.gridDim = {\n            x: x,\n            y: y\n        };\n    } else {\n        this.nodeType = NodeHexagonal;\n        var hx = this.x - Math.floor(this.y / 2);\n        this.gridDim = {\n            x: hx,\n            y: this.y,\n            z: -(0 - hx - this.y)\n        };\n    }\n\n    this.torus = this.options.torus;\n    this.distanceMethod = this.torus ? 'getDistanceTorus' : 'getDistance';\n\n    this.distance = this.options.distance;\n\n    this.maxDistance = getMaxDistance(this.distance, this.numWeights);\n\n    if (reload === true) { // For model loading\n        this.done = true;\n        return;\n    }\n    if (!(x > 0 && y > 0)) {\n        throw new Error('x and y must be positive');\n    }\n\n    this.times = {\n        findBMU: 0,\n        adjust: 0\n    };\n\n    this.randomizer = this.options.randomizer;\n\n    this.iterationCount = 0;\n    this.iterations = this.options.iterations;\n\n    this.startLearningRate = this.learningRate = this.options.learningRate;\n\n    this.mapRadius = Math.floor(Math.max(x, y) / 2);\n\n    this.algorithmMethod = this.options.method;\n\n    this._initNodes();\n\n    this.done = false;\n}\n\nSOM.load = function loadModel(model, distance) {\n    if (model.name === 'SOM') {\n        var x = model.data.length,\n            y = model.data[0].length;\n        if (distance) {\n            model.options.distance = distance;\n        } else if (model.options.distance) {\n            model.options.distance = eval('(' + model.options.distance + ')');\n        }\n        var som = new SOM(x, y, model.options, true);\n        som.nodes = new Array(x);\n        for (var i = 0; i < x; i++) {\n            som.nodes[i] = new Array(y);\n            for (var j = 0; j < y; j++) {\n                som.nodes[i][j] = new som.nodeType(i, j, model.data[i][j], som);\n            }\n        }\n        return som;\n    } else {\n        throw new Error('expecting a SOM model');\n    }\n};\n\nSOM.prototype.export = function exportModel(includeDistance) {\n    if (!this.done) {\n        throw new Error('model is not ready yet');\n    }\n    var model = {\n        name: 'SOM'\n    };\n    model.options = {\n        fields: this.options.fields,\n        gridType: this.options.gridType,\n        torus: this.options.torus\n    };\n    model.data = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        model.data[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            model.data[i][j] = this.nodes[i][j].weights;\n        }\n    }\n    if (includeDistance) {\n        model.options.distance = this.distance.toString();\n    }\n    return model;\n};\n\nSOM.prototype._initNodes = function initNodes() {\n    var now = Date.now(),\n        i, j, k;\n    this.nodes = new Array(this.x);\n    for (i = 0; i < this.x; i++) {\n        this.nodes[i] = new Array(this.y);\n        for (j = 0; j < this.y; j++) {\n            var weights = new Array(this.numWeights);\n            for (k = 0; k < this.numWeights; k++) {\n                weights[k] = this.randomizer();\n            }\n            this.nodes[i][j] = new this.nodeType(i, j, weights, this);\n        }\n    }\n    this.times.initNodes = Date.now() - now;\n};\n\nSOM.prototype.setTraining = function setTraining(trainingSet) {\n    if (this.trainingSet) {\n        throw new Error('training set has already been set');\n    }\n    var now = Date.now();\n    var convertedSet = trainingSet;\n    var i, l = trainingSet.length;\n    if (this.extractor) {\n        convertedSet = new Array(l);\n        for (i = 0; i < l; i++) {\n            convertedSet[i] = this.extractor(trainingSet[i]);\n        }\n    }\n    this.numIterations = this.iterations * l;\n\n    if (this.algorithmMethod === 'random') {\n        this.timeConstant = this.numIterations / Math.log(this.mapRadius);\n    } else {\n        this.timeConstant = l / Math.log(this.mapRadius);\n    }\n    this.trainingSet = convertedSet;\n    this.times.setTraining = Date.now() - now;\n};\n\nSOM.prototype.trainOne = function trainOne() {\n    if (this.done) {\n\n        return false;\n\n    } else if (this.numIterations-- > 0) {\n\n        var neighbourhoodRadius,\n            trainingValue,\n            trainingSetFactor;\n\n        if (this.algorithmMethod === 'random') { // Pick a random value of the training set at each step\n            neighbourhoodRadius = this.mapRadius * Math.exp(-this.iterationCount / this.timeConstant);\n            trainingValue = getRandomValue(this.trainingSet, this.randomizer);\n            this._adjust(trainingValue, neighbourhoodRadius);\n            this.learningRate = this.startLearningRate * Math.exp(-this.iterationCount / this.numIterations);\n        } else { // Get next input vector\n            trainingSetFactor = -Math.floor(this.iterationCount / this.trainingSet.length);\n            neighbourhoodRadius = this.mapRadius * Math.exp(trainingSetFactor / this.timeConstant);\n            trainingValue = this.trainingSet[this.iterationCount % this.trainingSet.length];\n            this._adjust(trainingValue, neighbourhoodRadius);\n            if (((this.iterationCount + 1) % this.trainingSet.length) === 0) {\n                this.learningRate = this.startLearningRate * Math.exp(trainingSetFactor / Math.floor(this.numIterations / this.trainingSet.length));\n            }\n        }\n\n        this.iterationCount++;\n\n        return true;\n\n    } else {\n\n        this.done = true;\n        return false;\n\n    }\n};\n\nSOM.prototype._adjust = function adjust(trainingValue, neighbourhoodRadius) {\n    var now = Date.now(),\n        x, y, dist, influence;\n\n    var bmu = this._findBestMatchingUnit(trainingValue);\n\n    var now2 = Date.now();\n    this.times.findBMU += now2 - now;\n\n    var radiusLimit = Math.floor(neighbourhoodRadius);\n    var xMin = bmu.x - radiusLimit,\n        xMax = bmu.x + radiusLimit,\n        yMin = bmu.y - radiusLimit,\n        yMax = bmu.y + radiusLimit;\n\n    for (x = xMin; x <= xMax; x++) {\n        var theX = x;\n        if (x < 0) {\n            theX += this.x;\n        } else if (x >= this.x) {\n            theX -= this.x;\n        }\n        for (y = yMin; y <= yMax; y++) {\n            var theY = y;\n            if (y < 0) {\n                theY += this.y;\n            } else if (y >= this.y) {\n                theY -= this.y;\n            }\n\n            dist = bmu[this.distanceMethod](this.nodes[theX][theY]);\n\n            if (dist < neighbourhoodRadius) {\n                influence = Math.exp(-dist / (2 * neighbourhoodRadius));\n                this.nodes[theX][theY].adjustWeights(trainingValue, this.learningRate, influence);\n            }\n\n        }\n    }\n\n    this.times.adjust += (Date.now() - now2);\n\n};\n\nSOM.prototype.train = function train(trainingSet) {\n    if (!this.done) {\n        this.setTraining(trainingSet);\n        while (this.trainOne()) {\n        }\n    }\n};\n\nSOM.prototype.getConvertedNodes = function getConvertedNodes() {\n    var result = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        result[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            var node = this.nodes[i][j];\n            result[i][j] = this.creator ? this.creator(node.weights) : node.weights;\n        }\n    }\n    return result;\n};\n\nSOM.prototype._findBestMatchingUnit = function findBestMatchingUnit(candidate) {\n\n    var bmu,\n        lowest = Infinity,\n        dist;\n\n    for (var i = 0; i < this.x; i++) {\n        for (var j = 0; j < this.y; j++) {\n            dist = this.distance(this.nodes[i][j].weights, candidate);\n            if (dist < lowest) {\n                lowest = dist;\n                bmu = this.nodes[i][j];\n            }\n        }\n    }\n\n    return bmu;\n\n};\n\nSOM.prototype.predict = function predict(data, computePosition) {\n    if (typeof data === 'boolean') {\n        computePosition = data;\n        data = null;\n    }\n    if (!data) {\n        data = this.trainingSet;\n    }\n    if (Array.isArray(data) && (Array.isArray(data[0]) || (typeof data[0] === 'object'))) { // predict a dataset\n        var self = this;\n        return data.map(function (element) {\n            return self._predict(element, computePosition);\n        });\n    } else { // predict a single element\n        return this._predict(data, computePosition);\n    }\n};\n\nSOM.prototype._predict = function _predict(element, computePosition) {\n    if (!Array.isArray(element)) {\n        element = this.extractor(element);\n    }\n    var bmu = this._findBestMatchingUnit(element);\n    var result = [bmu.x, bmu.y];\n    if (computePosition) {\n        result[2] = bmu.getPosition(element);\n    }\n    return result;\n};\n\n// As seen in http://www.scholarpedia.org/article/Kohonen_network\nSOM.prototype.getQuantizationError = function getQuantizationError() {\n    var fit = this.getFit(),\n        l = fit.length,\n        sum = 0;\n    for (var i = 0; i < l; i++) {\n        sum += fit[i];\n    }\n    return sum / l;\n};\n\nSOM.prototype.getFit = function getFit(dataset) {\n    if (!dataset) {\n        dataset = this.trainingSet;\n    }\n    var l = dataset.length,\n        bmu,\n        result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        bmu = this._findBestMatchingUnit(dataset[i]);\n        result[i] = Math.sqrt(this.distance(dataset[i], bmu.weights));\n    }\n    return result;\n};\n\nfunction getConverters(fields) {\n    var l = fields.length,\n        normalizers = new Array(l),\n        denormalizers = new Array(l);\n    for (var i = 0; i < l; i++) {\n        normalizers[i] = getNormalizer(fields[i].range);\n        denormalizers[i] = getDenormalizer(fields[i].range);\n    }\n    return {\n        extractor: function extractor(value) {\n            var result = new Array(l);\n            for (var i = 0; i < l; i++) {\n                result[i] = normalizers[i](value[fields[i].name]);\n            }\n            return result;\n        },\n        creator: function creator(value) {\n            var result = {};\n            for (var i = 0; i < l; i++) {\n                result[fields[i].name] = denormalizers[i](value[i]);\n            }\n            return result;\n        }\n    };\n}\n\nfunction getNormalizer(minMax) {\n    return function normalizer(value) {\n        return (value - minMax[0]) / (minMax[1] - minMax[0]);\n    };\n}\n\nfunction getDenormalizer(minMax) {\n    return function denormalizer(value) {\n        return (minMax[0] + value * (minMax[1] - minMax[0]));\n    };\n}\n\nfunction squareEuclidean(a, b) {\n    var d = 0;\n    for (var i = 0, ii = a.length; i < ii; i++) {\n        d += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return d;\n}\n\nfunction getRandomValue(arr, randomizer) {\n    return arr[Math.floor(randomizer() * arr.length)];\n}\n\nfunction getMaxDistance(distance, numWeights) {\n    var zero = new Array(numWeights),\n        one = new Array(numWeights);\n    for (var i = 0; i < numWeights; i++) {\n        zero[i] = 0;\n        one[i] = 1;\n    }\n    return distance(zero, one);\n}\n\nmodule.exports = SOM;","export default function maybeToPrecision(value, digits) {\n  if (value < 0) {\n    value = 0 - value;\n    if (typeof digits === 'number') {\n      return `- ${value.toPrecision(digits)}`;\n    } else {\n      return `- ${value.toString()}`;\n    }\n  } else {\n    if (typeof digits === 'number') {\n      return value.toPrecision(digits);\n    } else {\n      return value.toString();\n    }\n  }\n}\n","export default function checkArraySize(x, y) {\n  if (!Array.isArray(x) || !Array.isArray(y)) {\n    throw new TypeError('x and y must be arrays');\n  }\n  if (x.length !== y.length) {\n    throw new RangeError('x and y arrays must have the same length');\n  }\n}\n","export { default as maybeToPrecision } from './maybeToPrecision';\nexport { default as checkArrayLength } from './checkArrayLength';\n\nexport default class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n\n  predict(x) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (Array.isArray(x)) {\n      const y = [];\n      for (let i = 0; i < x.length; i++) {\n        y.push(this._predict(x[i]));\n      }\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n\n  _predict() {\n    throw new Error('_predict must be implemented');\n  }\n\n  train() {\n    // Do nothing for this package\n  }\n\n  toString() {\n    return '';\n  }\n\n  toLaTeX() {\n    return '';\n  }\n\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param {Array<number>} x\n   * @param {Array<number>} y\n   * @return {object}\n   */\n  score(x, y) {\n    if (!Array.isArray(x) || !Array.isArray(y) || x.length !== y.length) {\n      throw new Error('x and y must be arrays of the same length');\n    }\n\n    const n = x.length;\n    const y2 = new Array(n);\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n      if (y[i] !== 0) {\n        chi2 += ((y[i] - y2[i]) * (y[i] - y2[i])) / y[i];\n      }\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n\n    const r =\n      (n * xY - xSum * ySum) /\n      Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n\n    return {\n      r: r,\n      r2: r * r,\n      chi2: chi2,\n      rmsd: Math.sqrt(rmsd / n)\n    };\n  }\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\n\nexport default class PolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y, degree);\n    }\n  }\n\n  _predict(x) {\n    let y = 0;\n    for (let k = 0; k < this.powers.length; k++) {\n      y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n    }\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str =\n              `${maybeToPrecision(this.coefficients[k], precision) + times}x`;\n          } else {\n            str =\n              `${maybeToPrecision(this.coefficients[k], precision) +\n              times\n              }x${\n                sup\n              }${this.powers[k]\n              }${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'polynomialRegression') {\n      throw new TypeError('not a polynomial regression model');\n    }\n    return new PolynomialRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y, degree) {\n  const n = x.length;\n  let powers;\n  if (Array.isArray(degree)) {\n    powers = degree;\n    degree = powers.length;\n  } else {\n    degree++;\n    powers = new Array(degree);\n    for (let k = 0; k < degree; k++) {\n      powers[k] = k;\n    }\n  }\n  const F = new Matrix(n, degree);\n  const Y = new Matrix([y]);\n  for (let k = 0; k < degree; k++) {\n    for (let i = 0; i < n; i++) {\n      if (powers[k] === 0) {\n        F.set(i, k, 1);\n      } else {\n        F.set(i, k, Math.pow(x[i], powers[k]));\n      }\n    }\n  }\n\n  const FT = new MatrixTransposeView(F);\n  const A = FT.mmul(F);\n  const B = FT.mmul(new MatrixTransposeView(Y));\n\n  pr.degree = degree - 1;\n  pr.powers = powers;\n  pr.coefficients = solve(A, B).to1DArray();\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\n\nexport default class SimpleLinearRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = [y.intercept, y.slope];\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(x) {\n    return this.slope * x + this.intercept;\n  }\n\n  computeX(y) {\n    return (y - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    let result = 'f(x) = ';\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n    return new SimpleLinearRegression(true, json);\n  }\n}\n\nfunction regress(slr, x, y) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n\n  let xSquared = 0;\n  let xY = 0;\n\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n\n  const numerator = n * xY - xSum * ySum;\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\n  slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;\n  slr.coefficients = [slr.intercept, slr.slope];\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class ExponentialRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(input) {\n    return this.B * Math.exp(input * this.A);\n  }\n\n  toJSON() {\n    return {\n      name: 'exponentialRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return (\n      `f(x) = ${\n        maybeToPrecision(this.B, precision)\n      } * e^(${\n        maybeToPrecision(this.A, precision)\n      } * x)`\n    );\n  }\n\n  toLaTeX(precision) {\n    if (this.A >= 0) {\n      return (\n        `f(x) = ${\n          maybeToPrecision(this.B, precision)\n        }e^{${\n          maybeToPrecision(this.A, precision)\n        }x}`\n      );\n    } else {\n      return (\n        `f(x) = \\\\frac{${\n          maybeToPrecision(this.B, precision)\n        }}{e^{${\n          maybeToPrecision(-this.A, precision)\n        }x}}`\n      );\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'exponentialRegression') {\n      throw new TypeError('not a exponential regression model');\n    }\n    return new ExponentialRegression(true, json);\n  }\n}\n\nfunction regress(er, x, y) {\n  const n = x.length;\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(x, yl);\n  er.A = linear.slope;\n  er.B = Math.exp(linear.intercept);\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(newInputs) {\n    return this.A * Math.pow(newInputs, this.B);\n  }\n\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.A,\n      precision\n    )} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n\n  toLaTeX(precision) {\n    let latex = '';\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(\n        this.A,\n        precision\n      )}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(\n        this.A,\n        precision\n      )}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n    return new PowerRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}\n","import Matrix, { SVD, pseudoInverse } from 'ml-matrix';\n\nexport default class MultivariateLinearRegression {\n  constructor(x, y, options = {}) {\n    const { intercept = true, statistics = true } = options;\n    this.statistics = statistics;\n    if (x === true) {\n      this.weights = y.weights;\n      this.inputs = y.inputs;\n      this.outputs = y.outputs;\n      this.intercept = y.intercept;\n    } else {\n      x = new Matrix(x);\n      y = new Matrix(y);\n      if (intercept) {\n        x.addColumn(new Array(x.rows).fill(1));\n      }\n      let xt = x.transpose();\n      const xx = xt\n        .mmul(x);\n      const xy = xt\n        .mmul(y);\n      const invxx = new SVD(xx)\n        .inverse();\n      const beta = xy\n        .transpose()\n        .mmul(invxx)\n        .transpose();\n      this.weights = beta.to2DArray();\n      this.inputs = x.columns;\n      this.outputs = y.columns;\n      if (intercept) this.inputs--;\n      this.intercept = intercept;\n      if (statistics) {\n        /*\n         * Let's add some basic statistics about the beta's to be able to interpret them.\n         * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf\n         * validated against Excel Regression AddIn\n         * test: \"datamining statistics test\"\n         */\n        const fittedValues = x.mmul(beta);\n        const residuals = y.clone().addM(fittedValues.neg());\n        const variance =\n          residuals\n            .to2DArray()\n            .map((ri) => Math.pow(ri[0], 2))\n            .reduce((a, b) => a + b) /\n          (y.rows - x.columns);\n        this.stdError = Math.sqrt(variance);\n        this.stdErrorMatrix = pseudoInverse(xx).mul(variance);\n        this.stdErrors = this.stdErrorMatrix\n          .diagonal()\n          .map((d) => Math.sqrt(d));\n        this.tStats = this.weights.map((d, i) =>\n          (this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i])\n        );\n      }\n    }\n  }\n\n  predict(x) {\n    if (Array.isArray(x)) {\n      if (typeof x[0] === 'number') {\n        return this._predict(x);\n      } else if (Array.isArray(x[0])) {\n        const y = new Array(x.length);\n        for (let i = 0; i < x.length; i++) {\n          y[i] = this._predict(x[i]);\n        }\n        return y;\n      }\n    } else if (Matrix.isMatrix(x)) {\n      const y = new Matrix(x.rows, this.outputs);\n      for (let i = 0; i < x.rows; i++) {\n        y.setRow(i, this._predict(x.getRow(i)));\n      }\n      return y;\n    }\n    throw new TypeError('x must be a matrix or array of numbers');\n  }\n\n  _predict(x) {\n    const result = new Array(this.outputs);\n    if (this.intercept) {\n      for (let i = 0; i < this.outputs; i++) {\n        result[i] = this.weights[this.inputs][i];\n      }\n    } else {\n      result.fill(0);\n    }\n    for (let i = 0; i < this.inputs; i++) {\n      for (let j = 0; j < this.outputs; j++) {\n        result[j] += this.weights[i][j] * x[i];\n      }\n    }\n    return result;\n  }\n\n  score() {\n    throw new Error('score method is not implemented yet');\n  }\n\n  toJSON() {\n    return {\n      name: 'multivariateLinearRegression',\n      weights: this.weights,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      intercept: this.intercept,\n      summary: this.statistics\n        ? {\n          regressionStatistics: {\n            standardError: this.stdError,\n            observations: this.outputs\n          },\n          variables: this.weights.map((d, i) => {\n            return {\n              label:\n                  i === this.weights.length - 1\n                    ? 'Intercept'\n                    : `X Variable ${i + 1}`,\n              coefficients: d,\n              standardError: this.stdErrors[i],\n              tStat: this.tStats[i]\n            };\n          })\n        }\n        : undefined\n    };\n  }\n\n  static load(model) {\n    if (model.name !== 'multivariateLinearRegression') {\n      throw new Error('not a MLR model');\n    }\n    return new MultivariateLinearRegression(true, model);\n  }\n}\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass GaussianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = GaussianKernel;\n","'use strict';\n\nconst defaultOptions = {\n  degree: 1,\n  constant: 1,\n  scale: 1\n};\n\nclass PolynomialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n\n    this.degree = options.degree;\n    this.constant = options.constant;\n    this.scale = options.scale;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.pow(this.scale * sum + this.constant, this.degree);\n  }\n}\n\nmodule.exports = PolynomialKernel;\n","'use strict';\n\nconst defaultOptions = {\n  alpha: 0.01,\n  constant: -Math.E\n};\n\nclass SigmoidKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.alpha = options.alpha;\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.tanh(this.alpha * sum + this.constant);\n  }\n}\n\nmodule.exports = SigmoidKernel;\n","'use strict';\n\nconst defaultOptions = {\n  sigma: 1,\n  degree: 1\n};\n\nclass ANOVAKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.degree = options.degree;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    var len = Math.min(x.length, y.length);\n    for (var i = 1; i <= len; ++i) {\n      sum += Math.pow(\n        Math.exp(\n          -this.sigma *\n            Math.pow(Math.pow(x[i - 1], i) - Math.pow(y[i - 1], i), 2)\n        ),\n        this.degree\n      );\n    }\n    return sum;\n  }\n}\n\nmodule.exports = ANOVAKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass CauchyKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    return 1 / (1 + squaredEuclidean(x, y) / (this.sigma * this.sigma));\n  }\n}\n\nmodule.exports = CauchyKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass ExponentialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = ExponentialKernel;\n","'use strict';\n\nclass HistogramIntersectionKernel {\n  compute(x, y) {\n    var min = Math.min(x.length, y.length);\n    var sum = 0;\n    for (var i = 0; i < min; ++i) {\n      sum += Math.min(x[i], y[i]);\n    }\n\n    return sum;\n  }\n}\n\nmodule.exports = HistogramIntersectionKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass LaplacianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.sigma);\n  }\n}\n\nmodule.exports = LaplacianKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass MultiquadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    return Math.sqrt(squaredEuclidean(x, y) + this.constant * this.constant);\n  }\n}\n\nmodule.exports = MultiquadraticKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass RationalQuadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return 1 - distance / (distance + this.constant);\n  }\n}\n\nmodule.exports = RationalQuadraticKernel;\n","'use strict';\n\nconst { Matrix, MatrixTransposeView } = require('ml-matrix');\nconst GaussianKernel = require('ml-kernel-gaussian');\nconst PolynomialKernel = require('ml-kernel-polynomial');\nconst SigmoidKernel = require('ml-kernel-sigmoid');\n\nconst ANOVAKernel = require('./kernels/anova-kernel');\nconst CauchyKernel = require('./kernels/cauchy-kernel');\nconst ExponentialKernel = require('./kernels/exponential-kernel');\nconst HistogramKernel = require('./kernels/histogram-intersection-kernel');\nconst LaplacianKernel = require('./kernels/laplacian-kernel');\nconst MultiquadraticKernel = require('./kernels/multiquadratic-kernel');\nconst RationalKernel = require('./kernels/rational-quadratic-kernel');\n\nconst kernelType = {\n  gaussian: GaussianKernel,\n  rbf: GaussianKernel,\n  polynomial: PolynomialKernel,\n  poly: PolynomialKernel,\n  anova: ANOVAKernel,\n  cauchy: CauchyKernel,\n  exponential: ExponentialKernel,\n  histogram: HistogramKernel,\n  min: HistogramKernel,\n  laplacian: LaplacianKernel,\n  multiquadratic: MultiquadraticKernel,\n  rational: RationalKernel,\n  sigmoid: SigmoidKernel,\n  mlp: SigmoidKernel\n};\n\nclass Kernel {\n  constructor(type, options) {\n    this.kernelType = type;\n    if (type === 'linear') return;\n\n    if (typeof type === 'string') {\n      type = type.toLowerCase();\n\n      var KernelConstructor = kernelType[type];\n      if (KernelConstructor) {\n        this.kernelFunction = new KernelConstructor(options);\n      } else {\n        throw new Error(`unsupported kernel type: ${type}`);\n      }\n    } else if (typeof type === 'object' && typeof type.compute === 'function') {\n      this.kernelFunction = type;\n    } else {\n      throw new TypeError(\n        'first argument must be a valid kernel type or instance'\n      );\n    }\n  }\n\n  compute(inputs, landmarks) {\n    inputs = Matrix.checkMatrix(inputs);\n    if (landmarks === undefined) {\n      landmarks = inputs;\n    } else {\n      landmarks = Matrix.checkMatrix(landmarks);\n    }\n    if (this.kernelType === 'linear') {\n      return inputs.mmul(new MatrixTransposeView(landmarks));\n    }\n\n    const kernelMatrix = new Matrix(inputs.rows, landmarks.rows);\n    if (inputs === landmarks) {\n      // fast path, matrix is symmetric\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = i; j < inputs.rows; j++) {\n          const value = this.kernelFunction.compute(\n            inputs.getRow(i),\n            inputs.getRow(j)\n          );\n          kernelMatrix.set(i, j, value);\n          kernelMatrix.set(j, i, value);\n        }\n      }\n    } else {\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = 0; j < landmarks.rows; j++) {\n          kernelMatrix.set(\n            i,\n            j,\n            this.kernelFunction.compute(inputs.getRow(i), landmarks.getRow(j))\n          );\n        }\n      }\n    }\n    return kernelMatrix;\n  }\n}\n\nmodule.exports = Kernel;\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport median from 'ml-array-median';\n\nexport default class TheilSenRegression extends BaseRegression {\n  /**\n   * Theil–Sen estimator\n   * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator\n   * @param {Array<number>|boolean} x\n   * @param {Array<number>|object} y\n   * @constructor\n   */\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // loads the model\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = y.coefficients;\n    } else {\n      // creates the model\n      checkArrayLength(x, y);\n      theilSen(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'TheilSenRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(input) {\n    return this.slope * input + this.intercept;\n  }\n\n  computeX(input) {\n    return (input - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    var result = 'f(x) = ';\n    if (this.slope) {\n      var xFactor = maybeToPrecision(this.slope, precision);\n      result += `${Math.abs(xFactor - 1) < 1e-5 ? '' : `${xFactor} * `}x`;\n      if (this.intercept) {\n        var absIntercept = Math.abs(this.intercept);\n        var operator = absIntercept === this.intercept ? '+' : '-';\n        result +=\n          ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'TheilSenRegression') {\n      throw new TypeError('not a Theil-Sen model');\n    }\n    return new TheilSenRegression(true, json);\n  }\n}\n\nfunction theilSen(regression, x, y) {\n  let len = x.length;\n  let slopes = new Array(len * len);\n  let count = 0;\n  for (let i = 0; i < len; ++i) {\n    for (let j = i + 1; j < len; ++j) {\n      if (x[i] !== x[j]) {\n        slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);\n      }\n    }\n  }\n  slopes.length = count;\n  let medianSlope = median(slopes);\n\n  let cuts = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    cuts[i] = y[i] - medianSlope * x[i];\n  }\n\n  regression.slope = medianSlope;\n  regression.intercept = median(cuts);\n  regression.coefficients = [regression.intercept, regression.slope];\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport { solve } from 'ml-matrix';\n\n/**\n * @class RobustPolynomialRegression\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree - polynomial degree\n */\nexport default class RobustPolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      robustPolynomial(this, x, y, degree);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'robustPolynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  _predict(x) {\n    return predict(x, this.powers, this.coefficients);\n  }\n\n  /**\n   * Display the formula\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  /**\n   * Display the formula in LaTeX format\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'robustPolynomialRegression') {\n      throw new TypeError('not a RobustPolynomialRegression model');\n    }\n    return new RobustPolynomialRegression(true, json);\n  }\n}\n\nfunction robustPolynomial(regression, x, y, degree) {\n  let powers = Array(degree)\n    .fill(0)\n    .map((_, index) => index);\n\n  const tuples = getRandomTuples(x, y, degree);\n\n  var min;\n  for (var i = 0; i < tuples.length; i++) {\n    var tuple = tuples[i];\n    var coefficients = calcCoefficients(tuple, powers);\n\n    var residuals = x.slice();\n    for (var j = 0; j < x.length; j++) {\n      residuals[j] = y[j] - predict(x[j], powers, coefficients);\n      residuals[j] = {\n        residual: residuals[j] * residuals[j],\n        coefficients\n      };\n    }\n\n    var median = residualsMedian(residuals);\n    if (!min || median.residual < min.residual) {\n      min = median;\n    }\n  }\n\n  regression.degree = degree;\n  regression.powers = powers;\n  regression.coefficients = min.coefficients;\n}\n\n/**\n * @ignore\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree\n * @return {Array<{x:number,y:number}>}\n */\nfunction getRandomTuples(x, y, degree) {\n  var len = Math.floor(x.length / degree);\n  var tuples = new Array(len);\n\n  for (var i = 0; i < x.length; i++) {\n    var pos = Math.floor(Math.random() * len);\n\n    var counter = 0;\n    while (counter < x.length) {\n      if (!tuples[pos]) {\n        tuples[pos] = [\n          {\n            x: x[i],\n            y: y[i]\n          }\n        ];\n        break;\n      } else if (tuples[pos].length < degree) {\n        tuples[pos].push({\n          x: x[i],\n          y: y[i]\n        });\n        break;\n      } else {\n        counter++;\n        pos = (pos + 1) % len;\n      }\n    }\n\n    if (counter === x.length) {\n      return tuples;\n    }\n  }\n  return tuples;\n}\n\n/**\n * @ignore\n * @param {{x:number,y:number}} tuple\n * @param {Array<number>} powers\n * @return {Array<number>}\n */\nfunction calcCoefficients(tuple, powers) {\n  var X = tuple.slice();\n  var Y = tuple.slice();\n  for (var i = 0; i < X.length; i++) {\n    Y[i] = [tuple[i].y];\n    X[i] = new Array(powers.length);\n    for (var j = 0; j < powers.length; j++) {\n      X[i][j] = Math.pow(tuple[i].x, powers[j]);\n    }\n  }\n\n  return solve(X, Y).to1DArray();\n}\n\nfunction predict(x, powers, coefficients) {\n  let y = 0;\n  for (let k = 0; k < powers.length; k++) {\n    y += coefficients[k] * Math.pow(x, powers[k]);\n  }\n  return y;\n}\n\nfunction residualsMedian(residuals) {\n  residuals.sort((a, b) => a.residual - b.residual);\n\n  var l = residuals.length;\n  var half = Math.floor(l / 2);\n  return l % 2 === 0 ? residuals[half - 1] : residuals[half];\n}\n","/**\n * Calculate current error\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} parameters - Array of current parameter values\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {number}\n */\nexport default function errorCalculation(\n  data,\n  parameters,\n  parameterizedFunction\n) {\n  var error = 0;\n  const func = parameterizedFunction(parameters);\n\n  for (var i = 0; i < data.x.length; i++) {\n    error += Math.abs(data.y[i] - func(data.x[i]));\n  }\n\n  return error;\n}\n","import { inverse, Matrix } from 'ml-matrix';\n\n/**\n * Difference of the matrix function over the parameters\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} paramFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Matrix}\n */\nfunction gradientFunction(\n  data,\n  evaluatedData,\n  params,\n  gradientDifference,\n  paramFunction\n) {\n  const n = params.length;\n  const m = data.x.length;\n\n  var ans = new Array(n);\n\n  for (var param = 0; param < n; param++) {\n    ans[param] = new Array(m);\n    var auxParams = params.concat();\n    auxParams[param] += gradientDifference;\n    var funcParam = paramFunction(auxParams);\n\n    for (var point = 0; point < m; point++) {\n      ans[param][point] = evaluatedData[point] - funcParam(data.x[point]);\n    }\n  }\n  return new Matrix(ans);\n}\n\n/**\n * Matrix function over the samples\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @return {Matrix}\n */\nfunction matrixFunction(data, evaluatedData) {\n  const m = data.x.length;\n\n  var ans = new Array(m);\n\n  for (var point = 0; point < m; point++) {\n    ans[point] = [data.y[point] - evaluatedData[point]];\n  }\n\n  return new Matrix(ans);\n}\n\n/**\n * Iteration for Levenberg-Marquardt\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} damping - Levenberg-Marquardt parameter\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Array<number>}\n */\nexport default function step(\n  data,\n  params,\n  damping,\n  gradientDifference,\n  parameterizedFunction\n) {\n  var value = damping * gradientDifference * gradientDifference;\n  var identity = Matrix.eye(params.length, params.length, value);\n\n  const func = parameterizedFunction(params);\n  var evaluatedData = data.x.map((e) => func(e));\n\n  var gradientFunc = gradientFunction(\n    data,\n    evaluatedData,\n    params,\n    gradientDifference,\n    parameterizedFunction\n  );\n  var matrixFunc = matrixFunction(data, evaluatedData);\n  var inverseMatrix = inverse(\n    identity.add(gradientFunc.mmul(gradientFunc.transpose()))\n  );\n\n  params = new Matrix([params]);\n  params = params.sub(\n    inverseMatrix\n      .mmul(gradientFunc)\n      .mmul(matrixFunc)\n      .mul(gradientDifference)\n      .transpose()\n  );\n\n  return params.to1DArray();\n}\n","import errorCalculation from './errorCalculation';\nimport step from './step';\n\n/**\n * Curve fitting algorithm\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @param {object} [options] - Options object\n * @param {number} [options.damping] - Levenberg-Marquardt parameter\n * @param {number} [options.gradientDifference = 10e-2] - Adjustment for decrease the damping parameter\n * @param {Array<number>} [options.minValues] - Minimum allowed values for parameters\n * @param {Array<number>} [options.maxValues] - Maximum allowed values for parameters\n * @param {Array<number>} [options.initialValues] - Array of initial parameter values\n * @param {number} [options.maxIterations = 100] - Maximum of allowed iterations\n * @param {number} [options.errorTolerance = 10e-3] - Minimum uncertainty allowed for each point\n * @return {{parameterValues: Array<number>, parameterError: number, iterations: number}}\n */\nexport default function levenbergMarquardt(\n  data,\n  parameterizedFunction,\n  options = {}\n) {\n  let {\n    maxIterations = 100,\n    gradientDifference = 10e-2,\n    damping = 0,\n    errorTolerance = 10e-3,\n    minValues,\n    maxValues,\n    initialValues\n  } = options;\n\n  if (damping <= 0) {\n    throw new Error('The damping option must be a positive number');\n  } else if (!data.x || !data.y) {\n    throw new Error('The data parameter must have x and y elements');\n  } else if (\n    !Array.isArray(data.x) ||\n    data.x.length < 2 ||\n    !Array.isArray(data.y) ||\n    data.y.length < 2\n  ) {\n    throw new Error(\n      'The data parameter elements must be an array with more than 2 points'\n    );\n  } else if (data.x.length !== data.y.length) {\n    throw new Error('The data parameter elements must have the same size');\n  }\n\n  var parameters =\n    initialValues || new Array(parameterizedFunction.length).fill(1);\n  let parLen = parameters.length;\n  maxValues = maxValues || new Array(parLen).fill(Number.MAX_SAFE_INTEGER);\n  minValues = minValues || new Array(parLen).fill(Number.MIN_SAFE_INTEGER);\n\n  if (maxValues.length !== minValues.length) {\n    throw new Error('minValues and maxValues must be the same size');\n  }\n\n  if (!Array.isArray(parameters)) {\n    throw new Error('initialValues must be an array');\n  }\n\n  var error = errorCalculation(data, parameters, parameterizedFunction);\n\n  var converged = error <= errorTolerance;\n\n  for (\n    var iteration = 0;\n    iteration < maxIterations && !converged;\n    iteration++\n  ) {\n    parameters = step(\n      data,\n      parameters,\n      damping,\n      gradientDifference,\n      parameterizedFunction\n    );\n\n    for (let k = 0; k < parLen; k++) {\n      parameters[k] = Math.min(\n        Math.max(minValues[k], parameters[k]),\n        maxValues[k]\n      );\n    }\n\n    error = errorCalculation(data, parameters, parameterizedFunction);\n    if (isNaN(error)) break;\n    converged = error <= errorTolerance;\n  }\n\n  return {\n    parameterValues: parameters,\n    parameterError: error,\n    iterations: iteration\n  };\n}\n","/**\n * Returns a new array based on extraction of specific indices of an array\n * @private\n * @param {Array} vector\n * @param {Array} indices\n */\nexport default function selection(vector, indices) {\n  let u = []; //new Float64Array(indices.length);\n  for (let i = 0; i < indices.length; i++) {\n    u[i] = vector[indices[i]];\n  }\n  return u;\n}\n","/**\n *\n * @private\n * @param {Array of arrays} collection\n */\nexport default function sortCollectionSet(collection) {\n  let objectCollection = collection\n    .map((value, index) => {\n      let key = BigInt(0);\n      value.forEach((item) => (key |= BigInt(1) << BigInt(item)));\n      return { value, index, key };\n    })\n    .sort((a, b) => {\n      if (a.key - b.key < 0) return -1;\n      return 1;\n    });\n\n  let sorted = [];\n  let indices = [];\n\n  let key;\n  for (let set of objectCollection) {\n    if (set.key !== key) {\n      key = set.key;\n      indices.push([]);\n      sorted.push(set.value);\n    }\n    indices[indices.length - 1].push(set.index);\n  }\n\n  let result = {\n    values: sorted,\n    indices: indices,\n  };\n  return result;\n}\n","import {\n  Matrix,\n  LuDecomposition,\n  solve,\n  CholeskyDecomposition,\n} from 'ml-matrix';\n\nimport sortCollectionSet from './util/sortCollectionSet';\n\n/**\n * (Combinatorial Subspace Least Squares) - subfunction for the FC-NNLS\n * @private\n * @param {Matrix} XtX\n * @param {Matrix} XtY\n * @param {Array} Pset\n * @param {Numbers} l\n * @param {Numbers} p\n */\nexport default function cssls(XtX, XtY, Pset, l, p) {\n  // Solves the set of equation XtX*K = XtY for the variables in Pset\n  // if XtX (or XtX(vars,vars)) is singular, performs the svd and find pseudoinverse, otherwise (even if ill-conditioned) finds inverse with LU decomposition and solves the set of equation\n  // it is consistent with matlab results for ill-conditioned matrices (at least consistent with test 'ill-conditionned square X rank 2, Y 3x1' in cssls.test)\n\n  let K = Matrix.zeros(l, p);\n  if (Pset === null) {\n    let choXtX = new CholeskyDecomposition(XtX);\n    if (choXtX.isPositiveDefinite() === true) {\n      K = choXtX.solve(XtY);\n    } else {\n      let luXtX = new LuDecomposition(XtX);\n      if (luXtX.isSingular() === false) {\n        K = luXtX.solve(Matrix.eye(l)).mmul(XtY);\n      } else {\n        K = solve(XtX, XtY, { useSVD: true });\n      }\n    }\n  } else {\n    let sortedPset = sortCollectionSet(Pset).values;\n    let sortedEset = sortCollectionSet(Pset).indices;\n    if (\n      sortedPset.length === 1 &&\n      sortedPset[0].length === 0 &&\n      sortedEset[0].length === p\n    ) {\n      return K;\n    } else if (\n      sortedPset.length === 1 &&\n      sortedPset[0].length === l &&\n      sortedEset[0].length === p\n    ) {\n      let choXtX = new CholeskyDecomposition(XtX);\n      if (choXtX.isPositiveDefinite() === true) {\n        K = choXtX.solve(XtY);\n      } else {\n        let luXtX = new LuDecomposition(XtX);\n        if (luXtX.isSingular() === false) {\n          K = luXtX.solve(Matrix.eye(l)).mmul(XtY);\n        } else {\n          K = solve(XtX, XtY, { useSVD: true });\n        }\n      }\n    } else {\n      for (let k = 0; k < sortedPset.length; k++) {\n        let cols2Solve = sortedEset[k];\n        let vars = sortedPset[k];\n        let L;\n        let choXtX = new CholeskyDecomposition(XtX.selection(vars, vars));\n        if (choXtX.isPositiveDefinite() === true) {\n          L = choXtX.solve(XtY.selection(vars, cols2Solve));\n        } else {\n          let luXtX = new LuDecomposition(XtX.selection(vars, vars));\n          if (luXtX.isSingular() === false) {\n            L = luXtX\n              .solve(Matrix.eye(vars.length))\n              .mmul(XtY.selection(vars, cols2Solve));\n          } else {\n            L = solve(\n              XtX.selection(vars, vars),\n              XtY.selection(vars, cols2Solve),\n              { useSVD: true },\n            );\n          }\n        }\n        for (let i = 0; i < L.rows; i++) {\n          for (let j = 0; j < L.columns; j++) {\n            K.set(vars[i], cols2Solve[j], L.get(i, j));\n          }\n        }\n      }\n    }\n  }\n  return K;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport cssls from './cssls';\n\nexport default function initialisation(X, Y) {\n  let n = X.rows;\n  let l = X.columns;\n  let p = Y.columns;\n  let iter = 0;\n\n  if (Y.rows !== n) throw new Error('ERROR: matrix size not compatible');\n\n  let W = Matrix.zeros(l, p);\n\n  // precomputes part of pseudoinverse\n  let XtX = X.transpose().mmul(X);\n  let XtY = X.transpose().mmul(Y);\n\n  let K = cssls(XtX, XtY, null, l, p); // K is lxp\n  let Pset = [];\n  for (let j = 0; j < p; j++) {\n    Pset[j] = [];\n    for (let i = 0; i < l; i++) {\n      if (K.get(i, j) > 0) {\n        Pset[j].push(i);\n      } else {\n        K.set(i, j, 0);\n      } //This is our initial solution, it's the solution found by overwriting the unconstrained least square solution\n    }\n  }\n  let Fset = [];\n  for (let j = 0; j < p; j++) {\n    if (Pset[j].length !== l) {\n      Fset.push(j);\n    }\n  }\n\n  let D = K.clone();\n\n  return { n, l, p, iter, W, XtX, XtY, K, Pset, Fset, D };\n}\n","/**\n * Computes the set difference A\\B\n * @private\n * @param {A} set A as an array\n * @param {B} set B as an array\n */\nexport default function setDifference(A, B) {\n  let C = [];\n  for (let i of A) {\n    if (!B.includes(i)) C.push(i);\n  }\n  return C;\n}\n","import setDifference from './util/setDifference';\n\n// Makes sure the solution has converged\nexport default function optimality(\n  iter,\n  maxIter,\n  XtX,\n  XtY,\n  Fset,\n  Pset,\n  W,\n  K,\n  l,\n  p,\n  D,\n) {\n  if (iter === maxIter) {\n    throw new Error('Maximum number of iterations exceeded');\n  }\n\n  // Check solution for optimality\n  let V = XtY.subMatrixColumn(Fset).subtract(XtX.mmul(K.subMatrixColumn(Fset)));\n  for (let j = 0; j < Fset.length; j++) {\n    W.setColumn(Fset[j], V.subMatrixColumn([j]));\n  }\n  let Jset = [];\n  let fullSet = [];\n  for (let i = 0; i < l; i++) {\n    fullSet.push(i);\n  }\n  for (let j = 0; j < Fset.length; j++) {\n    let notPset = setDifference(fullSet, Pset[Fset[j]]);\n    if (notPset.length === 0) {\n      Jset.push(Fset[j]);\n    } else if (W.selection(notPset, [Fset[j]]).max() <= 0) {\n      Jset.push(Fset[j]);\n    }\n  }\n  Fset = setDifference(Fset, Jset);\n\n  // For non-optimal solutions, add the appropriate variables to Pset\n  if (Fset.length !== 0) {\n    for (let j = 0; j < Fset.length; j++) {\n      for (let i = 0; i < l; i++) {\n        if (Pset[Fset[j]].includes(i)) W.set(i, Fset[j], -Infinity);\n      }\n      Pset[Fset[j]].push(W.subMatrixColumn(Fset).maxColumnIndex(j)[0]);\n    }\n    for (let j = 0; j < Fset.length; j++) {\n      D.setColumn(Fset[j], K.getColumn(Fset[j]));\n    }\n  }\n  for (let j = 0; j < p; j++) {\n    Pset[j].sort((a, b) => a - b);\n  }\n  return { Pset, Fset, W };\n}\n","import { Matrix } from 'ml-matrix';\n\nimport selection from './util/selection';\nimport cssls from './cssls';\nimport initialisation from './initialisation';\nimport optimality from './optimality';\n\n/**\n * Fast Combinatorial Non-negative Least Squares with multiple Right Hand Side\n * @param {Matrix|number[][]} X\n * @param {Matrix|number[][]} Y\n * @param {object} [options={}]\n * @param {number} [options.maxIterations] if empty maxIterations is set at 3 times the number of columns of X\n * @returns {Matrix} K\n */\nexport default function fcnnls(X, Y, options = {}) {\n  X = Matrix.checkMatrix(X);\n  Y = Matrix.checkMatrix(Y);\n  let { l, p, iter, W, XtX, XtY, K, Pset, Fset, D } = initialisation(X, Y);\n  const { maxIterations = X.columns * 3 } = options;\n\n  // Active set algorithm for NNLS main loop\n  while (Fset.length > 0) {\n    // Solves for the passive variables (uses subroutine below)\n    let L = cssls(\n      XtX,\n      XtY.subMatrixColumn(Fset),\n      selection(Pset, Fset),\n      l,\n      Fset.length,\n    );\n    for (let i = 0; i < l; i++) {\n      for (let j = 0; j < Fset.length; j++) {\n        K.set(i, Fset[j], L.get(i, j));\n      }\n    }\n\n    // Finds any infeasible solutions\n    let infeasIndex = [];\n    for (let j = 0; j < Fset.length; j++) {\n      for (let i = 0; i < l; i++) {\n        if (L.get(i, j) < 0) {\n          infeasIndex.push(j);\n          break;\n        }\n      }\n    }\n    let Hset = selection(Fset, infeasIndex);\n\n    // Makes infeasible solutions feasible (standard NNLS inner loop)\n    if (Hset.length > 0) {\n      let m = Hset.length;\n      let alpha = Matrix.ones(l, m);\n\n      while (m > 0 && iter < maxIterations) {\n        iter++;\n\n        alpha.mul(Infinity);\n\n        // Finds indices of negative variables in passive set\n        let hRowColIdx = [[], []]; // Indexes work in pairs, each pair reprensents a single element, first array is row index, second array is column index\n        let negRowColIdx = [[], []]; // Same as before\n        for (let j = 0; j < m; j++) {\n          for (let i = 0; i < Pset[Hset[j]].length; i++) {\n            if (K.get(Pset[Hset[j]][i], Hset[j]) < 0) {\n              hRowColIdx[0].push(Pset[Hset[j]][i]); // i\n              hRowColIdx[1].push(j);\n              negRowColIdx[0].push(Pset[Hset[j]][i]); // i\n              negRowColIdx[1].push(Hset[j]);\n            } // Compared to matlab, here we keep the row/column indexing (we are not taking the linear indexing)\n          }\n        }\n\n        for (let k = 0; k < hRowColIdx[0].length; k++) {\n          // could be hRowColIdx[1].length as well\n          alpha.set(\n            hRowColIdx[0][k],\n            hRowColIdx[1][k],\n            D.get(negRowColIdx[0][k], negRowColIdx[1][k]) /\n              (D.get(negRowColIdx[0][k], negRowColIdx[1][k]) -\n                K.get(negRowColIdx[0][k], negRowColIdx[1][k])),\n          );\n        }\n\n        let alphaMin = [];\n        let minIdx = [];\n        for (let j = 0; j < m; j++) {\n          alphaMin[j] = alpha.minColumn(j);\n          minIdx[j] = alpha.minColumnIndex(j)[0];\n        }\n\n        alphaMin = Matrix.rowVector(alphaMin);\n        for (let i = 0; i < l; i++) {\n          alpha.setSubMatrix(alphaMin, i, 0);\n        }\n\n        let E = new Matrix(l, m);\n        E = D.subMatrixColumn(Hset).subtract(\n          alpha\n            .subMatrix(0, l - 1, 0, m - 1)\n            .mul(D.subMatrixColumn(Hset).subtract(K.subMatrixColumn(Hset))),\n        );\n        for (let j = 0; j < m; j++) {\n          D.setColumn(Hset[j], E.subMatrixColumn([j]));\n        }\n\n        let idx2zero = [minIdx, Hset];\n        for (let k = 0; k < m; k++) {\n          D.set(idx2zero[0][k], idx2zero[1][k], 0);\n        }\n\n        for (let j = 0; j < m; j++) {\n          Pset[Hset[j]].splice(\n            Pset[Hset[j]].findIndex((item) => item === minIdx[j]),\n            1,\n          );\n        }\n\n        L = cssls(XtX, XtY.subMatrixColumn(Hset), selection(Pset, Hset), l, m);\n        for (let j = 0; j < m; j++) {\n          K.setColumn(Hset[j], L.subMatrixColumn([j]));\n        }\n\n        Hset = [];\n        for (let j = 0; j < K.columns; j++) {\n          for (let i = 0; i < l; i++) {\n            if (K.get(i, j) < 0) {\n              Hset.push(j);\n\n              break;\n            }\n          }\n        }\n        m = Hset.length;\n      }\n    }\n\n    let newParam = optimality(\n      iter,\n      maxIterations,\n      XtX,\n      XtY,\n      Fset,\n      Pset,\n      W,\n      K,\n      l,\n      p,\n      D,\n    );\n    Pset = newParam.Pset;\n    Fset = newParam.Fset;\n    W = newParam.W;\n  }\n\n  return K;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport fcnnls from './fcnnls';\n\n/**\n * Fast Combinatorial Non-negative Least Squares with single Right Hand Side\n * @param {Matrix|number[][]} X\n * @param {number[]} y\n * @param {object} [options={}]\n * @param {boolean} [maxIterations] if true or empty maxIterations is set at 3 times the number of columns of X\n * @returns {Array} k\n */\nexport default function fcnnlsVector(X, y, options = {}) {\n  if (Array.isArray(y) === false) {\n    throw new TypeError('y must be a 1D Array');\n  }\n  let Y = Matrix.columnVector(y);\n  let K = fcnnls(X, Y, options);\n  let k = K.to1DArray();\n  return k;\n}\n","module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + ((high - low) >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    // Too high.\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    // Key found.\n    else\n      return mid;\n  }\n\n  // Key not found.\n  return ~low;\n}\n","'use strict';\n\nfunction assertNumber(number) {\n\tif (typeof number !== 'number' || Number.isNaN(number)) {\n\t\tthrow new TypeError('Expected a number');\n\t}\n}\n\nexports.ascending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\treturn left - right;\n};\n\nexports.descending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\treturn right - left;\n};\n","import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\nexport const largestPrime = 0x7fffffff;\n\nconst primeNumbers = [\n  // chunk #0\n  largestPrime, // 2^31-1\n\n  // chunk #1\n  5,\n  11,\n  23,\n  47,\n  97,\n  197,\n  397,\n  797,\n  1597,\n  3203,\n  6421,\n  12853,\n  25717,\n  51437,\n  102877,\n  205759,\n  411527,\n  823117,\n  1646237,\n  3292489,\n  6584983,\n  13169977,\n  26339969,\n  52679969,\n  105359939,\n  210719881,\n  421439783,\n  842879579,\n  1685759167,\n\n  // chunk #2\n  433,\n  877,\n  1759,\n  3527,\n  7057,\n  14143,\n  28289,\n  56591,\n  113189,\n  226379,\n  452759,\n  905551,\n  1811107,\n  3622219,\n  7244441,\n  14488931,\n  28977863,\n  57955739,\n  115911563,\n  231823147,\n  463646329,\n  927292699,\n  1854585413,\n\n  // chunk #3\n  953,\n  1907,\n  3821,\n  7643,\n  15287,\n  30577,\n  61169,\n  122347,\n  244703,\n  489407,\n  978821,\n  1957651,\n  3915341,\n  7830701,\n  15661423,\n  31322867,\n  62645741,\n  125291483,\n  250582987,\n  501165979,\n  1002331963,\n  2004663929,\n\n  // chunk #4\n  1039,\n  2081,\n  4177,\n  8363,\n  16729,\n  33461,\n  66923,\n  133853,\n  267713,\n  535481,\n  1070981,\n  2141977,\n  4283963,\n  8567929,\n  17135863,\n  34271747,\n  68543509,\n  137087021,\n  274174111,\n  548348231,\n  1096696463,\n\n  // chunk #5\n  31,\n  67,\n  137,\n  277,\n  557,\n  1117,\n  2237,\n  4481,\n  8963,\n  17929,\n  35863,\n  71741,\n  143483,\n  286973,\n  573953,\n  1147921,\n  2295859,\n  4591721,\n  9183457,\n  18366923,\n  36733847,\n  73467739,\n  146935499,\n  293871013,\n  587742049,\n  1175484103,\n\n  // chunk #6\n  599,\n  1201,\n  2411,\n  4831,\n  9677,\n  19373,\n  38747,\n  77509,\n  155027,\n  310081,\n  620171,\n  1240361,\n  2480729,\n  4961459,\n  9922933,\n  19845871,\n  39691759,\n  79383533,\n  158767069,\n  317534141,\n  635068283,\n  1270136683,\n\n  // chunk #7\n  311,\n  631,\n  1277,\n  2557,\n  5119,\n  10243,\n  20507,\n  41017,\n  82037,\n  164089,\n  328213,\n  656429,\n  1312867,\n  2625761,\n  5251529,\n  10503061,\n  21006137,\n  42012281,\n  84024581,\n  168049163,\n  336098327,\n  672196673,\n  1344393353,\n\n  // chunk #8\n  3,\n  7,\n  17,\n  37,\n  79,\n  163,\n  331,\n  673,\n  1361,\n  2729,\n  5471,\n  10949,\n  21911,\n  43853,\n  87719,\n  175447,\n  350899,\n  701819,\n  1403641,\n  2807303,\n  5614657,\n  11229331,\n  22458671,\n  44917381,\n  89834777,\n  179669557,\n  359339171,\n  718678369,\n  1437356741,\n\n  // chunk #9\n  43,\n  89,\n  179,\n  359,\n  719,\n  1439,\n  2879,\n  5779,\n  11579,\n  23159,\n  46327,\n  92657,\n  185323,\n  370661,\n  741337,\n  1482707,\n  2965421,\n  5930887,\n  11861791,\n  23723597,\n  47447201,\n  94894427,\n  189788857,\n  379577741,\n  759155483,\n  1518310967,\n\n  // chunk #10\n  379,\n  761,\n  1523,\n  3049,\n  6101,\n  12203,\n  24407,\n  48817,\n  97649,\n  195311,\n  390647,\n  781301,\n  1562611,\n  3125257,\n  6250537,\n  12501169,\n  25002389,\n  50004791,\n  100009607,\n  200019221,\n  400038451,\n  800076929,\n  1600153859,\n\n  // chunk #11\n  13,\n  29,\n  59,\n  127,\n  257,\n  521,\n  1049,\n  2099,\n  4201,\n  8419,\n  16843,\n  33703,\n  67409,\n  134837,\n  269683,\n  539389,\n  1078787,\n  2157587,\n  4315183,\n  8630387,\n  17260781,\n  34521589,\n  69043189,\n  138086407,\n  276172823,\n  552345671,\n  1104691373,\n\n  // chunk #12\n  19,\n  41,\n  83,\n  167,\n  337,\n  677,\n  1361,\n  2729,\n  5471,\n  10949,\n  21911,\n  43853,\n  87719,\n  175447,\n  350899,\n  701819,\n  1403641,\n  2807303,\n  5614657,\n  11229331,\n  22458671,\n  44917381,\n  89834777,\n  179669557,\n  359339171,\n  718678369,\n  1437356741,\n\n  // chunk #13\n  53,\n  107,\n  223,\n  449,\n  907,\n  1823,\n  3659,\n  7321,\n  14653,\n  29311,\n  58631,\n  117269,\n  234539,\n  469099,\n  938207,\n  1876417,\n  3752839,\n  7505681,\n  15011389,\n  30022781,\n  60045577,\n  120091177,\n  240182359,\n  480364727,\n  960729461,\n  1921458943\n];\n\nprimeNumbers.sort(ascending);\n\nexport function nextPrime(value) {\n  let index = binarySearch(primeNumbers, value, ascending);\n  if (index < 0) {\n    index = ~index;\n  }\n  return primeNumbers[index];\n}\n","import { largestPrime, nextPrime } from './primeFinder';\n\nconst FREE = 0;\nconst FULL = 1;\nconst REMOVED = 2;\n\nconst defaultInitialCapacity = 150;\nconst defaultMinLoadFactor = 1 / 6;\nconst defaultMaxLoadFactor = 2 / 3;\n\nexport default class HashTable {\n  constructor(options = {}) {\n    if (options instanceof HashTable) {\n      this.table = options.table.slice();\n      this.values = options.values.slice();\n      this.state = options.state.slice();\n      this.minLoadFactor = options.minLoadFactor;\n      this.maxLoadFactor = options.maxLoadFactor;\n      this.distinct = options.distinct;\n      this.freeEntries = options.freeEntries;\n      this.lowWaterMark = options.lowWaterMark;\n      this.highWaterMark = options.maxLoadFactor;\n      return;\n    }\n\n    const initialCapacity =\n      options.initialCapacity === undefined\n        ? defaultInitialCapacity\n        : options.initialCapacity;\n    if (initialCapacity < 0) {\n      throw new RangeError(\n        `initial capacity must not be less than zero: ${initialCapacity}`\n      );\n    }\n\n    const minLoadFactor =\n      options.minLoadFactor === undefined\n        ? defaultMinLoadFactor\n        : options.minLoadFactor;\n    const maxLoadFactor =\n      options.maxLoadFactor === undefined\n        ? defaultMaxLoadFactor\n        : options.maxLoadFactor;\n    if (minLoadFactor < 0 || minLoadFactor >= 1) {\n      throw new RangeError(`invalid minLoadFactor: ${minLoadFactor}`);\n    }\n    if (maxLoadFactor <= 0 || maxLoadFactor >= 1) {\n      throw new RangeError(`invalid maxLoadFactor: ${maxLoadFactor}`);\n    }\n    if (minLoadFactor >= maxLoadFactor) {\n      throw new RangeError(\n        `minLoadFactor (${minLoadFactor}) must be smaller than maxLoadFactor (${maxLoadFactor})`\n      );\n    }\n\n    let capacity = initialCapacity;\n    // User wants to put at least capacity elements. We need to choose the size based on the maxLoadFactor to\n    // avoid the need to rehash before this capacity is reached.\n    // actualCapacity * maxLoadFactor >= capacity\n    capacity = (capacity / maxLoadFactor) | 0;\n    capacity = nextPrime(capacity);\n    if (capacity === 0) capacity = 1;\n\n    this.table = newArray(capacity);\n    this.values = newArray(capacity);\n    this.state = newArray(capacity);\n\n    this.minLoadFactor = minLoadFactor;\n    if (capacity === largestPrime) {\n      this.maxLoadFactor = 1;\n    } else {\n      this.maxLoadFactor = maxLoadFactor;\n    }\n\n    this.distinct = 0;\n    this.freeEntries = capacity;\n\n    this.lowWaterMark = 0;\n    this.highWaterMark = chooseHighWaterMark(capacity, this.maxLoadFactor);\n  }\n\n  clone() {\n    return new HashTable(this);\n  }\n\n  get size() {\n    return this.distinct;\n  }\n\n  get(key) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return 0;\n    return this.values[i];\n  }\n\n  set(key, value) {\n    let i = this.indexOfInsertion(key);\n    if (i < 0) {\n      i = -i - 1;\n      this.values[i] = value;\n      return false;\n    }\n\n    if (this.distinct > this.highWaterMark) {\n      const newCapacity = chooseGrowCapacity(\n        this.distinct + 1,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n      return this.set(key, value);\n    }\n\n    this.table[i] = key;\n    this.values[i] = value;\n    if (this.state[i] === FREE) this.freeEntries--;\n    this.state[i] = FULL;\n    this.distinct++;\n\n    if (this.freeEntries < 1) {\n      const newCapacity = chooseGrowCapacity(\n        this.distinct + 1,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n    }\n\n    return true;\n  }\n\n  remove(key, noRehash) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return false;\n\n    this.state[i] = REMOVED;\n    this.distinct--;\n\n    if (!noRehash) this.maybeShrinkCapacity();\n\n    return true;\n  }\n\n  delete(key, noRehash) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return false;\n\n    this.state[i] = FREE;\n    this.distinct--;\n\n    if (!noRehash) this.maybeShrinkCapacity();\n\n    return true;\n  }\n\n  maybeShrinkCapacity() {\n    if (this.distinct < this.lowWaterMark) {\n      const newCapacity = chooseShrinkCapacity(\n        this.distinct,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n    }\n  }\n\n  containsKey(key) {\n    return this.indexOfKey(key) >= 0;\n  }\n\n  indexOfKey(key) {\n    const table = this.table;\n    const state = this.state;\n    const length = this.table.length;\n\n    const hash = key & 0x7fffffff;\n    let i = hash % length;\n    let decrement = hash % (length - 2);\n    if (decrement === 0) decrement = 1;\n\n    while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n      i -= decrement;\n      if (i < 0) i += length;\n    }\n\n    if (state[i] === FREE) return -1;\n    return i;\n  }\n\n  containsValue(value) {\n    return this.indexOfValue(value) >= 0;\n  }\n\n  indexOfValue(value) {\n    const values = this.values;\n    const state = this.state;\n\n    for (var i = 0; i < state.length; i++) {\n      if (state[i] === FULL && values[i] === value) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  indexOfInsertion(key) {\n    const table = this.table;\n    const state = this.state;\n    const length = table.length;\n\n    const hash = key & 0x7fffffff;\n    let i = hash % length;\n    let decrement = hash % (length - 2);\n    if (decrement === 0) decrement = 1;\n\n    while (state[i] === FULL && table[i] !== key) {\n      i -= decrement;\n      if (i < 0) i += length;\n    }\n\n    if (state[i] === REMOVED) {\n      const j = i;\n      while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n        i -= decrement;\n        if (i < 0) i += length;\n      }\n      if (state[i] === FREE) i = j;\n    }\n\n    if (state[i] === FULL) {\n      return -i - 1;\n    }\n\n    return i;\n  }\n\n  ensureCapacity(minCapacity) {\n    if (this.table.length < minCapacity) {\n      const newCapacity = nextPrime(minCapacity);\n      this.rehash(newCapacity);\n    }\n  }\n\n  rehash(newCapacity) {\n    const oldCapacity = this.table.length;\n\n    if (newCapacity <= this.distinct) throw new Error('Unexpected');\n\n    const oldTable = this.table;\n    const oldValues = this.values;\n    const oldState = this.state;\n\n    const newTable = newArray(newCapacity);\n    const newValues = newArray(newCapacity);\n    const newState = newArray(newCapacity);\n\n    this.lowWaterMark = chooseLowWaterMark(newCapacity, this.minLoadFactor);\n    this.highWaterMark = chooseHighWaterMark(newCapacity, this.maxLoadFactor);\n\n    this.table = newTable;\n    this.values = newValues;\n    this.state = newState;\n    this.freeEntries = newCapacity - this.distinct;\n\n    for (var i = 0; i < oldCapacity; i++) {\n      if (oldState[i] === FULL) {\n        var element = oldTable[i];\n        var index = this.indexOfInsertion(element);\n        newTable[index] = element;\n        newValues[index] = oldValues[i];\n        newState[index] = FULL;\n      }\n    }\n  }\n\n  forEachKey(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.table[i])) return false;\n      }\n    }\n    return true;\n  }\n\n  forEachValue(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.values[i])) return false;\n      }\n    }\n    return true;\n  }\n\n  forEachPair(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.table[i], this.values[i])) return false;\n      }\n    }\n    return true;\n  }\n}\n\nfunction chooseLowWaterMark(capacity, minLoad) {\n  return (capacity * minLoad) | 0;\n}\n\nfunction chooseHighWaterMark(capacity, maxLoad) {\n  return Math.min(capacity - 2, (capacity * maxLoad) | 0);\n}\n\nfunction chooseGrowCapacity(size, minLoad, maxLoad) {\n  return nextPrime(\n    Math.max(size + 1, ((4 * size) / (3 * minLoad + maxLoad)) | 0)\n  );\n}\n\nfunction chooseShrinkCapacity(size, minLoad, maxLoad) {\n  return nextPrime(\n    Math.max(size + 1, ((4 * size) / (minLoad + 3 * maxLoad)) | 0)\n  );\n}\n\nfunction newArray(size) {\n  return Array(size).fill(0);\n}\n","import HashTable from 'ml-hash-table';\n\nexport class SparseMatrix {\n  constructor(rows, columns, options = {}) {\n    if (rows instanceof SparseMatrix) {\n      // clone\n      const other = rows;\n      this._init(\n        other.rows,\n        other.columns,\n        other.elements.clone(),\n        other.threshold\n      );\n      return;\n    }\n\n    if (Array.isArray(rows)) {\n      const matrix = rows;\n      rows = matrix.length;\n      options = columns || {};\n      columns = matrix[0].length;\n      this._init(rows, columns, new HashTable(options), options.threshold);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          var value = matrix[i][j];\n          if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n          if (value !== 0) {\n            this.elements.set(i * columns + j, matrix[i][j]);\n          }\n        }\n      }\n    } else {\n      this._init(rows, columns, new HashTable(options), options.threshold);\n    }\n  }\n\n  _init(rows, columns, elements, threshold) {\n    this.rows = rows;\n    this.columns = columns;\n    this.elements = elements;\n    this.threshold = threshold || 0;\n  }\n\n  static eye(rows = 1, columns = rows) {\n    const min = Math.min(rows, columns);\n    const matrix = new SparseMatrix(rows, columns, { initialCapacity: min });\n    for (var i = 0; i < min; i++) {\n      matrix.set(i, i, 1);\n    }\n    return matrix;\n  }\n\n  clone() {\n    return new SparseMatrix(this);\n  }\n\n  to2DArray() {\n    const copy = new Array(this.rows);\n    for (var i = 0; i < this.rows; i++) {\n      copy[i] = new Array(this.columns);\n      for (var j = 0; j < this.columns; j++) {\n        copy[i][j] = this.get(i, j);\n      }\n    }\n    return copy;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (!this.isSquare()) return false;\n\n    var symmetric = true;\n    this.forEachNonZero((i, j, v) => {\n      if (this.get(j, i) !== v) {\n        symmetric = false;\n        return false;\n      }\n      return v;\n    });\n    return symmetric;\n  }\n\n  /**\n   * Search for the wither band in the main diagonals\n   * @return {number}\n   */\n  bandWidth() {\n    let min = this.columns;\n    let max = -1;\n    this.forEachNonZero((i, j, v) => {\n      let diff = i - j;\n      min = Math.min(min, diff);\n      max = Math.max(max, diff);\n      return v;\n    });\n    return max - min;\n  }\n\n  /**\n   * Test if a matrix is consider banded using a threshold\n   * @param {number} width\n   * @return {boolean}\n   */\n  isBanded(width) {\n    let bandWidth = this.bandWidth();\n    return bandWidth <= width;\n  }\n\n  get cardinality() {\n    return this.elements.size;\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  get(row, column) {\n    return this.elements.get(row * this.columns + column);\n  }\n\n  set(row, column, value) {\n    if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n    if (value === 0) {\n      this.elements.remove(row * this.columns + column);\n    } else {\n      this.elements.set(row * this.columns + column, value);\n    }\n    return this;\n  }\n\n  mmul(other) {\n    if (this.columns !== other.rows) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Number of columns of left matrix are not equal to number of rows of right matrix.'\n      );\n    }\n\n    const m = this.rows;\n    const p = other.columns;\n\n    const result = new SparseMatrix(m, p);\n    this.forEachNonZero((i, j, v1) => {\n      other.forEachNonZero((k, l, v2) => {\n        if (j === k) {\n          result.set(i, l, result.get(i, l) + v1 * v2);\n        }\n        return v2;\n      });\n      return v1;\n    });\n    return result;\n  }\n\n  kroneckerProduct(other) {\n    const m = this.rows;\n    const n = this.columns;\n    const p = other.rows;\n    const q = other.columns;\n\n    const result = new SparseMatrix(m * p, n * q, {\n      initialCapacity: this.cardinality * other.cardinality\n    });\n    this.forEachNonZero((i, j, v1) => {\n      other.forEachNonZero((k, l, v2) => {\n        result.set(p * i + k, q * j + l, v1 * v2);\n        return v2;\n      });\n      return v1;\n    });\n    return result;\n  }\n\n  forEachNonZero(callback) {\n    this.elements.forEachPair((key, value) => {\n      const i = (key / this.columns) | 0;\n      const j = key % this.columns;\n      let r = callback(i, j, value);\n      if (r === false) return false; // stop iteration\n      if (this.threshold && Math.abs(r) < this.threshold) r = 0;\n      if (r !== value) {\n        if (r === 0) {\n          this.elements.remove(key, true);\n        } else {\n          this.elements.set(key, r);\n        }\n      }\n      return true;\n    });\n    this.elements.maybeShrinkCapacity();\n    return this;\n  }\n\n  getNonZeros() {\n    const cardinality = this.cardinality;\n    const rows = new Array(cardinality);\n    const columns = new Array(cardinality);\n    const values = new Array(cardinality);\n    var idx = 0;\n    this.forEachNonZero((i, j, value) => {\n      rows[idx] = i;\n      columns[idx] = j;\n      values[idx] = value;\n      idx++;\n      return value;\n    });\n    return { rows, columns, values };\n  }\n\n  setThreshold(newThreshold) {\n    if (newThreshold !== 0 && newThreshold !== this.threshold) {\n      this.threshold = newThreshold;\n      this.forEachNonZero((i, j, v) => v);\n    }\n    return this;\n  }\n\n  /**\n   * @return {SparseMatrix} - New transposed sparse matrix\n   */\n  transpose() {\n    let trans = new SparseMatrix(this.columns, this.rows, {\n      initialCapacity: this.cardinality\n    });\n    this.forEachNonZero((i, j, value) => {\n      trans.set(j, i, value);\n      return value;\n    });\n    return trans;\n  }\n}\n\nSparseMatrix.prototype.klass = 'Matrix';\n\nSparseMatrix.identity = SparseMatrix.eye;\nSparseMatrix.prototype.tensorProduct = SparseMatrix.prototype.kroneckerProduct;\n\n/*\n Add dynamically instance and static methods for mathematical operations\n */\n\nvar inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\nvar inplaceOperatorScalar = `\n(function %name%S(value) {\n    this.forEachNonZero((i, j, v) => v %op% value);\n    return this;\n})\n`;\n\nvar inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix.forEachNonZero((i, j, v) => {\n        this.set(i, j, this.get(i, j) %op% v);\n        return v;\n    });\n    return this;\n})\n`;\n\nvar staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\nvar inplaceMethod = `\n(function %name%() {\n    this.forEachNonZero((i, j, v) => %method%(v));\n    return this;\n})\n`;\n\nvar staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%();\n})\n`;\n\nconst operators = [\n  // Arithmetic operators\n  ['+', 'add'],\n  ['-', 'sub', 'subtract'],\n  ['*', 'mul', 'multiply'],\n  ['/', 'div', 'divide'],\n  ['%', 'mod', 'modulus'],\n  // Bitwise operators\n  ['&', 'and'],\n  ['|', 'or'],\n  ['^', 'xor'],\n  ['<<', 'leftShift'],\n  ['>>', 'signPropagatingRightShift'],\n  ['>>>', 'rightShift', 'zeroFillRightShift']\n];\n\nfor (const operator of operators) {\n  for (let i = 1; i < operator.length; i++) {\n    SparseMatrix.prototype[operator[i]] = eval(\n      fillTemplateFunction(inplaceOperator, {\n        name: operator[i],\n        op: operator[0]\n      })\n    );\n    SparseMatrix.prototype[`${operator[i]}S`] = eval(\n      fillTemplateFunction(inplaceOperatorScalar, {\n        name: `${operator[i]}S`,\n        op: operator[0]\n      })\n    );\n    SparseMatrix.prototype[`${operator[i]}M`] = eval(\n      fillTemplateFunction(inplaceOperatorMatrix, {\n        name: `${operator[i]}M`,\n        op: operator[0]\n      })\n    );\n\n    SparseMatrix[operator[i]] = eval(\n      fillTemplateFunction(staticOperator, { name: operator[i] })\n    );\n  }\n}\n\nvar methods = [['~', 'not']];\n\n[\n  'abs',\n  'acos',\n  'acosh',\n  'asin',\n  'asinh',\n  'atan',\n  'atanh',\n  'cbrt',\n  'ceil',\n  'clz32',\n  'cos',\n  'cosh',\n  'exp',\n  'expm1',\n  'floor',\n  'fround',\n  'log',\n  'log1p',\n  'log10',\n  'log2',\n  'round',\n  'sign',\n  'sin',\n  'sinh',\n  'sqrt',\n  'tan',\n  'tanh',\n  'trunc'\n].forEach(function (mathMethod) {\n  methods.push([`Math.${mathMethod}`, mathMethod]);\n});\n\nfor (const method of methods) {\n  for (let i = 1; i < method.length; i++) {\n    SparseMatrix.prototype[method[i]] = eval(\n      fillTemplateFunction(inplaceMethod, {\n        name: method[i],\n        method: method[0]\n      })\n    );\n    SparseMatrix[method[i]] = eval(\n      fillTemplateFunction(staticMethod, { name: method[i] })\n    );\n  }\n}\n\nfunction fillTemplateFunction(template, values) {\n  for (const i in values) {\n    template = template.replace(new RegExp(`%${i}%`, 'g'), values[i]);\n  }\n  return template;\n}\n","export default function additiveSymmetric(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i]) * (a[i] + b[i])) / (a[i] * b[i]);\n  }\n  return 2 * d;\n}\n","export default function avg(a, b) {\n  var ii = a.length;\n  var max = 0;\n  var ans = 0;\n  var aux = 0;\n  for (var i = 0; i < ii; i++) {\n    aux = Math.abs(a[i] - b[i]);\n    ans += aux;\n    if (max < aux) {\n      max = aux;\n    }\n  }\n  return (max + ans) / 2;\n}\n","export default function bhattacharyya(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return -Math.log(ans);\n}\n","export default function canberra(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.abs(a[i] - b[i]) / (a[i] + b[i]);\n  }\n  return ans;\n}\n","export default function chebyshev(a, b) {\n  var ii = a.length;\n  var max = 0;\n  var aux = 0;\n  for (var i = 0; i < ii; i++) {\n    aux = Math.abs(a[i] - b[i]);\n    if (max < aux) {\n      max = aux;\n    }\n  }\n  return max;\n}\n","export default function clark(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.sqrt(\n      ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]))\n    );\n  }\n  return 2 * d;\n}\n","export default function czekanowskiSimilarity(a, b) {\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < a.length; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return (2 * up) / down;\n}\n","import czekanowskiSimilarity from '../similarities/czekanowski';\n\nexport default function czekanowskiDistance(a, b) {\n  return 1 - czekanowskiSimilarity(a, b);\n}\n","export default function dice(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var q1 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * a[i];\n    q1 += b[i] * b[i];\n    q2 += (a[i] - b[i]) * (a[i] - b[i]);\n  }\n  return q2 / (p + q1);\n}\n","export default function divergence(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]));\n  }\n  return 2 * d;\n}\n","export default function fidelity(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return ans;\n}\n","export default function gower(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.abs(a[i] - b[i]);\n  }\n  return ans / ii;\n}\n","export default function harmonicMean(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += (a[i] * b[i]) / (a[i] + b[i]);\n  }\n  return 2 * ans;\n}\n","export default function hellinger(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return 2 * Math.sqrt(1 - ans);\n}\n","export default function innerProduct(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * b[i];\n  }\n  return ans;\n}\n","export default function intersection(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.min(a[i], b[i]);\n  }\n  return 1 - ans;\n}\n","export default function jaccard(a, b) {\n  var ii = a.length;\n  var p1 = 0;\n  var p2 = 0;\n  var q1 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p1 += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q1 += b[i] * b[i];\n    q2 += (a[i] - b[i]) * (a[i] - b[i]);\n  }\n  return q2 / (p2 + q1 - p1);\n}\n","export default function jeffreys(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += (a[i] - b[i]) * Math.log(a[i] / b[i]);\n  }\n  return ans;\n}\n","export default function jensenDifference(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      (a[i] * Math.log(a[i]) + b[i] * Math.log(b[i])) / 2 -\n      ((a[i] + b[i]) / 2) * Math.log((a[i] + b[i]) / 2);\n  }\n  return ans;\n}\n","export default function jensenShannon(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var q = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * Math.log((2 * a[i]) / (a[i] + b[i]));\n    q += b[i] * Math.log((2 * b[i]) / (a[i] + b[i]));\n  }\n  return (p + q) / 2;\n}\n","export default function kdivergence(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * Math.log((2 * a[i]) / (a[i] + b[i]));\n  }\n  return ans;\n}\n","export default function kulczynski(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += Math.min(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function kullbackLeibler(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * Math.log(a[i] / b[i]);\n  }\n  return ans;\n}\n","export default function kumarHassebrook(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var p2 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (p2 + q2 - p);\n}\n","export default function kumarJohnson(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      Math.pow(a[i] * a[i] - b[i] * b[i], 2) / (2 * Math.pow(a[i] * b[i], 1.5));\n  }\n  return ans;\n}\n","export default function lorentzian(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.log(Math.abs(a[i] - b[i]) + 1);\n  }\n  return ans;\n}\n","export default function manhattan(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.abs(a[i] - b[i]);\n  }\n  return d;\n}\n","export default function matusita(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return Math.sqrt(2 - 2 * ans);\n}\n","export default function minkowski(a, b, p) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.pow(Math.abs(a[i] - b[i]), p);\n  }\n  return Math.pow(d, 1 / p);\n}\n","export default function motyka(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return 1 - up / down;\n}\n","export default function neyman(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / a[i];\n  }\n  return d;\n}\n","export default function pearson(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / b[i];\n  }\n  return d;\n}\n","export default function probabilisticSymmetric(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n  }\n  return 2 * d;\n}\n","export default function ruzicka(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.min(a[i], b[i]);\n    down += Math.max(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function soergel(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += Math.max(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function sorensen(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += a[i] + b[i];\n  }\n  return up / down;\n}\n","export default function squared(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n  }\n  return d;\n}\n","export default function squaredChord(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      (Math.sqrt(a[i]) - Math.sqrt(b[i])) * (Math.sqrt(a[i]) - Math.sqrt(b[i]));\n  }\n  return ans;\n}\n","export default function taneja(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      ((a[i] + b[i]) / 2) *\n      Math.log((a[i] + b[i]) / (2 * Math.sqrt(a[i] * b[i])));\n  }\n  return ans;\n}\n","export default function tanimoto(a, b, bitvector) {\n  if (bitvector) {\n    var inter = 0;\n    var union = 0;\n    for (var j = 0; j < a.length; j++) {\n      inter += a[j] && b[j];\n      union += a[j] || b[j];\n    }\n    if (union === 0) {\n      return 1;\n    }\n    return inter / union;\n  } else {\n    var ii = a.length;\n    var p = 0;\n    var q = 0;\n    var m = 0;\n    for (var i = 0; i < ii; i++) {\n      p += a[i];\n      q += b[i];\n      m += Math.min(a[i], b[i]);\n    }\n    return 1 - (p + q - 2 * m) / (p + q - m);\n  }\n}\n","import tanimotoS from '../similarities/tanimoto';\n\nexport default function tanimoto(a, b, bitvector) {\n  if (bitvector) {\n    return 1 - tanimotoS(a, b, bitvector);\n  } else {\n    var ii = a.length;\n    var p = 0;\n    var q = 0;\n    var m = 0;\n    for (var i = 0; i < ii; i++) {\n      p += a[i];\n      q += b[i];\n      m += Math.min(a[i], b[i]);\n    }\n    return (p + q - 2 * m) / (p + q - m);\n  }\n}\n","export default function topsoe(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      a[i] * Math.log((2 * a[i]) / (a[i] + b[i])) +\n      b[i] * Math.log((2 * b[i]) / (a[i] + b[i]));\n  }\n  return ans;\n}\n","export default function waveHedges(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += 1 - Math.min(a[i], b[i]) / Math.max(a[i], b[i]);\n  }\n  return ans;\n}\n","import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\n/**\n * Function that creates the tree\n * @param {Array<Array<number>>} spectrum\n * @param {object} [options]\n * @return {Tree|null}\n * left and right have the same structure than the parent,\n * or are null if they are leaves\n */\nexport function createTree(spectrum, options = {}) {\n  var X = spectrum[0];\n  const {\n    minWindow = 0.16,\n    threshold = 0.01,\n    from = X[0],\n    to = X[X.length - 1]\n  } = options;\n\n  return mainCreateTree(\n    spectrum[0],\n    spectrum[1],\n    from,\n    to,\n    minWindow,\n    threshold\n  );\n}\n\nfunction mainCreateTree(X, Y, from, to, minWindow, threshold) {\n  if (to - from < minWindow) {\n    return null;\n  }\n\n  // search first point\n  var start = binarySearch(X, from, ascending);\n  if (start < 0) {\n    start = ~start;\n  }\n\n  // stop at last point\n  var sum = 0;\n  var center = 0;\n  for (var i = start; i < X.length; i++) {\n    if (X[i] >= to) {\n      break;\n    }\n    sum += Y[i];\n    center += X[i] * Y[i];\n  }\n\n  if (sum < threshold) {\n    return null;\n  }\n\n  center /= sum;\n  if (center - from < 1e-6 || to - center < 1e-6) {\n    return null;\n  }\n  if (center - from < minWindow / 4) {\n    return mainCreateTree(X, Y, center, to, minWindow, threshold);\n  } else {\n    if (to - center < minWindow / 4) {\n      return mainCreateTree(X, Y, from, center, minWindow, threshold);\n    } else {\n      return new Tree(\n        sum,\n        center,\n        mainCreateTree(X, Y, from, center, minWindow, threshold),\n        mainCreateTree(X, Y, center, to, minWindow, threshold)\n      );\n    }\n  }\n}\n\nclass Tree {\n  constructor(sum, center, left, right) {\n    this.sum = sum;\n    this.center = center;\n    this.left = left;\n    this.right = right;\n  }\n}\n","import { createTree } from './createTree';\n\n/**\n * Similarity between two nodes\n * @param {Tree|Array<Array<number>>} a - tree A node\n * @param {Tree|Array<Array<number>>} b - tree B node\n * @param {object} [options]\n * @return {number} similarity measure between tree nodes\n */\nexport function getSimilarity(a, b, options = {}) {\n  const { alpha = 0.1, beta = 0.33, gamma = 0.001 } = options;\n\n  if (a === null || b === null) {\n    return 0;\n  }\n  if (Array.isArray(a)) {\n    a = createTree(a);\n  }\n  if (Array.isArray(b)) {\n    b = createTree(b);\n  }\n\n  var C =\n    (alpha * Math.min(a.sum, b.sum)) / Math.max(a.sum, b.sum) +\n    (1 - alpha) * Math.exp(-gamma * Math.abs(a.center - b.center));\n\n  return (\n    beta * C +\n    ((1 - beta) *\n      (getSimilarity(a.left, b.left, options) +\n        getSimilarity(a.right, b.right, options))) /\n      2\n  );\n}\n","import { getSimilarity } from './getSimilarity';\n\nexport { createTree } from './createTree';\n\nexport function treeSimilarity(A, B, options = {}) {\n  return getSimilarity(A, B, options);\n}\n\nexport function getFunction(options = {}) {\n  return (A, B) => getSimilarity(A, B, options);\n}\n","export default function cosine(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var p2 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (Math.sqrt(p2) * Math.sqrt(q2));\n}\n","import diceD from '../distances/dice';\n\nexport default function dice(a, b) {\n  return 1 - diceD(a, b);\n}\n","import intersectionD from '../distances/intersection';\n\nexport default function intersection(a, b) {\n  return 1 - intersectionD(a, b);\n}\n","import jaccardD from '../distances/jaccard';\n\nexport default function jaccard(a, b) {\n  return 1 - jaccardD(a, b);\n}\n","import kulczynskiD from '../distances/kulczynski';\n\nexport default function kulczynski(a, b) {\n  return 1 / kulczynskiD(a, b);\n}\n","import motykaD from '../distances/motyka';\n\nexport default function motyka(a, b) {\n  return 1 - motykaD(a, b);\n}\n","import mean from 'ml-array-mean';\n\nimport cosine from './cosine';\n\nexport default function pearson(a, b) {\n  var avgA = mean(a);\n  var avgB = mean(b);\n\n  var newA = new Array(a.length);\n  var newB = new Array(b.length);\n  for (var i = 0; i < newA.length; i++) {\n    newA[i] = a[i] - avgA;\n    newB[i] = b[i] - avgB;\n  }\n\n  return cosine(newA, newB);\n}\n","import squaredChordD from '../distances/squaredChord';\n\nexport default function squaredChord(a, b) {\n  return 1 - squaredChordD(a, b);\n}\n","'use strict';\n\n// Accuracy\nexports.acc = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.tn[i] + pred.tp[i]) / (l - 1);\n    }\n    return result;\n};\n\n// Error rate\nexports.err = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.fp[i] / (l - 1));\n    }\n    return result;\n};\n\n// False positive rate\nexports.fpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fp[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// True positive rate\nexports.tpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tp[i] / pred.nPos;\n    }\n    return result;\n};\n\n// False negative rate\nexports.fnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fn[i] / pred.nPos;\n    }\n    return result;\n};\n\n// True negative rate\nexports.tnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tn[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// Positive predictive value\nexports.ppv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 0;\n    }\n    return result;\n};\n\n// Negative predictive value\nexports.npv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 0;\n    }\n    return result;\n};\n\n// Prediction conditioned fallout\nexports.pcfall = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? 1 - (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 1;\n    }\n    return result;\n};\n\n// Prediction conditioned miss\nexports.pcmiss = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? 1 - (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 1;\n    }\n    return result;\n};\n\n// Lift value\nexports.lift = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.nPosPred[i] !== 0) ? ((pred.tp[i] / pred.nPos) / (pred.nPosPred[i] / pred.nSamples)) : 0;\n    }\n    return result;\n};\n\n// Rate of positive predictions\nexports.rpp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nPosPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Rate of negative predictions\nexports.rnp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nNegPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Threshold\nexports.threshold = pred => {\n    const clone = pred.cutoffs.slice();\n    clone[0] = clone[1]; // Remove the infinite value\n    return clone;\n};\n","'use strict';\n\nconst measures = require('./measures');\n\nclass Performance {\n    /**\n     *\n     * @param prediction - The prediction matrix\n     * @param target - The target matrix (values: truthy for same class, falsy for different class)\n     * @param options\n     *\n     * @option    all    True if the entire matrix must be used. False to ignore the diagonal and lower part (default is false, for similarity/distance matrices)\n     * @option    max    True if the max value corresponds to a perfect match (like in similarity matrices), false if it is the min value (default is false, like in distance matrices. All values will be multiplied by -1)\n     */\n    constructor(prediction, target, options) {\n        options = options || {};\n        if (prediction.length !== target.length || prediction[0].length !== target[0].length) {\n            throw new Error('dimensions of prediction and target do not match');\n        }\n        const rows = prediction.length;\n        const columns = prediction[0].length;\n        const isDistance = !options.max;\n\n        const predP = [];\n\n        if (options.all) {\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        } else {\n            if (rows < 3 || rows !== columns) {\n                throw new Error('When \"all\" option is false, the prediction matrix must be square and have at least 3 columns');\n            }\n            for (var i = 0; i < rows - 1; i++) {\n                for (var j = i + 1; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        }\n\n        if (isDistance) {\n            predP.sort((a, b) => a.pred - b.pred);\n        } else {\n            predP.sort((a, b) => b.pred - a.pred);\n        }\n        \n        const cutoffs = this.cutoffs = [isDistance ? Number.MIN_VALUE : Number.MAX_VALUE];\n        const fp = this.fp = [0];\n        const tp = this.tp = [0];\n\n        var nPos = 0;\n        var nNeg = 0;\n\n        var currentPred = predP[0].pred;\n        var nTp = 0;\n        var nFp = 0;\n        for (var i = 0; i < predP.length; i++) {\n            if (predP[i].pred !== currentPred) {\n                cutoffs.push(currentPred);\n                fp.push(nFp);\n                tp.push(nTp);\n                currentPred = predP[i].pred;\n            }\n            if (predP[i].targ) {\n                nPos++;\n                nTp++;\n            } else {\n                nNeg++;\n                nFp++;\n            }\n        }\n        cutoffs.push(currentPred);\n        fp.push(nFp);\n        tp.push(nTp);\n\n        const l = cutoffs.length;\n        const fn = this.fn = new Array(l);\n        const tn = this.tn = new Array(l);\n        const nPosPred = this.nPosPred = new Array(l);\n        const nNegPred = this.nNegPred = new Array(l);\n\n        for (var i = 0; i < l; i++) {\n            fn[i] = nPos - tp[i];\n            tn[i] = nNeg - fp[i];\n\n            nPosPred[i] = tp[i] + fp[i];\n            nNegPred[i] = tn[i] + fn[i];\n        }\n\n        this.nPos = nPos;\n        this.nNeg = nNeg;\n        this.nSamples = nPos + nNeg;\n    }\n\n    /**\n     * Computes a measure from the prediction object.\n     *\n     * Many measures are available and can be combined :\n     * To create a ROC curve, you need fpr and tpr\n     * To create a DET curve, you need fnr and fpr\n     * To create a Lift chart, you need rpp and lift\n     *\n     * Possible measures are : threshold (Threshold), acc (Accuracy), err (Error rate),\n     * fpr (False positive rate), tpr (True positive rate), fnr (False negative rate), tnr (True negative rate), ppv (Positive predictive value),\n     * npv (Negative predictive value), pcfall (Prediction-conditioned fallout), pcmiss (Prediction-conditioned miss), lift (Lift value), rpp (Rate of positive predictions), rnp (Rate of negative predictions)\n     *\n     * @param measure - The short name of the measure\n     *\n     * @return [number]\n     */\n    getMeasure(measure) {\n        if (typeof measure !== 'string') {\n            throw new Error('No measure specified');\n        }\n        if (!measures[measure]) {\n            throw new Error(`The specified measure (${measure}) does not exist`);\n        }\n        return measures[measure](this);\n    }\n\n    /**\n     * Returns the area under the ROC curve\n     */\n    getAURC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fp[i] / this.nNeg;\n            y[i] = this.tp[i] / this.nPos;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] - x[i - 1]) * (y[i] + y[i - 1]);\n        }\n        return auc;\n    }\n\n    /**\n     * Returns the area under the DET curve\n     */\n    getAUDC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fn[i] / this.nPos;\n            y[i] = this.fp[i] / this.nNeg;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] + x[i - 1]) * (y[i] - y[i - 1]);\n        }\n        return auc;\n    }\n\n    getDistribution(options) {\n        options = options || {};\n        var cutLength = this.cutoffs.length;\n        var cutLow = options.xMin || Math.floor(this.cutoffs[cutLength - 1] * 100) / 100;\n        var cutHigh = options.xMax || Math.ceil(this.cutoffs[1] * 100) / 100;\n        var interval = options.interval || Math.floor(((cutHigh - cutLow) / 20 * 10000000) - 1) / 10000000; // Trick to avoid the precision problem of float numbers\n\n        var xLabels = [];\n        var interValues = [];\n        var intraValues = [];\n        var interCumPercent = [];\n        var intraCumPercent = [];\n\n        var nTP = this.tp[cutLength - 1], currentTP = 0;\n        var nFP = this.fp[cutLength - 1], currentFP = 0;\n\n        for (var i = cutLow, j = (cutLength - 1); i <= cutHigh; i += interval) {\n            while (this.cutoffs[j] < i)\n                j--;\n\n            xLabels.push(i);\n\n            var thisTP = nTP - currentTP - this.tp[j];\n            var thisFP = nFP - currentFP - this.fp[j];\n\n            currentTP += thisTP;\n            currentFP += thisFP;\n\n            interValues.push(thisFP);\n            intraValues.push(thisTP);\n\n            interCumPercent.push(100 - (nFP - this.fp[j]) / nFP * 100);\n            intraCumPercent.push(100 - (nTP - this.tp[j]) / nTP * 100);\n        }\n\n        return {\n            xLabels: xLabels,\n            interValues: interValues,\n            intraValues: intraValues,\n            interCumPercent: interCumPercent,\n            intraCumPercent: intraCumPercent\n        };\n    }\n}\n\nPerformance.names = {\n    acc: 'Accuracy',\n    err: 'Error rate',\n    fpr: 'False positive rate',\n    tpr: 'True positive rate',\n    fnr: 'False negative rate',\n    tnr: 'True negative rate',\n    ppv: 'Positive predictive value',\n    npv: 'Negative predictive value',\n    pcfall: 'Prediction-conditioned fallout',\n    pcmiss: 'Prediction-conditioned miss',\n    lift: 'Lift value',\n    rpp: 'Rate of positive predictions',\n    rnp: 'Rate of negative predictions',\n    threshold: 'Threshold'\n};\n\nmodule.exports = Performance;\n","'use strict';\n\nvar defaultOptions = {\n  size: 1,\n  value: 0\n};\n\n/**\n * Case when the entry is an array\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction arrayCase(data, options) {\n  var len = data.length;\n  if (typeof options.size === 'number') {\n    options.size = [options.size, options.size];\n  }\n\n  var cond = len + options.size[0] + options.size[1];\n\n  var output;\n  if (options.output) {\n    if (options.output.length !== cond) {\n      throw new RangeError('Wrong output size');\n    }\n    output = options.output;\n  } else {\n    output = new Array(cond);\n  }\n\n  var i;\n  if (options.value === 'circular') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) {\n        output[i] = data[(len - (options.size[0] % len) + i) % len];\n      } else if (i < options.size[0] + len) {\n        output[i] = data[i - options.size[0]];\n      } else {\n        output[i] = data[(i - options.size[0]) % len];\n      }\n    }\n  } else if (options.value === 'replicate') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[0];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[len - 1];\n    }\n  } else if (options.value === 'symmetric') {\n    if (options.size[0] > len || options.size[1] > len) {\n      throw new RangeError(\n        'expanded value should not be bigger than the data length'\n      );\n    }\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[options.size[0] - 1 - i];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[2 * len + options.size[0] - i - 1];\n    }\n  } else {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = options.value;\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = options.value;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Case when the entry is a matrix\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction matrixCase(data, options) {\n  // var row = data.length;\n  // var col = data[0].length;\n  if (options.size[0] === undefined) {\n    options.size = [options.size, options.size, options.size, options.size];\n  }\n  throw new Error('matrix not supported yet, sorry');\n}\n\n/**\n * Pads and array\n * @param {Array <number>} data\n * @param {object} options\n */\nfunction padArray(data, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (Array.isArray(data)) {\n    if (Array.isArray(data[0])) return matrixCase(data, options);\n    else return arrayCase(data, options);\n  } else {\n    throw new TypeError('data should be an array');\n  }\n}\n\nmodule.exports = padArray;\n","import { Matrix, MatrixTransposeView, inverse } from 'ml-matrix';\nimport padArray from 'ml-pad-array';\n\nconst defaultOptions = {\n  windowSize: 5,\n  derivative: 1,\n  polynomial: 2,\n  pad: 'none',\n  padValue: 'replicate',\n};\n\n/**\n * Savitzky-Golay filter\n * @param {Array <number>} data\n * @param {number} h\n * @param {Object} options\n * @returns {Array}\n */\nexport default function savitzkyGolay(data, h, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (\n    options.windowSize % 2 === 0 ||\n    options.windowSize < 5 ||\n    !Number.isInteger(options.windowSize)\n  ) {\n    throw new RangeError(\n      'Invalid window size (should be odd and at least 5 integer number)',\n    );\n  }\n  if (options.derivative < 0 || !Number.isInteger(options.derivative)) {\n    throw new RangeError('Derivative should be a positive integer');\n  }\n  if (options.polynomial < 1 || !Number.isInteger(options.polynomial)) {\n    throw new RangeError('Polynomial should be a positive integer');\n  }\n\n  let C, norm;\n  let step = Math.floor(options.windowSize / 2);\n\n  if (options.pad === 'pre') {\n    data = padArray(data, { size: step, value: options.padValue });\n  }\n\n  let ans = new Array(data.length - 2 * step);\n\n  if (\n    options.windowSize === 5 &&\n    options.polynomial === 2 &&\n    (options.derivative === 1 || options.derivative === 2)\n  ) {\n    if (options.derivative === 1) {\n      C = [-2, -1, 0, 1, 2];\n      norm = 10;\n    } else {\n      C = [2, -1, -2, -1, 2];\n      norm = 7;\n    }\n  } else {\n    let J = Matrix.ones(options.windowSize, options.polynomial + 1);\n    let inic = -(options.windowSize - 1) / 2;\n    for (let i = 0; i < J.rows; i++) {\n      for (let j = 0; j < J.columns; j++) {\n        if (inic + 1 !== 0 || j !== 0) J.set(i, j, Math.pow(inic + i, j));\n      }\n    }\n    let Jtranspose = new MatrixTransposeView(J);\n    let Jinv = inverse(Jtranspose.mmul(J));\n    C = Jinv.mmul(Jtranspose);\n    C = C.getRow(options.derivative);\n    norm = 1;\n  }\n  let det = norm * Math.pow(h, options.derivative);\n  for (let k = step; k < data.length - step; k++) {\n    let d = 0;\n    for (let l = 0; l < C.length; l++) d += (C[l] * data[l + k - step]) / det;\n    ans[k - step] = d;\n  }\n\n  if (options.pad === 'post') {\n    ans = padArray(ans, { size: step, value: options.padValue });\n  }\n\n  return ans;\n}\n","// auxiliary file to create the 256 look at table elements\n\nvar ans = new Array(256);\nfor (var i = 0; i < 256; i++) {\n    var num = i;\n    var c = 0;\n    while (num) {\n        num = num & (num - 1);\n        c++;\n    }\n    ans[i] = c;\n}\n\nmodule.exports = ans;","'use strict';\n\nvar eightBits = require('./creator');\n\n/**\n * Count the number of true values in an array\n * @param {Array} arr\n * @return {number}\n */\nfunction count(arr) {\n    var c = 0;\n    for (var i = 0; i < arr.length; i++) {\n        c += eightBits[arr[i] & 0xff] + eightBits[(arr[i] >> 8) & 0xff] + eightBits[(arr[i] >> 16) & 0xff] + eightBits[(arr[i] >> 24) & 0xff];\n    }\n    return c;\n}\n\n/**\n * Logical AND operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction and(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] & arr2[i];\n    return ans;\n}\n\n/**\n * Logical OR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction or(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] | arr2[i];\n    return ans;\n}\n\n/**\n * Logical XOR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction xor(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] ^ arr2[i];\n    return ans;\n}\n\n/**\n * Logical NOT operation\n * @param {Array} arr\n * @return {Array}\n */\nfunction not(arr) {\n    var ans = new Array(arr.length);\n    for (var i = 0; i < ans.length; i++)\n        ans[i] = ~arr[i];\n    return ans;\n}\n\n/**\n * Gets the n value of array arr\n * @param {Array} arr\n * @param {number} n\n * @return {boolean}\n */\nfunction getBit(arr, n) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    return Boolean(arr[index] & mask);\n}\n\n/**\n * Sets the n value of array arr to the value val\n * @param {Array} arr\n * @param {number} n\n * @param {boolean} val\n * @return {Array}\n */\nfunction setBit(arr, n, val) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    if (val)\n        arr[index] = mask | arr[index];\n    else\n        arr[index] = ~mask & arr[index];\n    return arr;\n}\n\n/**\n * Translates an array of numbers to a string of bits\n * @param {Array} arr\n * @returns {string}\n */\nfunction toBinaryString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(2);\n        str += '00000000000000000000000000000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a string of bits\n * @param {string} str\n * @returns {Array}\n */\nfunction parseBinaryString(str) {\n    var len = str.length / 32;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*32, 32), 2) | 0;\n    }\n    return ans;\n}\n\n/**\n * Translates an array of numbers to a hex string\n * @param {Array} arr\n * @returns {string}\n */\nfunction toHexString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(16);\n        str += '00000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a hex string\n * @param {string} str\n * @returns {Array}\n */\nfunction parseHexString(str) {\n    var len = str.length / 8;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*8, 8), 16) | 0;\n    }\n    return ans;\n}\n\n/**\n * Creates a human readable string of the array\n * @param {Array} arr\n * @returns {string}\n */\nfunction toDebug(arr) {\n    var binary = toBinaryString(arr);\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        str += '0000'.substr((i * 32).toString(16).length) + (i * 32).toString(16) + ':';\n        for (var j = 0; j < 32; j += 4) {\n            str += ' ' + binary.substr(i * 32 + j, 4);\n        }\n        if (i < arr.length - 1) str += '\\n';\n    }\n    return str\n}\n\nmodule.exports = {\n    count: count,\n    and: and,\n    or: or,\n    xor: xor,\n    not: not,\n    getBit: getBit,\n    setBit: setBit,\n    toBinaryString: toBinaryString,\n    parseBinaryString: parseBinaryString,\n    toHexString: toHexString,\n    parseHexString: parseHexString,\n    toDebug: toDebug\n};\n","import isArray from 'is-any-array';\n\n/**\n * Computes the mode of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction mode(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = 0;\n  var maxCount = 0;\n  var count = 0;\n  var counts = {};\n\n  for (var i = 0; i < input.length; ++i) {\n    var element = input[i];\n    count = counts[element];\n\n    if (count) {\n      counts[element]++;\n      count++;\n    } else {\n      counts[element] = count = 1;\n    }\n\n    if (count > maxCount) {\n      maxCount = count;\n      maxValue = input[i];\n    }\n  }\n\n  return maxValue;\n}\n\nexport default mode;\n","import max from 'ml-array-max';\nimport sum from 'ml-array-sum';\n\n/**\n * Computes the norm of the given values\n * @param {Array<number>} input\n * @param {object} [options={}]\n * @param {string} [options.algorithm='absolute'] absolute, sum or max\n * @return {number}\n */\n\nfunction norm(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$algorithm = options.algorithm,\n      algorithm = _options$algorithm === void 0 ? 'absolute' : _options$algorithm;\n\n  if (!Array.isArray(input)) {\n    throw new Error('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new Error('input must not be empty');\n  }\n\n  switch (algorithm.toLowerCase()) {\n    case 'absolute':\n      {\n        var absoluteSumValue = absoluteSum(input);\n        if (absoluteSumValue === 0) return input.slice(0);\n        return input.map(function (element) {\n          return element / absoluteSumValue;\n        });\n      }\n\n    case 'max':\n      {\n        var maxValue = max(input);\n        if (maxValue === 0) return input.slice(0);\n        return input.map(function (element) {\n          return element / maxValue;\n        });\n      }\n\n    case 'sum':\n      {\n        var sumValue = sum(input);\n        if (sumValue === 0) return input.slice(0);\n        return input.map(function (element) {\n          return element / sumValue;\n        });\n      }\n\n    default:\n      throw new Error(\"norm: unknown algorithm: \".concat(algorithm));\n  }\n}\n\nfunction absoluteSum(input) {\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += Math.abs(input[i]);\n  }\n\n  return sumValue;\n}\n\nexport default norm;\n","import isArray from 'is-any-array';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n/**\n * Fill an array with sequential numbers\n * @param {Array<number>} [input] - optional destination array (if not provided a new array will be created)\n * @param {object} [options={}]\n * @param {number} [options.from=0] - first value in the array\n * @param {number} [options.to=10] - last value in the array\n * @param {number} [options.size=input.length] - size of the array (if not provided calculated from step)\n * @param {number} [options.step] - if not provided calculated from size\n * @return {Array<number>}\n */\n\nfunction sequentialFill() {\n  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (_typeof(input) === 'object' && !isArray(input)) {\n    options = input;\n    input = [];\n  }\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options = options,\n      _options$from = _options.from,\n      from = _options$from === void 0 ? 0 : _options$from,\n      _options$to = _options.to,\n      to = _options$to === void 0 ? 10 : _options$to,\n      _options$size = _options.size,\n      size = _options$size === void 0 ? input.length : _options$size,\n      step = _options.step;\n\n  if (size && step) {\n    throw new Error('step is defined by the array size');\n  }\n\n  if (!size) {\n    if (step) {\n      size = Math.floor((to - from) / step) + 1;\n    } else {\n      size = to - from + 1;\n    }\n  }\n\n  if (!step && size) {\n    step = (to - from) / (size - 1);\n  }\n\n  if (Array.isArray(input)) {\n    input.length = 0; // only works with normal array\n\n    for (var i = 0; i < size; i++) {\n      input.push(from);\n      from += step;\n    }\n  } else {\n    if (input.length !== size) {\n      throw new Error('sequentialFill typed array must have the correct length');\n    }\n\n    for (var _i = 0; _i < size; _i++) {\n      input[_i] = from;\n      from += step;\n    }\n  }\n\n  return input;\n}\n\nexport default sequentialFill;\n","import arrayMean from 'ml-array-mean';\nimport isArray from 'is-any-array';\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {object} [options]\n * @param {boolean} [options.unbiased = true] - if true, divide by (n-1); if false, divide by n.\n * @param {number} [options.mean = arrayMean] - precalculated mean, if any.\n * @return {number}\n */\n\nfunction variance(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(values)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options$unbiased = options.unbiased,\n      unbiased = _options$unbiased === void 0 ? true : _options$unbiased,\n      _options$mean = options.mean,\n      mean = _options$mean === void 0 ? arrayMean(values) : _options$mean;\n  var sqrError = 0;\n\n  for (var i = 0; i < values.length; i++) {\n    var x = values[i] - mean;\n    sqrError += x * x;\n  }\n\n  if (unbiased) {\n    return sqrError / (values.length - 1);\n  } else {\n    return sqrError / values.length;\n  }\n}\n\nexport default variance;\n","import variance from 'ml-array-variance';\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {object} [options]\n * @param {boolean} [options.unbiased = true] - if true, divide by (n-1); if false, divide by n.\n * @param {number} [options.mean = arrayMean] - precalculated mean, if any.\n * @return {number}\n */\n\nfunction standardDeviation(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Math.sqrt(variance(values, options));\n}\n\nexport default standardDeviation;\n","/**\n * Merge abscissa values if the ordinate value is in a list of centroids\n * @param {object} originalPoints\n * @param {Array<number>} originalPoints.x\n * @param {Array<number>} originalPoints.y\n * @param {Array<number>} centroids\n * @param {object} [options]\n * @param {number} [options.window = 0.01] - has to be a positive number\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function mergeByCentroids(\n  originalPoints,\n  centroids,\n  options = {}\n) {\n  const { window = 0.01 } = options;\n\n  var mergedPoints = {\n    x: centroids.slice(),\n    y: new Array(centroids.length).fill(0)\n  };\n\n  var originalIndex = 0;\n  var mergedIndex = 0;\n  while (\n    originalIndex < originalPoints.x.length &&\n    mergedIndex < centroids.length\n  ) {\n    var diff = originalPoints.x[originalIndex] - centroids[mergedIndex];\n    if (Math.abs(diff) < window) {\n      mergedPoints.y[mergedIndex] += originalPoints.y[originalIndex++];\n    } else if (diff < 0) {\n      originalIndex++;\n    } else {\n      mergedIndex++;\n    }\n  }\n\n  return mergedPoints;\n}\n","import binarySearch from 'binary-search';\nimport { ascending, descending } from 'num-sort';\n\n/**\n *\n * @param {object} points\n * @param {Array<number>} originalPoints.x\n * @param {Array<number>} originalPoints.y\n * @param {*} options\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function closestX(points, options) {\n  const { x, y } = points;\n  const { target = x[0], reverse = false } = options;\n\n  let index;\n  if (reverse) {\n    index = binarySearch(x, target, descending);\n  } else {\n    index = binarySearch(x, target, ascending);\n  }\n\n  if (index >= 0) {\n    return {\n      x: x[index],\n      y: y[index]\n    };\n  } else {\n    index = ~index;\n    if (\n      (index !== 0 && Math.abs(x[index] - target) > 0.5) ||\n      index === x.length\n    ) {\n      return {\n        x: x[index - 1],\n        y: y[index - 1]\n      };\n    } else {\n      return {\n        x: x[index],\n        y: y[index]\n      };\n    }\n  }\n}\n","import mean from 'ml-array-mean';\n\n/**\n *\n * @param {object} points\n * @param {Array<number>} points.x\n * @param {Array<number>} points.y\n * @param {object} [options]\n * @param {boolean} [options.unbiased = true] - if true, divide by (n-1); if false, divide by n.\n * @return {number}\n */\nexport default function covariance(points, options = {}) {\n  const { x, y } = points;\n  const { unbiased = true } = options;\n\n  const meanX = mean(x);\n  const meanY = mean(y);\n\n  var error = 0;\n\n  for (let i = 0; i < x.length; i++) {\n    error += (x[i] - meanX) * (y[i] - meanY);\n  }\n\n  if (unbiased) {\n    return error / (x.length - 1);\n  } else {\n    return error / x.length;\n  }\n}\n","/**\n * Merge abscissas values on similar ordinates and weight the group of abscissas\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {number} [options.groupWidth = 0.001] - window for abscissas to merge\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function maxMerge(points, options = {}) {\n  const { x, y } = points;\n  const { groupWidth = 0.001 } = options;\n\n  var merged = { x: [], y: [] };\n  var maxAbscissa = { x: [], y: [] };\n  var size = 0;\n  var index = 0;\n\n  while (index < x.length) {\n    if (size === 0 || x[index] - merged.x[size - 1] > groupWidth) {\n      maxAbscissa.x.push(x[index]);\n      maxAbscissa.y.push(y[index]);\n      merged.x.push(x[index]);\n      merged.y.push(y[index]);\n      index++;\n      size++;\n    } else {\n      if (y[index] > maxAbscissa.y[size - 1]) {\n        maxAbscissa.x[size - 1] = x[index];\n        maxAbscissa.y[size - 1] = y[index];\n      }\n      merged.x[size - 1] = x[index];\n      merged.y[size - 1] += y[index];\n      index++;\n    }\n  }\n\n  merged.x = maxAbscissa.x.slice();\n\n  return merged;\n}\n","import binarySearch from 'binary-search';\nimport { ascending, descending } from 'num-sort';\n\n/**\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {object} [options.from = {index: 0}]\n * @param {object} [options.to = {index: x.length-1}]\n * @param {boolean} [options.reverse = false]\n * @return {{index: number, value: number}}\n */\nexport default function maxY(points, options = {}) {\n  const { x, y } = points;\n  let {\n    from = { index: 0 },\n    to = { index: x.length },\n    reverse = false\n  } = options;\n\n  if (from.value !== undefined && from.index === undefined) {\n    from.index = calculateIndex(from.value, x, reverse);\n  }\n\n  if (to.value !== undefined && to.index === undefined) {\n    to.index = calculateIndex(to.value, x, reverse);\n  }\n\n  var currentMax = Number.MIN_VALUE;\n  var currentIndex;\n  for (var i = from.index; i < to.index; i++) {\n    if (currentMax < y[i]) {\n      currentMax = y[i];\n      currentIndex = i;\n    }\n  }\n\n  return {\n    index: currentIndex,\n    value: currentMax\n  };\n}\n\n/**\n * @param {number} value\n * @param {Array<number>} x\n * @param {boolean} reverse\n * @return {number} index of the value in the array\n */\nfunction calculateIndex(value, x, reverse) {\n  let index;\n  if (reverse) {\n    index = binarySearch(x, value, descending);\n  } else {\n    index = binarySearch(x, value, ascending);\n  }\n\n  if (index < 0) {\n    throw new Error(`the value ${value} doesn't belongs to the abscissa value`);\n  }\n\n  return index;\n}\n","export default function sortX(points, options = {}) {\n  const { x, y } = points;\n  const { reverse = false } = options;\n\n  var sortFunc;\n  if (!reverse) {\n    sortFunc = (a, b) => a.x - b.x;\n  } else {\n    sortFunc = (a, b) => b.x - a.x;\n  }\n\n  var grouped = x\n    .map((val, index) => ({\n      x: val,\n      y: y[index]\n    }))\n    .sort(sortFunc);\n\n  var response = { x: x.slice(), y: y.slice() };\n  for (var i = 0; i < x.length; i++) {\n    response.x[i] = grouped[i].x;\n    response.y[i] = grouped[i].y;\n  }\n\n  return response;\n}\n","\n/**\n * In place modification of the 2 arrays to make X unique and sum the Y if X has the same value\n * @param {object} [points={}] : Object of points contains property x (an array) and y (an array)\n * @return points\n */\n\nexport default function uniqueX(points = {}) {\n  const { x, y } = points;\n  if (x.length < 2) return;\n  if (x.length !== y.length) {\n    throw new Error('The X and Y arrays mush have the same length');\n  }\n\n  let current = x[0];\n  let counter = 0;\n\n  for (let i = 1; i < x.length; i++) {\n    if (current !== x[i]) {\n      counter++;\n      current = x[i];\n      x[counter] = x[i];\n      if (i !== counter) {\n        y[counter] = 0;\n      }\n    }\n    if (i !== counter) {\n      y[counter] += y[i];\n    }\n  }\n\n  x.length = counter + 1;\n  y.length = counter + 1;\n}\n","/**\n * Merge abscissas values on similar ordinates and weight the group of abscissas\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {number} [options.groupWidth = 0.001] - window for abscissas to merge\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function weightedMerge(points, options = {}) {\n  const { x, y } = points;\n  const { groupWidth = 0.001 } = options;\n\n  var merged = { x: [], y: [] };\n  var weightedAbscissa = { x: [], y: [] };\n  var size = 0;\n  var index = 0;\n\n  while (index < x.length) {\n    if (size === 0 || x[index] - merged.x[size - 1] > groupWidth) {\n      weightedAbscissa.x.push(x[index] * y[index]);\n      weightedAbscissa.y.push(y[index]);\n      merged.x.push(x[index]);\n      merged.y.push(y[index]);\n      index++;\n      size++;\n    } else {\n      weightedAbscissa.x[size - 1] += x[index] * y[index];\n      weightedAbscissa.y[size - 1] += y[index];\n      merged.x[size - 1] = x[index];\n      merged.y[size - 1] += y[index];\n      index++;\n    }\n  }\n\n  for (var i = 0; i < merged.x.length; i++) {\n    merged.x[i] = weightedAbscissa.x[i] / weightedAbscissa.y[i];\n  }\n\n  return merged;\n}\n","/**\n * Function that calculates the integral of the line between two\n * x-coordinates, given the slope and intercept of the line.\n * @param {number} x0\n * @param {number} x1\n * @param {number} slope\n * @param {number} intercept\n * @return {number} integral value.\n */\nexport default function integral(x0, x1, slope, intercept) {\n  return (\n    0.5 * slope * x1 * x1 +\n    intercept * x1 -\n    (0.5 * slope * x0 * x0 + intercept * x0)\n  );\n}\n","import integral from './integral';\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"smooth\"\n */\nexport default function equallySpacedSmooth(x, y, from, to, numberOfPoints) {\n  var xLength = x.length;\n\n  var step = (to - from) / (numberOfPoints - 1);\n  var halfStep = step / 2;\n\n  var output = new Array(numberOfPoints);\n\n  var initialOriginalStep = x[1] - x[0];\n  var lastOriginalStep = x[xLength - 1] - x[xLength - 2];\n\n  // Init main variables\n  var min = from - halfStep;\n  var max = from + halfStep;\n\n  var previousX = Number.MIN_VALUE;\n  var previousY = 0;\n  var nextX = x[0] - initialOriginalStep;\n  var nextY = 0;\n\n  var currentValue = 0;\n  var slope = 0;\n  var intercept = 0;\n  var sumAtMin = 0;\n  var sumAtMax = 0;\n\n  var i = 0; // index of input\n  var j = 0; // index of output\n\n  function getSlope(x0, y0, x1, y1) {\n    return (y1 - y0) / (x1 - x0);\n  }\n\n  main: while (true) {\n    if (previousX <= min && min <= nextX) {\n      add = integral(0, min - previousX, slope, previousY);\n      sumAtMin = currentValue + add;\n    }\n\n    while (nextX - max >= 0) {\n      // no overlap with original point, just consume current value\n      var add = integral(0, max - previousX, slope, previousY);\n      sumAtMax = currentValue + add;\n\n      output[j++] = (sumAtMax - sumAtMin) / step;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      sumAtMin = sumAtMax;\n    }\n\n    currentValue += integral(previousX, nextX, slope, intercept);\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else if (i === xLength) {\n      nextX += lastOriginalStep;\n      nextY = 0;\n    }\n\n    slope = getSlope(previousX, previousY, nextX, nextY);\n    intercept = -slope * previousX + previousY;\n  }\n\n  return output;\n}\n","/**\n * function that retrieves the getEquallySpacedData with the variant \"slot\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"slot\"\n */\nexport default function equallySpacedSlot(x, y, from, to, numberOfPoints) {\n  var xLength = x.length;\n\n  var step = (to - from) / (numberOfPoints - 1);\n  var halfStep = step / 2;\n  var lastStep = x[x.length - 1] - x[x.length - 2];\n\n  var start = from - halfStep;\n  var output = new Array(numberOfPoints);\n\n  // Init main variables\n  var min = start;\n  var max = start + step;\n\n  var previousX = -Number.MAX_VALUE;\n  var previousY = 0;\n  var nextX = x[0];\n  var nextY = y[0];\n  var frontOutsideSpectra = 0;\n  var backOutsideSpectra = true;\n\n  var currentValue = 0;\n\n  // for slot algorithm\n  var currentPoints = 0;\n\n  var i = 1; // index of input\n  var j = 0; // index of output\n\n  main: while (true) {\n    if (previousX >= nextX) throw new Error('x must be an increasing serie');\n    while (previousX - max > 0) {\n      // no overlap with original point, just consume current value\n      if (backOutsideSpectra) {\n        currentPoints++;\n        backOutsideSpectra = false;\n      }\n\n      output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n      j++;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      currentValue = 0;\n      currentPoints = 0;\n    }\n\n    if (previousX > min) {\n      currentValue += previousY;\n      currentPoints++;\n    }\n\n    if (previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1) {\n      currentPoints--;\n    }\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else {\n      nextX += lastStep;\n      nextY = 0;\n      frontOutsideSpectra++;\n    }\n  }\n\n  return output;\n}\n","export default function getZones(from, to, numberOfPoints, exclusions = []) {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n\n  // in exclusions from and to have to be defined\n  exclusions = exclusions.filter(\n    (exclusion) => exclusion.from !== undefined && exclusion.to !== undefined\n  );\n\n  exclusions = JSON.parse(JSON.stringify(exclusions));\n  // we ensure that from before to\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from > exclusion.to) {\n      [exclusion.to, exclusion.from] = [exclusion.from, exclusion.to];\n    }\n  });\n\n  exclusions.sort((a, b) => a.from - b.from);\n\n  // we will rework the exclusions in order to remove overlap and outside range (from / to)\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from < from) exclusion.from = from;\n    if (exclusion.to > to) exclusion.to = to;\n  });\n  for (let i = 0; i < exclusions.length - 1; i++) {\n    if (exclusions[i].to > exclusions[i + 1].from) {\n      exclusions[i].to = exclusions[i + 1].from;\n    }\n  }\n  exclusions = exclusions.filter((exclusion) => exclusion.from < exclusion.to);\n\n  if (!exclusions || exclusions.length === 0) {\n    return [{ from, to, numberOfPoints }];\n  }\n\n  // need to deal with overlapping exclusions and out of bound exclusions\n\n  let toRemove = exclusions.reduce(\n    (previous, exclusion) => (previous += exclusion.to - exclusion.from),\n    0\n  );\n  let total = to - from;\n  let unitsPerPoint = (total - toRemove) / numberOfPoints;\n  let zones = [];\n  let currentFrom = from;\n  let totalPoints = 0;\n  for (let exclusion of exclusions) {\n    let currentNbPoints = Math.round(\n      (exclusion.from - currentFrom) / unitsPerPoint\n    );\n    totalPoints += currentNbPoints;\n    if (currentNbPoints > 0) {\n      zones.push({\n        from: currentFrom,\n        to: exclusion.from,\n        numberOfPoints: currentNbPoints\n      });\n    }\n\n    currentFrom = exclusion.to;\n  }\n  if (numberOfPoints - totalPoints > 0) {\n    zones.push({\n      from: currentFrom,\n      to: to,\n      numberOfPoints: numberOfPoints - totalPoints\n    });\n  }\n\n  return zones;\n}\n","import sequentialFill from 'ml-array-sequential-fill';\n\nimport equallySpacedSmooth from './equallySpacedSmooth';\nimport equallySpacedSlot from './equallySpacedSlot';\nimport getZones from './getZones';\n\n/**\n * Function that returns a Number array of equally spaced numberOfPoints\n * containing a representation of intensities of the spectra arguments x\n * and y.\n *\n * The options parameter contains an object in the following form:\n * from: starting point\n * to: last point\n * numberOfPoints: number of points between from and to\n * variant: \"slot\" or \"smooth\" - smooth is the default option\n *\n * The slot variant consist that each point in the new array is calculated\n * averaging the existing points between the slot that belongs to the current\n * value. The smooth variant is the same but takes the integral of the range\n * of the slot and divide by the step size between two points in the new array.\n *\n * @param {object} [arrayXY={}] - object containing 2 properties x and y (both an array)\n * @param {object} [options={}]\n * @param {number} [options.from=x[0]]\n * @param {number} [options.to=x[x.length-1]]\n * @param {string} [options.variant='smooth']\n * @param {number} [options.numberOfPoints=100]\n * @param {Array} [options.exclusions=[]] array of from / to that should be skipped for the generation of the points\n * @return {object<x: Array, y:Array>} new object with x / y array with the equally spaced data.\n */\n\nexport default function equallySpaced(arrayXY = {}, options = {}) {\n  let { x, y } = arrayXY;\n  let xLength = x.length;\n  let reverse = false;\n  if (x.length > 1 && x[0] > x[1]) {\n    x = x.slice().reverse();\n    y = y.slice().reverse();\n    reverse = true;\n  }\n\n  let {\n    from = x[0],\n    to = x[xLength - 1],\n    variant = 'smooth',\n    numberOfPoints = 100,\n    exclusions = []\n  } = options;\n\n  if (xLength !== y.length) {\n    throw new RangeError(\"the x and y vector doesn't have the same size.\");\n  }\n\n  if (typeof from !== 'number' || isNaN(from)) {\n    throw new RangeError(\"'from' option must be a number\");\n  }\n\n  if (typeof to !== 'number' || isNaN(to)) {\n    throw new RangeError(\"'to' option must be a number\");\n  }\n\n  if (typeof numberOfPoints !== 'number' || isNaN(numberOfPoints)) {\n    throw new RangeError(\"'numberOfPoints' option must be a number\");\n  }\n\n  if (numberOfPoints < 2) {\n    throw new RangeError(\"'numberOfPoints' option must be greater than 1\");\n  }\n\n  let zones = getZones(from, to, numberOfPoints, exclusions);\n\n  let xResult = [];\n  let yResult = [];\n  for (let zone of zones) {\n    let zoneResult = processZone(\n      x,\n      y,\n      zone.from,\n      zone.to,\n      zone.numberOfPoints,\n      variant,\n      reverse\n    );\n    xResult = xResult.concat(zoneResult.x);\n    yResult = yResult.concat(zoneResult.y);\n  }\n\n  if (reverse) {\n    if (from < to) {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    } else {\n      return { x: xResult, y: yResult };\n    }\n  } else {\n    if (from < to) {\n      return { x: xResult, y: yResult };\n    } else {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    }\n  }\n}\n\nfunction processZone(x, y, from, to, numberOfPoints, variant) {\n  if (numberOfPoints < 1) {\n    throw new RangeError('the number of points must be at least 1');\n  }\n\n  var output =\n    variant === 'slot'\n      ? equallySpacedSlot(x, y, from, to, numberOfPoints)\n      : equallySpacedSmooth(x, y, from, to, numberOfPoints);\n\n  return {\n    x: sequentialFill({\n      from,\n      to,\n      size: numberOfPoints\n    }),\n    y: output\n  };\n}\n","export default function getZones(from, to, exclusions = []) {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n\n  // in exclusions from and to have to be defined\n  exclusions = exclusions.filter(\n    (exclusion) => exclusion.from !== undefined && exclusion.to !== undefined\n  );\n\n  exclusions = JSON.parse(JSON.stringify(exclusions));\n  // we ensure that from before to\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from > exclusion.to) {\n      [exclusion.to, exclusion.from] = [exclusion.from, exclusion.to];\n    }\n  });\n\n  exclusions.sort((a, b) => a.from - b.from);\n\n  // we will rework the exclusions in order to remove overlap and outside range (from / to)\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from < from) exclusion.from = from;\n    if (exclusion.to > to) exclusion.to = to;\n  });\n  for (let i = 0; i < exclusions.length - 1; i++) {\n    if (exclusions[i].to > exclusions[i + 1].from) {\n      exclusions[i].to = exclusions[i + 1].from;\n    }\n  }\n  exclusions = exclusions.filter((exclusion) => exclusion.from < exclusion.to);\n\n  if (!exclusions || exclusions.length === 0) {\n    return [{ from, to }];\n  }\n\n  let zones = [];\n  let currentFrom = from;\n  for (let exclusion of exclusions) {\n    if (currentFrom < exclusion.from) {\n      zones.push({\n        from: currentFrom,\n        to: exclusion.from\n      });\n    }\n\n    currentFrom = exclusion.to;\n  }\n  if (currentFrom < to) {\n    zones.push({\n      from: currentFrom,\n      to: to\n    });\n  }\n\n  return zones;\n}\n","import getZones from './getZones';\n\n/**\n * Filter an array x/y based on various criteria\n * x points are expected to be sorted\n *\n * @param {object} points\n * @param {object} [options={}]\n * @param {array} [options.from]\n * @param {array} [options.to]\n * @param {array} [options.exclusions=[]]\n * @return {{x: Array<number>, y: Array<number>}}\n */\n\nexport default function filterX(points, options = {}) {\n  const { x, y } = points;\n  const { from = x[0], to = x[x.length - 1], exclusions = [] } = options;\n\n  let zones = getZones(from, to, exclusions);\n\n\n  let currentZoneIndex = 0;\n  let newX = [];\n  let newY = [];\n  let position = 0;\n  while (position < x.length) {\n    if (\n      x[position] <= zones[currentZoneIndex].to &&\n      x[position] >= zones[currentZoneIndex].from\n    ) {\n      newX.push(x[position]);\n      newY.push(y[position]);\n    } else {\n      if (x[position] > zones[currentZoneIndex].to) {\n        currentZoneIndex++;\n        if (!zones[currentZoneIndex]) break;\n      }\n    }\n    position++;\n  }\n\n  return {\n    x: newX,\n    y: newY\n  };\n}\n","import { DecisionTreeClassifier, DecisionTreeRegression } from 'ml-cart';\nimport {\n  RandomForestClassifier,\n  RandomForestRegression\n} from 'ml-random-forest';\n\n// Try to keep this list in the same structure as the README.\n\n// Unsupervised learning\nexport { PCA } from 'ml-pca';\nimport * as HClust from 'ml-hclust';\nexport { HClust };\nexport { default as KMeans } from 'ml-kmeans';\n\n// Supervised learning\nimport * as NaiveBayes from 'ml-naivebayes';\nexport { NaiveBayes };\nexport { default as KNN } from 'ml-knn';\nexport { PLS, KOPLS } from 'ml-pls';\nexport { default as CrossValidation } from 'ml-cross-validation';\nexport { default as ConfusionMatrix } from 'ml-confusion-matrix';\nexport { DecisionTreeClassifier };\nexport { RandomForestClassifier };\n\n// Artificial neural networks\nexport { default as FNN } from 'ml-fnn';\nexport { default as SOM } from 'ml-som';\n\n// Regression\nexport {\n  SimpleLinearRegression,\n  PolynomialRegression,\n  MultivariateLinearRegression,\n  PowerRegression,\n  ExponentialRegression,\n  TheilSenRegression,\n  RobustPolynomialRegression\n} from 'ml-regression';\nexport { DecisionTreeRegression };\nexport { RandomForestRegression };\n\n// Optimization\nexport { default as levenbergMarquardt } from 'ml-levenberg-marquardt';\nimport * as FCNNLS from 'ml-fcnnls';\nexport { FCNNLS };\n\n// Math\nimport * as MatrixLib from 'ml-matrix';\nconst {\n  Matrix,\n  SVD,\n  EVD,\n  CholeskyDecomposition,\n  LuDecomposition,\n  QrDecomposition\n} = MatrixLib;\nexport {\n  MatrixLib,\n  Matrix,\n  SVD,\n  EVD,\n  CholeskyDecomposition,\n  LuDecomposition,\n  QrDecomposition\n};\n\nexport { SparseMatrix } from 'ml-sparse-matrix';\nexport { default as Kernel } from 'ml-kernel';\nimport { distance, similarity } from 'ml-distance';\nexport { distance as Distance, similarity as Similarity };\nexport { default as distanceMatrix } from 'ml-distance-matrix';\nexport { default as XSadd } from 'ml-xsadd';\n\n// Statistics\nexport { default as Performance } from 'ml-performance';\n\n// Data preprocessing\nexport { default as savitzkyGolay } from 'ml-savitzky-golay';\n\n// Utility\nexport { default as BitArray } from 'ml-bit-array';\nexport { default as HashTable } from 'ml-hash-table';\nexport { default as padArray } from 'ml-pad-array';\nexport { default as binarySearch } from 'binary-search';\nimport * as numSort from 'num-sort';\nexport { numSort };\nexport { default as Random } from 'ml-random';\n\nimport min from 'ml-array-min';\nimport max from 'ml-array-max';\nimport median from 'ml-array-median';\nimport mean from 'ml-array-mean';\nimport mode from 'ml-array-mode';\nimport normed from 'ml-array-normed';\nimport rescale from 'ml-array-rescale';\nimport sequentialFill from 'ml-array-sequential-fill';\nimport sum from 'ml-array-sum';\nimport standardDeviation from 'ml-array-standard-deviation';\nimport variance from 'ml-array-variance';\nexport const Array = {\n  min,\n  max,\n  median,\n  mean,\n  mode,\n  normed,\n  rescale,\n  sequentialFill,\n  standardDeviation,\n  sum,\n  variance\n};\n\nimport centroidsMerge from 'ml-array-xy-centroids-merge';\nimport closestX from 'ml-arrayxy-closestx';\nimport covariance from 'ml-array-xy-covariance';\nimport maxMerge from 'ml-array-xy-max-merge';\nimport maxY from 'ml-array-xy-max-y';\nimport sortX from 'ml-array-xy-sort-x';\nimport uniqueX from 'ml-arrayxy-uniquex';\nimport weightedMerge from 'ml-array-xy-weighted-merge';\nimport equallySpaced from 'ml-array-xy-equally-spaced';\nimport filterX from 'ml-array-xy-filter-x';\nexport const ArrayXY = {\n  centroidsMerge,\n  closestX,\n  covariance,\n  maxMerge,\n  maxY,\n  sortX,\n  uniqueX,\n  weightedMerge,\n  equallySpaced,\n  filterX\n};\n"],"names":["toString","Object","prototype","isAnyArray","object","call","endsWith","max","input","isArray","TypeError","length","maxValue","i","min","minValue","rescale","output","options","arguments","undefined","Array","currentMin","currentMax","RangeError","_options$min","autoMinMax","_options$max","factor","checkRowIndex","matrix","index","outer","rows","checkColumnIndex","columns","checkRowVector","vector","to1DArray","checkColumnVector","checkIndices","rowIndices","columnIndices","row","checkRowIndices","column","checkColumnIndices","some","r","from","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","value","array","push","name","sumByRow","sum","j","get","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","varianceByColumn","varianceAll","size","centerByRow","set","centerByColumn","centerAll","getScaleByRow","scale","Math","pow","sqrt","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","inspectMatrix","indent","repeat","indentData","this","constructor","inspectData","maxRows","maxColumns","maxNumSize","maxI","maxJ","result","line","formatNumber","join","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","e","substring","installMathOperations","AbstractMatrix","Matrix","add","addS","addM","checkMatrix","sub","subS","subM","subtract","subtractS","subtractM","mul","mulS","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","round","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","newRows","newColumns","newData","newMatrix","fill","random","Number","isInteger","interval","zeros","data","l","matrix1","matrix2","isMatrix","klass","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","n","maxRow","p","pivot","Error","setSubMatrix","neg","getRow","getRowVector","rowVector","setRow","row1","row2","temp","getColumn","getColumnVector","columnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","diag","norm","type","cumulativeSum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","y","r1","c1","r2","c2","embed","mat","resultat","console","warn","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","scaleRows","isFinite","scaleColumns","flipRows","middle","first","last","flipColumns","kroneckerProduct","q","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","rowIndex","columnIndex","trace","by","product","standardDeviation","center","Symbol","for","rand","randomInt","randInt","diagonal","identity","eye","negate","tensorProduct","nRows","nColumns","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","BaseView","MatrixColumnView","MatrixColumnSelectionView","MatrixFlipColumnView","MatrixFlipRowView","MatrixRowView","MatrixRowSelectionView","MatrixSelectionView","MatrixSubView","MatrixTransposeView","WrapperMatrix1D","_calculateIndex","WrapperMatrix2D","wrap","LuDecomposition","t","LUcolj","kmax","lu","pivotVector","pivotSign","LU","isSingular","col","solve","count","X","determinant","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","tol","ii","useSVD","leftHandSide","rightHandSide","d","subMatrix0","subMatrix1","subMatrix2","xrange","exception","range","dependenciesOneRow","error","thresholdValue","returnArray","linearDependencies","thresholdError","results","Abis","pseudoInverse","svdSolution","SVD","leftSingularVectors","covariance","xMatrix","yMatrix","yIsSame","cov","correlation","sdx","sdy","corr","EigenvalueDecomposition","assumeSymmetric","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c3","el1","s2","tst1","high","low","nn","w","ra","sa","vr","vi","notlast","cdivres","exshift","z","iter","cdiv","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","L","isPositiveDefinite","B","nipals","scaleScores","maxIterations","terminationCriteria","u","tOld","diff","counter","xResidual","residual","yResidual","betas","sumValue","toDiscreteDistribution","numberOfClasses","counts","giniImpurity","probabilities","getNumberOfClasses","filter","val","arr","map","reduce","giniGain","splitted","splitsImpurity","splits","currentSplit","squaredError","meanArray","currentElement","regressionError","matrixSplitter","lesserX","greaterX","lesserY","greaterY","zip","ret","gainFunctions","gini","Utils","regression","splitFunctions","TreeNode","kind","gainFunction","splitFunction","minNumSamples","maxDepth","bestSplit","XTranspose","bestGain","Infinity","check","currentFeature","splitValues","featureSplit","currentSplitVal","split","gain","maxGain","splitValue","lesser","greater","calculatePrediction","distribution","train","currentDepth","parentGain","splitColumn","splittedMatrix","left","right","classify","setNodeParameters","node","defaultOptions","DecisionTreeClassifier","model","root","Tree","assign","trainingSet","trainingLabels","predict","toPredict","predictions","DecisionTreeRegression","trainingValues","SMALLEST_UNSAFE_INTEGER","LARGEST_SAFE_INTEGER","UINT32_MAX","UINT32_SIZE","INT32_SIZE","INT32_MAX","UINT21_SIZE","UINT21_MAX","int32","engine","next","addend","int53","int53Full","uint32","uint53","uint53Full","isPowerOfTwoMinusOne","bitmask","masking","downscaleToLoopCheckedRange","extendedRange","maximum","downscaleToRange","isEvenlyDivisibleByMaxInt32","upscaleWithHighMasking","upscaleToLoopCheckedRange","upscaleWithinU53","highRange","upscaleWithinI53AndLoopCheck","integer","DEFAULT_STRING_POOL","string","pool","poolLength","charAt","LOWER_HEX_POOL","lowerHex","upperHex","toUpperCase","stringRepeat","pattern","_","nativeMath","I32Array","buffer","ArrayBuffer","view","Int32Array","createEntropy","Date","getTime","imul","al","bl","ARRAY_SIZE","ARRAY_MAX","M","ARRAY_SIZE_MINUS_M","A","MersenneTwister19937","uses","initial","seed","source","seedWithArray","refreshData","temper","getUseCount","discard","previous","sourceLength","checkFloat","examplesBaggingWithReplacement","trainingValue","Random","autoSeed","Xr","featureBagging","replacement","usedIndex","toRet","Set","has","RandomForestBase","maxFeatures","nEstimators","treeOptions","isClassifier","indexes","useSampleBagging","Estimator","DTClassifier","DTRegression","estimators","est","load","res","values","predictionValues","RandomForestClassifier","baseModel","mode","super","pop","_ref","module","exports","window","median","quickSelectMedian","slice","selectionMethods","arrayMean","arrayMedian","selectionMethod","RandomForestRegression","PCA","dataset","means","stdevs","S","R","excludedFeatures","isCovarianceMatrix","method","nCompNIPALS","ignoreZeroVariance","_computeFromCovarianceMatrix","_adjust","covarianceMatrix","_computeWithNIPALS","svd","singularValues","eigenvalues","singularValue","nComponents","invert","getExplainedVariance","getCumulativeVariance","explained","getEigenvectors","getEigenvalues","getStandardDeviations","getLoadings","evd","EVD","eigenvectorMatrix","realEigenvalues","reverse","dc","NIPALS","squaredEuclidean","euclidean","distanceMatrix","distanceFn","getMatrix","Heap","defaultCmp","heapify","heappop","heappush","heappushpop","heapreplace","insort","nlargest","nsmallest","updateItem","_siftdown","_siftup","lo","hi","cmp","mid","concat","item","lastelt","returnitem","_i","_j","_ref1","_results","_results1","_len","pos","elem","los","startpos","newitem","parent","parentpos","childpos","endpos","rightpos","nodes","replace","pushpop","peek","contains","clear","empty","heap","toArray","insert","top","front","require$$0","Cluster","children","height","isLeaf","cut","list","ans","group","groups","forEach","child","traverse","cb","visit","cluster","singleLink","dKI","dKJ","completeLink","averageLink","dIJ","nj","weightedAverageLink","centroidLink","medianLink","wardLink","nk","wardLink2","ai","aj","agnes","distanceFunction","isDistanceMatrix","updateFunc","getDistanceMatrix","numLeaves","toLowerCase","clusters","distance","getSmallestDistance","cluster1","cluster2","newCluster","newClusters","newDistanceMatrix","newIndex","getPreviousIndex","prevI","prevICluster","smallest","smallestI","smallestJ","prev1","prev2","nearestVector","listVectors","similarityFunction","vectorIndex","maxSim","sim","minDist","MAX_VALUE","dist","calculateDistanceMatrix","updateClusterID","centers","clusterID","updateCenters","prevCenters","K","nDim","centersLen","dim","id","hasConverged","oldCenters","tolerance","LOOP","FLOAT_MUL","sh1","sh2","sh3","multiply_uint32","nlo","XSadd","now","state","Uint32Array","init","getFloat","bind","getUint32","nextState","periodCertification","PROB_TOLERANCE","randomChoice","valuesArr","cumSum","getArray","randomIndex","seedOrRandom","xsadd","XSAdd","randomGenerator","choice","randomSample","mostDistant","maxDist","minDistCent","kmeanspp","nSamples","localTrials","firstCenterIdx","closestDistSquared","cumSumClosestDistSquared","candidateIdx","distanceToCandidates","euclideanDistances","bestCandidate","bestPot","bestDistSquared","newDistSquared","newPot","distanceSymbol","KMeansResult","centroids","converged","iterations","nearest","centroid","computeInformation","enrichedCentroids","withIterations","initialization","step","newCenters","kmeansGenerator","stepResult","stepNumber","kmeans","separateClasses","features","classes","totalPerClasses","separatedClasses","currentIndex","GaussianNB","reload","calculateProbabilities","C1","PI","std","logPriorProbability","currentStd","getCurrentClass","modelName","currentCase","maxProbability","predictedClass","currentProbability","calculateLogProbability","C2","MultinomialNB","conditionalProbability","priorProbability","separateClass","classValues","divisor","matrixLog","Node","obj","KDTree","points","metric","dimensions","buildTree","restoreParent","toJSONImpl","point","maxNodes","maxDistance","bestNodes","BinaryHeap","nearestSearch","ownDistance","linearPoint","bestChild","linearDistance","otherChild","saveNode","content","src","dest","depth","scoreFunction","element","bubbleUp","end","sinkDown","parentN","elemScore","child2N","child1N","swap","child1","child1Score","child2","KNN","labels","kdTree","isEuclidean","euclideanDistance","getSinglePrediction","knn","nearestPoints","pointsPerClass","maxPoints","lastElement","currentClass","currentPoints","pow2array","initializeMatrices","PLS","meanX","stdDevX","meanY","stdDevY","PBQ","R2X","scaleMethod","latentVectors","rx","cx","ry","cy","ssqXcal","sumOfSquaresY","T","P","Q","W","transposeX","transposeY","tIndex","maxSumColIndex","uIndex","t1","den","pnorm","ssqYcal","E","F","KOPLS","YLoadingMat","SigmaPow","YScoreMat","predScoreMat","YOrthLoadingVec","YOrthEigen","YOrthScoreMat","toNorm","TURegressionCoeff","kernelX","kernel","orthogonalComp","predictiveComp","predictiveComponents","orthogonalComponents","compute","Identity","Sigma","diagonalMatrix","YOrthScoreNorm","TpiPrime","CoTemp","SoTemp","toiPrime","ITo","lastScoreMat","lastTpPrime","KTestTrain","YOrthScoreVector","scoreMatPrime","p1","p2","p3","prediction","predYOrthVectors","ConfusionMatrix","actual","predicted","distinctLabels","actualIdx","predictedIdx","getLabels","getTotalCount","getTrueCount","getFalseCount","getTruePositiveCount","label","getIndex","getTrueNegativeCount","getFalsePositiveCount","getFalseNegativeCount","getPositiveCount","getNegativeCount","getTruePositiveRate","getTrueNegativeRate","getPositivePredictiveValue","TP","getNegativePredictiveValue","TN","getFalseNegativeRate","getFalsePositiveRate","getFalseDiscoveryRate","FP","getFalseOmissionRate","FN","getF1Score","getMatthewsCorrelationCoefficient","getInformedness","getMarkedness","getConfusionTable","getAccuracy","correct","incorrect","getCount","actualIndex","predictedIndex","N","twiddle","CV","initMatrix","getDistinct","validate","Classifier","classifierOptions","testIdx","trainIdx","confusionMatrix","distinct","testFeatures","trainFeatures","testLabels","trainLabels","getTrainTest","classifier","updateConfusionMatrix","validateWithCallback","predictedLabels","leaveOneOut","leavePOut","gen","combinations","allIdx","kFold","current","folds","randi","logistic","expELU","param","softExponential","softExponentialPrime","ACTIVATION_FUNCTIONS","activation","derivate","arctan","softsign","relu","softplus","bent","sinusoid","sinc","gaussian","Layer","inputSize","outputSize","regularization","epsilon","activationParam","selectedFunction","params","actFunction","derFunction","activationFunction","mlMatrix","forward","backpropagation","delta","dW","db","aCopy","update","OutputLayer","FeedForwardNeuralNetworks","hiddenLayers","learningRate","dicts","layers","keys","buildNetwork","dictOutputs","inputs","propagate","outputs","NodeSquare","weights","som","neighbors","adjustWeights","target","influence","getDistance","otherNode","getDistanceTorus","distX","distY","gridDim","getNeighbors","xy","torus","getPos","bestNeighbor","direction","simA","simB","getPosition","NodeHexagonal","hX","distZ","fields","randomizer","squareEuclidean","gridType","SOM","hasOwnProperty","numWeights","converters","getConverters","extractor","creator","nodeType","hx","distanceMethod","getMaxDistance","times","findBMU","adjust","iterationCount","startLearningRate","mapRadius","algorithmMethod","_initNodes","done","normalizers","denormalizers","getNormalizer","getDenormalizer","minMax","getRandomValue","zero","one","loadModel","eval","export","includeDistance","initNodes","setTraining","convertedSet","numIterations","timeConstant","trainOne","neighbourhoodRadius","trainingSetFactor","bmu","_findBestMatchingUnit","now2","radiusLimit","xMin","xMax","yMin","yMax","theX","theY","getConvertedNodes","candidate","lowest","computePosition","self","_predict","getQuantizationError","fit","getFit","maybeToPrecision","digits","checkArraySize","BaseRegression","toLaTeX","score","y2","xSum","ySum","chi2","rmsd","xSquared","ySquared","xY","PolynomialRegression","degree","powers","coefficients","checkArrayLength","regress","precision","_toFormula","isLaTeX","sup","closeSup","fn","str","json","pr","FT","SimpleLinearRegression","slope","intercept","computeX","xFactor","absIntercept","operator","slr","numerator","ExponentialRegression","er","yl","linear","PowerRegression","newInputs","latex","xl","MultivariateLinearRegression","statistics","xt","xx","invxx","beta","fittedValues","ri","stdError","stdErrorMatrix","stdErrors","tStats","summary","regressionStatistics","standardError","observations","variables","tStat","sigma","GaussianKernel","constant","PolynomialKernel","SigmoidKernel","ANOVAKernel","len","CauchyKernel","ExponentialKernel","HistogramIntersectionKernel","LaplacianKernel","MultiquadraticKernel","RationalQuadraticKernel","kernelType","rbf","polynomial","poly","anova","cauchy","histogram","HistogramKernel","laplacian","multiquadratic","rational","RationalKernel","sigmoid","mlp","Kernel","KernelConstructor","kernelFunction","landmarks","kernelMatrix","TheilSenRegression","theilSen","slopes","medianSlope","cuts","RobustPolynomialRegression","robustPolynomial","tuples","getRandomTuples","calcCoefficients","residuals","residualsMedian","tuple","half","errorCalculation","parameters","parameterizedFunction","func","gradientFunction","evaluatedData","gradientDifference","paramFunction","auxParams","funcParam","matrixFunction","damping","gradientFunc","matrixFunc","inverseMatrix","levenbergMarquardt","errorTolerance","minValues","maxValues","initialValues","parLen","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","iteration","parameterValues","parameterError","sortCollectionSet","collection","key","objectCollection","BigInt","sorted","cssls","XtX","XtY","Pset","choXtX","luXtX","sortedPset","sortedEset","cols2Solve","vars","initialisation","Fset","D","setDifference","C","includes","optimality","maxIter","Jset","fullSet","notPset","fcnnls","infeasIndex","Hset","ones","hRowColIdx","negRowColIdx","alphaMin","minIdx","idx2zero","findIndex","newParam","fcnnlsVector","haystack","needle","comparator","assertNumber","number","largestPrime","primeNumbers","nextPrime","binarySearch","ascending","FREE","FULL","REMOVED","defaultInitialCapacity","defaultMinLoadFactor","defaultMaxLoadFactor","HashTable","table","minLoadFactor","maxLoadFactor","freeEntries","lowWaterMark","highWaterMark","initialCapacity","capacity","chooseHighWaterMark","indexOfKey","indexOfInsertion","newCapacity","chooseGrowCapacity","rehash","remove","noRehash","maybeShrinkCapacity","delete","chooseShrinkCapacity","containsKey","hash","decrement","containsValue","indexOfValue","ensureCapacity","minCapacity","oldCapacity","oldTable","oldValues","oldState","newTable","newValues","newState","chooseLowWaterMark","forEachKey","forEachValue","forEachPair","minLoad","maxLoad","SparseMatrix","_init","elements","symmetric","forEachNonZero","bandWidth","isBanded","width","v1","v2","cardinality","getNonZeros","setThreshold","newThreshold","trans","inplaceOperator","inplaceOperatorScalar","inplaceOperatorMatrix","staticOperator","inplaceMethod","staticMethod","operators","fillTemplateFunction","op","methods","mathMethod","template","RegExp","additiveSymmetric","avg","bhattacharyya","canberra","chebyshev","clark","czekanowskiSimilarity","up","down","czekanowskiDistance","dice","q1","q2","divergence","fidelity","gower","harmonicMean","hellinger","innerProduct","intersection","jaccard","jeffreys","jensenDifference","jensenShannon","kdivergence","kulczynski","kullbackLeibler","kumarHassebrook","kumarJohnson","lorentzian","manhattan","matusita","minkowski","motyka","neyman","pearson","probabilisticSymmetric","ruzicka","soergel","sorensen","squared","squaredChord","taneja","tanimoto","bitvector","inter","union","tanimotoS","topsoe","waveHedges","createTree","spectrum","minWindow","to","mainCreateTree","start","getSimilarity","gamma","treeSimilarity","getFunction","cosine","diceD","intersectionD","jaccardD","kulczynskiD","motykaD","avgA","avgB","newA","newB","squaredChordD","pred","cutoffs","tn","tp","fp","nNeg","nPos","nPosPred","nNegPred","Performance","isDistance","predP","all","targ","currentPred","nTp","nFp","getMeasure","measure","measures","getAURC","auc","getAUDC","getDistribution","cutLength","cutLow","cutHigh","xLabels","interValues","intraValues","interCumPercent","intraCumPercent","nTP","currentTP","nFP","currentFP","thisTP","thisFP","names","acc","err","fpr","tpr","fnr","tnr","ppv","npv","pcfall","pcmiss","lift","rpp","rnp","arrayCase","cond","matrixCase","padArray","windowSize","derivative","pad","padValue","savitzkyGolay","J","inic","Jtranspose","det","eightBits","arr1","arr2","getBit","mask","setBit","toBinaryString","substr","parseBinaryString","toHexString","parseHexString","toDebug","binary","maxCount","_options$algorithm","algorithm","absoluteSumValue","absoluteSum","_typeof","iterator","sequentialFill","_options","_options$from","_options$to","_options$size","_options$unbiased","_options$mean","sqrError","mergeByCentroids","originalPoints","mergedPoints","originalIndex","mergedIndex","closestX","descending","maxMerge","groupWidth","merged","maxAbscissa","maxY","calculateIndex","sortX","sortFunc","grouped","response","uniqueX","weightedMerge","weightedAbscissa","integral","x0","x1","equallySpacedSmooth","numberOfPoints","xLength","halfStep","initialOriginalStep","lastOriginalStep","previousX","previousY","nextX","nextY","currentValue","sumAtMin","sumAtMax","main","equallySpacedSlot","lastStep","frontOutsideSpectra","backOutsideSpectra","getZones","exclusions","exclusion","JSON","parse","stringify","toRemove","unitsPerPoint","zones","currentFrom","totalPoints","currentNbPoints","equallySpaced","arrayXY","variant","xResult","yResult","zone","zoneResult","processZone","filterX","currentZoneIndex","newX","newY","position","MatrixLib","normed","ArrayXY","centroidsMerge"],"mappings":"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CA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WACA,WAGA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,IACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,EACA,EACA,GACA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,WAGA,GACA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,GACA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,GA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"}